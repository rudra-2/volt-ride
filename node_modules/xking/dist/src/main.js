#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const utils_1 = require("./utils");
const plugin_1 = require("./plugin");
const plugin_2 = require("./plugin");
const fs_1 = require("fs");
const path_1 = require("path");
const config_template_json_1 = __importDefault(require("../config.template.json"));
const program = new commander_1.Command();
const configPath = (0, path_1.join)(__dirname, "../config.json");
function init() {
    try {
        const config = (0, fs_1.readFileSync)(configPath, "utf-8");
    }
    catch (err) {
        (0, fs_1.writeFileSync)(configPath, JSON.stringify(config_template_json_1.default, null, 4));
    }
}
init();
program
    .command("rds")
    .description("阿里云数据库相关操作")
    .option("-wl, --whiteList", "白名单")
    .action(async ({ whiteList }, options) => {
    if (whiteList) {
        const ipinfo = await (0, utils_1.getIP)();
        const { ip, city } = ipinfo;
        await (0, plugin_1.addWhiteList2Rds)(ip);
        console.log(`rds 白名单添加成功 城市: ${city} ${ip}`);
    }
});
program
    .command("redis")
    .description("阿里云Redis相关操作")
    .option("-wl, --whiteList", "白名单")
    .action(async ({ whiteList }, options) => {
    if (whiteList) {
        const ipinfo = await (0, utils_1.getIP)();
        const { ip, city } = ipinfo;
        await (0, plugin_2.addWhiteList2Redis)(ip);
        console.log(`redis 白名单添加成功 城市: ${city} ${ip}`);
    }
});
program
    .command("config")
    .description("获取当前配置信息")
    .argument("<type>", "配置类型 get/set/generate")
    .option("-p, --path <path>", "配置路径")
    .action((arg, options) => {
    if (arg === "get") {
        const config = (0, fs_1.readFileSync)(configPath, "utf-8");
        console.log(config);
    }
    if (arg === "set") {
        const { path: argPath } = options;
        const config = (0, fs_1.readFileSync)((0, path_1.join)(argPath), "utf-8");
        (0, fs_1.writeFileSync)(configPath, config);
        console.log(`${configPath} 配置文件已更新`);
    }
    if (arg === "generate") {
        (0, fs_1.writeFileSync)("template.json", JSON.stringify(config_template_json_1.default, null, 4));
        console.log("template.json 配置文件模板已生成");
    }
});
program.parse();
