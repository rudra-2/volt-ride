"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addWhiteList2Redis = exports.getWhiteList = void 0;
// This file is auto-generated, don't edit it
const r_kvstore20150101_1 = __importStar(require("@alicloud/r-kvstore20150101")), $R_kvstore20150101 = r_kvstore20150101_1;
// 依赖的模块可通过下载工程中的模块依赖文件或右上角的获取 SDK 依赖信息查看
const $OpenApi = __importStar(require("@alicloud/openapi-client"));
const $Util = __importStar(require("@alicloud/tea-util"));
const common_util_1 = require("../../utils/common.util");
const createRedisClient = function () {
    const aliyun = (0, common_util_1.getConfig)("aliyun");
    let config = new $OpenApi.Config({
        accessKeyId: aliyun.ACCESS_KEY_ID,
        accessKeySecret: aliyun.ACCESS_KEY_SECRET,
    });
    config.endpoint = `r-kvstore.aliyuncs.com`;
    return new r_kvstore20150101_1.default(config);
};
async function getWhiteList() {
    let client = createRedisClient();
    const redis = (0, common_util_1.getConfig)("redis");
    let describeSecurityIpsRequest = new $R_kvstore20150101.DescribeSecurityIpsRequest({
        instanceId: redis.instanceId,
    });
    let runtime = new $Util.RuntimeOptions({});
    const res = await client.describeSecurityIpsWithOptions(describeSecurityIpsRequest, runtime);
    if (res.statusCode !== 200) {
        throw new Error("获取redis白名单列表失败:", res.body.message);
    }
    return res.body.securityIpGroups?.securityIpGroup ?? [];
}
exports.getWhiteList = getWhiteList;
async function addWhiteList2Redis(ip) {
    let client = createRedisClient();
    const redis = (0, common_util_1.getConfig)("redis");
    const securityIpGroupName = "api";
    console.log(redis, securityIpGroupName);
    const whiteList = (await getWhiteList())
        .find((row) => row.securityIpGroupName === securityIpGroupName)
        ?.securityIpList?.split(",") ?? [];
    if (whiteList.length >= 50) {
        whiteList.splice(0, whiteList.length / 2);
    }
    if (whiteList.includes(ip)) {
        console.log("白名单已存在", ip);
        return;
    }
    else {
        whiteList.push(ip);
    }
    let modifySecurityIpsRequest = new $R_kvstore20150101.ModifySecurityIpsRequest({
        instanceId: redis.instanceId,
        securityIps: whiteList.join(","),
        securityIpGroupName,
    });
    let runtime = new $Util.RuntimeOptions({});
    return await client.modifySecurityIpsWithOptions(modifySecurityIpsRequest, runtime);
}
exports.addWhiteList2Redis = addWhiteList2Redis;
