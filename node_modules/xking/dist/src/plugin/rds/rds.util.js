"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addWhiteList2Rds = exports.getInstancesIpList = exports.getIpList = void 0;
const rds20140815_1 = __importStar(require("@alicloud/rds20140815")), $Rds20140815 = rds20140815_1;
const openapi_client_1 = require("@alicloud/openapi-client");
const $Util = __importStar(require("@alicloud/tea-util"));
const utils_1 = require("../../utils");
const createRDSClient = (accessKeyId, accessKeySecret) => {
    const aliyun = (0, utils_1.getConfig)("aliyun");
    let config = new openapi_client_1.Config({
        accessKeyId: aliyun.ACCESS_KEY_ID,
        accessKeySecret: aliyun.ACCESS_KEY_SECRET,
    });
    config.endpoint = `rds.aliyuncs.com`;
    return new rds20140815_1.default(config);
};
const getIpList = async () => {
    let client = createRDSClient();
    let describeDBInstanceIPArrayListRequest = new $Rds20140815.DescribeDBInstanceIPArrayListRequest({
        DBInstanceId: "rm-bp1000u01x8z883tp",
    });
    const res = await client.describeDBInstanceIPArrayList(describeDBInstanceIPArrayListRequest);
    return res.body.items;
};
exports.getIpList = getIpList;
const getInstancesIpList = async () => {
    const mysql = (0, utils_1.getConfig)("mysql");
    let client = createRDSClient();
    let describeDBInstanceIPArrayListRequest = new $Rds20140815.DescribeDBInstanceIPArrayListRequest({
        DBInstanceId: mysql.instanceId,
    });
    let runtime = new $Util.RuntimeOptions({});
    const res = await client.describeDBInstanceIPArrayListWithOptions(describeDBInstanceIPArrayListRequest, runtime);
    if (res.statusCode !== 200) {
        throw new Error("获取rds白名单列表失败:", res.body.message);
    }
    return res.body.items?.DBInstanceIPArray ?? [];
};
exports.getInstancesIpList = getInstancesIpList;
const addWhiteList2Rds = async (ip) => {
    let client = createRDSClient();
    const DBInstanceIPArrayName = "api";
    const mysql = (0, utils_1.getConfig)("mysql");
    const whiteList = await (0, exports.getInstancesIpList)();
    console.log();
    const apiList = whiteList
        .filter((item) => item.DBInstanceIPArrayName === DBInstanceIPArrayName)[0]
        ?.securityIPList?.split(",") ?? [];
    if (apiList.length >= 50) {
        apiList.splice(0, apiList.length / 2);
    }
    if (apiList.includes(ip)) {
        console.log("白名单已存在", ip);
        return;
    }
    else {
        apiList.push(ip);
    }
    console.log("apiList:", apiList);
    let modifySecurityIpsRequest = new $Rds20140815.ModifySecurityIpsRequest({
        DBInstanceId: mysql.instanceId,
        DBInstanceIPArrayName,
        securityIps: apiList.join(","),
    });
    // 复制代码运行请自行打印 API 的返回值
    return client.modifySecurityIps(modifySecurityIpsRequest);
};
exports.addWhiteList2Rds = addWhiteList2Rds;
