/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddShardingNodeRequest extends $tea.Model {
    autoPay?: boolean;
    businessInfo?: string;
    couponNo?: string;
    forceTrans?: boolean;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    shardCount?: number;
    sourceBiz?: string;
    vSwitchId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShardingNodeResponseBody extends $tea.Model {
    nodeIds?: string[];
    orderId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShardingNodeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddShardingNodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateDirectConnectionRequest extends $tea.Model {
    connectionString?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    port?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateDirectConnectionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateDirectConnectionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AllocateDirectConnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateInstancePublicConnectionRequest extends $tea.Model {
    connectionStringPrefix?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    port?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateInstancePublicConnectionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateInstancePublicConnectionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AllocateInstancePublicConnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCloudResourceAuthorizedRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    roleArn?: string;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCloudResourceAuthorizedResponseBody extends $tea.Model {
    authorizationState?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCloudResourceAuthorizedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CheckCloudResourceAuthorizedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAccountRequest extends $tea.Model {
    accountDescription?: string;
    accountName?: string;
    accountPassword?: string;
    accountPrivilege?: string;
    accountType?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAccountResponseBody extends $tea.Model {
    acountName?: string;
    instanceId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAccountResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBackupRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBackupResponseBody extends $tea.Model {
    backupJobID?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBackupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateBackupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCacheAnalysisTaskRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCacheAnalysisTaskResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCacheAnalysisTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCacheAnalysisTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGlobalDistributeCacheRequest extends $tea.Model {
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    seedSubInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGlobalDistributeCacheResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGlobalDistributeCacheResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateGlobalDistributeCacheResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGlobalSecurityIPGroupRequest extends $tea.Model {
    GIpList?: string;
    globalIgName?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGlobalSecurityIPGroupResponseBody extends $tea.Model {
    globalSecurityIPGroup?: CreateGlobalSecurityIPGroupResponseBodyGlobalSecurityIPGroup[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGlobalSecurityIPGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateGlobalSecurityIPGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceRequest extends $tea.Model {
    appendonly?: string;
    autoRenew?: string;
    autoRenewPeriod?: string;
    autoUseCoupon?: string;
    backupId?: string;
    businessInfo?: string;
    capacity?: number;
    chargeType?: string;
    clusterBackupId?: string;
    connectionStringPrefix?: string;
    couponNo?: string;
    dedicatedHostGroupId?: string;
    dryRun?: boolean;
    engineVersion?: string;
    globalInstance?: boolean;
    globalInstanceId?: string;
    globalSecurityGroupIds?: string;
    instanceClass?: string;
    instanceName?: string;
    instanceType?: string;
    networkType?: string;
    nodeType?: string;
    ownerAccount?: string;
    ownerId?: number;
    paramGroupId?: string;
    password?: string;
    period?: string;
    port?: string;
    privateIpAddress?: string;
    readOnlyCount?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    restoreTime?: string;
    secondaryZoneId?: string;
    securityToken?: string;
    shardCount?: number;
    srcDBInstanceId?: string;
    tag?: CreateInstanceRequestTag[];
    token?: string;
    vSwitchId?: string;
    vpcId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceResponseBody extends $tea.Model {
    bandwidth?: number;
    capacity?: number;
    chargeType?: string;
    config?: string;
    connectionDomain?: string;
    connections?: number;
    endTime?: string;
    instanceId?: string;
    instanceName?: string;
    instanceStatus?: string;
    networkType?: string;
    nodeType?: string;
    orderId?: number;
    port?: number;
    privateIpAddr?: string;
    QPS?: number;
    regionId?: string;
    requestId?: string;
    userName?: string;
    vSwitchId?: string;
    vpcId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstancesRequest extends $tea.Model {
    autoPay?: boolean;
    autoRenew?: string;
    businessInfo?: string;
    couponNo?: string;
    engineVersion?: string;
    instances?: string;
    ownerAccount?: string;
    ownerId?: number;
    rebuildInstance?: boolean;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstancesResponseBody extends $tea.Model {
    instanceIds?: CreateInstancesResponseBodyInstanceIds;
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstancesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTairInstanceRequest extends $tea.Model {
    autoPay?: boolean;
    autoRenew?: string;
    autoRenewPeriod?: string;
    autoUseCoupon?: string;
    backupId?: string;
    businessInfo?: string;
    chargeType?: string;
    clientToken?: string;
    clusterBackupId?: string;
    couponNo?: string;
    dryRun?: boolean;
    engineVersion?: string;
    globalInstanceId?: string;
    globalSecurityGroupIds?: string;
    instanceClass?: string;
    instanceName?: string;
    instanceType?: string;
    ownerAccount?: string;
    ownerId?: number;
    paramGroupId?: string;
    password?: string;
    period?: number;
    port?: number;
    privateIpAddress?: string;
    readOnlyCount?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    secondaryZoneId?: string;
    securityToken?: string;
    shardCount?: number;
    shardType?: string;
    slaveReadOnlyCount?: number;
    srcDBInstanceId?: string;
    storage?: number;
    storageType?: string;
    tag?: CreateTairInstanceRequestTag[];
    vSwitchId?: string;
    vpcId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTairInstanceResponseBody extends $tea.Model {
    bandwidth?: number;
    chargeType?: string;
    config?: string;
    connectionDomain?: string;
    connections?: number;
    instanceId?: string;
    instanceName?: string;
    instanceStatus?: string;
    orderId?: number;
    port?: number;
    QPS?: number;
    regionId?: string;
    requestId?: string;
    taskId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTairInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateTairInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAccountRequest extends $tea.Model {
    accountName?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAccountResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAccountResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGlobalSecurityIPGroupRequest extends $tea.Model {
    globalIgName?: string;
    globalSecurityGroupId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGlobalSecurityIPGroupResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGlobalSecurityIPGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteGlobalSecurityIPGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteInstanceRequest extends $tea.Model {
    globalInstanceId?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteInstanceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteShardingNodeRequest extends $tea.Model {
    forceTrans?: boolean;
    instanceId?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    shardCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteShardingNodeResponseBody extends $tea.Model {
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteShardingNodeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteShardingNodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsRequest extends $tea.Model {
    accountName?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponseBody extends $tea.Model {
    accounts?: DescribeAccountsResponseBodyAccounts;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeAccountsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeActiveOperationTaskRequest extends $tea.Model {
    isHistory?: number;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    region?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    taskType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeActiveOperationTaskResponseBody extends $tea.Model {
    items?: DescribeActiveOperationTaskResponseBodyItems[];
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeActiveOperationTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeActiveOperationTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAuditLogConfigRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAuditLogConfigResponseBody extends $tea.Model {
    dbAudit?: string;
    requestId?: string;
    retention?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAuditLogConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeAuditLogConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAuditRecordsRequest extends $tea.Model {
    accountName?: string;
    databaseName?: string;
    endTime?: string;
    hostAddress?: string;
    instanceId?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    queryKeywords?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAuditRecordsResponseBody extends $tea.Model {
    endTime?: string;
    instanceName?: string;
    items?: DescribeAuditRecordsResponseBodyItems;
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    startTime?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAuditRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeAuditRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceRequest extends $tea.Model {
    acceptLanguage?: string;
    engine?: string;
    instanceChargeType?: string;
    instanceId?: string;
    instanceScene?: string;
    nodeId?: string;
    orderType?: string;
    ownerAccount?: string;
    ownerId?: number;
    productType?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBody extends $tea.Model {
    availableZones?: DescribeAvailableResourceResponseBodyAvailableZones;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeAvailableResourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupPolicyRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupPolicyResponseBody extends $tea.Model {
    accessDeniedDetail?: DescribeBackupPolicyResponseBodyAccessDeniedDetail;
    backupRetentionPeriod?: string;
    dbsInstance?: string;
    enableBackupLog?: number;
    preferredBackupPeriod?: string;
    preferredBackupTime?: string;
    preferredNextBackupTime?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupPolicyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeBackupPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupTasksRequest extends $tea.Model {
    backupJobId?: string;
    instanceId?: string;
    jobMode?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupTasksResponseBody extends $tea.Model {
    accessDeniedDetail?: DescribeBackupTasksResponseBodyAccessDeniedDetail;
    backupJobs?: DescribeBackupTasksResponseBodyBackupJobs[];
    instanceId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupTasksResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeBackupTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsRequest extends $tea.Model {
    backupId?: number;
    backupJobId?: number;
    endTime?: string;
    instanceId?: string;
    needAof?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsResponseBody extends $tea.Model {
    accessDeniedDetail?: DescribeBackupsResponseBodyAccessDeniedDetail;
    backups?: DescribeBackupsResponseBodyBackups;
    freeSize?: number;
    fullStorageSize?: number;
    logStorageSize?: number;
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeBackupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCacheAnalysisReportRequest extends $tea.Model {
    analysisType?: string;
    date?: string;
    instanceId?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumbers?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCacheAnalysisReportResponseBody extends $tea.Model {
    bigKeys?: {
        [key: string]: any;
    }[];
    hotKeys?: {
        [key: string]: any;
    }[];
    pageNumber?: number;
    pageRecordCount?: number;
    pageSize?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCacheAnalysisReportResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeCacheAnalysisReportResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCacheAnalysisReportListRequest extends $tea.Model {
    days?: number;
    instanceId?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumbers?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCacheAnalysisReportListResponseBody extends $tea.Model {
    dailyTasks?: DescribeCacheAnalysisReportListResponseBodyDailyTasks;
    instanceId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCacheAnalysisReportListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeCacheAnalysisReportListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterBackupListRequest extends $tea.Model {
    clusterBackupId?: string;
    endTime?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterBackupListResponseBody extends $tea.Model {
    clusterBackups?: DescribeClusterBackupListResponseBodyClusterBackups[];
    freeSize?: number;
    fullStorageSize?: number;
    logStorageSize?: number;
    maxResults?: number;
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterBackupListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeClusterBackupListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterMemberInfoRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterMemberInfoResponseBody extends $tea.Model {
    clusterChildren?: DescribeClusterMemberInfoResponseBodyClusterChildren[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterMemberInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeClusterMemberInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponseBody extends $tea.Model {
    instanceNetworkType?: string;
    netInfoItems?: DescribeDBInstanceNetInfoResponseBodyNetInfoItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeDBInstanceNetInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBNodeDirectVipInfoRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBNodeDirectVipInfoResponseBody extends $tea.Model {
    directVipInfo?: DescribeDBNodeDirectVipInfoResponseBodyDirectVipInfo;
    instanceId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBNodeDirectVipInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeDBNodeDirectVipInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedClusterInstanceListRequest extends $tea.Model {
    clusterId?: string;
    dedicatedHostName?: string;
    engine?: string;
    engineVersion?: string;
    instanceId?: string;
    instanceNetType?: string;
    instanceStatus?: number;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedClusterInstanceListResponseBody extends $tea.Model {
    instances?: DescribeDedicatedClusterInstanceListResponseBodyInstances[];
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedClusterInstanceListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeDedicatedClusterInstanceListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEncryptionKeyRequest extends $tea.Model {
    encryptionKey?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEncryptionKeyResponseBody extends $tea.Model {
    creator?: string;
    deleteDate?: string;
    description?: string;
    encryptionKey?: string;
    encryptionKeyStatus?: string;
    encryptionName?: string;
    keyUsage?: string;
    materialExpireTime?: string;
    origin?: string;
    requestId?: string;
    roleArn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEncryptionKeyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeEncryptionKeyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEncryptionKeyListRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEncryptionKeyListResponseBody extends $tea.Model {
    keyIds?: DescribeEncryptionKeyListResponseBodyKeyIds;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEncryptionKeyListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeEncryptionKeyListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEngineVersionRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEngineVersionResponseBody extends $tea.Model {
    DBLatestMinorVersion?: DescribeEngineVersionResponseBodyDBLatestMinorVersion;
    DBVersionRelease?: string;
    enableUpgradeMajorVersion?: boolean;
    enableUpgradeMinorVersion?: boolean;
    engine?: string;
    isAutoUpgradeOpen?: string;
    isLatestVersion?: boolean;
    isNewSSLMode?: string;
    isRedisCompatibleVersion?: string;
    isSSLEnable?: string;
    majorVersion?: string;
    minorVersion?: string;
    proxyLatestMinorVersion?: DescribeEngineVersionResponseBodyProxyLatestMinorVersion;
    proxyMinorVersion?: string;
    proxyVersionRelease?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEngineVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeEngineVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalDistributeCacheRequest extends $tea.Model {
    globalInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: string;
    pageSize?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    subInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalDistributeCacheResponseBody extends $tea.Model {
    globalDistributeCaches?: DescribeGlobalDistributeCacheResponseBodyGlobalDistributeCaches[];
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalDistributeCacheResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeGlobalDistributeCacheResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalSecurityIPGroupRequest extends $tea.Model {
    globalSecurityGroupId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalSecurityIPGroupResponseBody extends $tea.Model {
    globalSecurityIPGroup?: DescribeGlobalSecurityIPGroupResponseBodyGlobalSecurityIPGroup[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalSecurityIPGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeGlobalSecurityIPGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalSecurityIPGroupRelationRequest extends $tea.Model {
    DBClusterId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalSecurityIPGroupRelationResponseBody extends $tea.Model {
    DBClusterId?: string;
    globalSecurityIPGroupRel?: DescribeGlobalSecurityIPGroupRelationResponseBodyGlobalSecurityIPGroupRel[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalSecurityIPGroupRelationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeGlobalSecurityIPGroupRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryMonitorValuesRequest extends $tea.Model {
    endTime?: string;
    instanceId?: string;
    intervalForHistory?: string;
    monitorKeys?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryMonitorValuesResponseBody extends $tea.Model {
    monitorHistory?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryMonitorValuesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeHistoryMonitorValuesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksRequest extends $tea.Model {
    fromExecTime?: number;
    fromStartTime?: string;
    instanceId?: string;
    instanceType?: string;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceOwnerAccount?: number;
    resourceOwnerId?: number;
    securityToken?: string;
    status?: string;
    taskId?: string;
    taskType?: string;
    toExecTime?: number;
    toStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksResponseBody extends $tea.Model {
    items?: DescribeHistoryTasksResponseBodyItems[];
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeHistoryTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAttributeRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAttributeResponseBody extends $tea.Model {
    instances?: DescribeInstanceAttributeResponseBodyInstances;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAttributeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeInstanceAttributeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAutoRenewalAttributeRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAutoRenewalAttributeResponseBody extends $tea.Model {
    items?: DescribeInstanceAutoRenewalAttributeResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAutoRenewalAttributeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeInstanceAutoRenewalAttributeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceConfigRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceConfigResponseBody extends $tea.Model {
    config?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeInstanceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceSSLRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceSSLResponseBody extends $tea.Model {
    certCommonName?: string;
    certDownloadURL?: string;
    instanceId?: string;
    requestId?: string;
    SSLEnabled?: string;
    SSLExpiredTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceSSLResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeInstanceSSLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceTDEStatusRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceTDEStatusResponseBody extends $tea.Model {
    requestId?: string;
    TDEStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceTDEStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeInstanceTDEStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesRequest extends $tea.Model {
    architectureType?: string;
    chargeType?: string;
    editionType?: string;
    engineVersion?: string;
    expired?: string;
    globalInstance?: boolean;
    instanceClass?: string;
    instanceIds?: string;
    instanceStatus?: string;
    instanceType?: string;
    networkType?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    privateIp?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    searchKey?: string;
    securityToken?: string;
    tag?: DescribeInstancesRequestTag[];
    vSwitchId?: string;
    vpcId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesResponseBody extends $tea.Model {
    instances?: DescribeInstancesResponseBodyInstances;
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesOverviewRequest extends $tea.Model {
    architectureType?: string;
    chargeType?: string;
    editionType?: string;
    engineVersion?: string;
    instanceClass?: string;
    instanceIds?: string;
    instanceStatus?: string;
    instanceType?: string;
    networkType?: string;
    ownerAccount?: string;
    ownerId?: number;
    privateIp?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    searchKey?: string;
    securityToken?: string;
    vSwitchId?: string;
    vpcId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesOverviewResponseBody extends $tea.Model {
    instances?: DescribeInstancesOverviewResponseBodyInstances[];
    requestId?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesOverviewResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeInstancesOverviewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeIntranetAttributeRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeIntranetAttributeResponseBody extends $tea.Model {
    autoRenewal?: boolean;
    bandwidthExpireTime?: string;
    bandwidthPrePaid?: string;
    expireTime?: string;
    hasPrePaidBandWidthOrderRunning?: boolean;
    intranetBandwidth?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeIntranetAttributeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeIntranetAttributeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogicInstanceTopologyRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogicInstanceTopologyResponseBody extends $tea.Model {
    instanceId?: string;
    redisProxyList?: DescribeLogicInstanceTopologyResponseBodyRedisProxyList;
    redisShardList?: DescribeLogicInstanceTopologyResponseBodyRedisShardList;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogicInstanceTopologyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeLogicInstanceTopologyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMonitorItemsRequest extends $tea.Model {
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMonitorItemsResponseBody extends $tea.Model {
    monitorItems?: DescribeMonitorItemsResponseBodyMonitorItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMonitorItemsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeMonitorItemsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterModificationHistoryRequest extends $tea.Model {
    endTime?: string;
    instanceId?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    parameterName?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterModificationHistoryResponseBody extends $tea.Model {
    historicalParameters?: DescribeParameterModificationHistoryResponseBodyHistoricalParameters;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterModificationHistoryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeParameterModificationHistoryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterTemplatesRequest extends $tea.Model {
    characterType?: string;
    engine?: string;
    engineVersion?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterTemplatesResponseBody extends $tea.Model {
    engine?: string;
    engineVersion?: string;
    parameterCount?: string;
    parameters?: DescribeParameterTemplatesResponseBodyParameters;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterTemplatesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeParameterTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersRequest extends $tea.Model {
    DBInstanceId?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponseBody extends $tea.Model {
    configParameters?: DescribeParametersResponseBodyConfigParameters;
    engine?: string;
    engineVersion?: string;
    requestId?: string;
    runningParameters?: DescribeParametersResponseBodyRunningParameters;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeParametersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceRequest extends $tea.Model {
    businessInfo?: string;
    capacity?: number;
    chargeType?: string;
    couponNo?: string;
    forceUpgrade?: boolean;
    instanceClass?: string;
    instanceId?: string;
    instances?: string;
    nodeType?: string;
    orderParamOut?: string;
    orderType?: string;
    ownerAccount?: string;
    ownerId?: number;
    period?: number;
    quantity?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBody extends $tea.Model {
    order?: DescribePriceResponseBodyOrder;
    orderParams?: string;
    requestId?: string;
    rules?: DescribePriceResponseBodyRules;
    subOrders?: DescribePriceResponseBodySubOrders;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribePriceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsRequest extends $tea.Model {
    acceptLanguage?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponseBody extends $tea.Model {
    regionIds?: DescribeRegionsResponseBodyRegionIds;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeRegionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRoleZoneInfoRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    queryType?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRoleZoneInfoResponseBody extends $tea.Model {
    node?: DescribeRoleZoneInfoResponseBodyNode;
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRoleZoneInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeRoleZoneInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRunningLogRecordsRequest extends $tea.Model {
    characterType?: string;
    DBName?: string;
    endTime?: string;
    instanceId?: string;
    nodeId?: string;
    orderType?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    queryKeyword?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    roleType?: string;
    securityToken?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRunningLogRecordsResponseBody extends $tea.Model {
    engine?: string;
    instanceId?: string;
    items?: DescribeRunningLogRecordsResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    pageSize?: number;
    requestId?: string;
    startTime?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRunningLogRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeRunningLogRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityGroupConfigurationRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityGroupConfigurationResponseBody extends $tea.Model {
    items?: DescribeSecurityGroupConfigurationResponseBodyItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityGroupConfigurationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeSecurityGroupConfigurationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityIpsRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityIpsResponseBody extends $tea.Model {
    requestId?: string;
    securityIpGroups?: DescribeSecurityIpsResponseBodySecurityIpGroups;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityIpsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeSecurityIpsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogRecordsRequest extends $tea.Model {
    DBName?: string;
    endTime?: string;
    instanceId?: string;
    nodeId?: string;
    orderBy?: string;
    orderType?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    queryKeyword?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    slowLogRecordType?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogRecordsResponseBody extends $tea.Model {
    engine?: string;
    instanceId?: string;
    items?: DescribeSlowLogRecordsResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    pageSize?: number;
    requestId?: string;
    startTime?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeSlowLogRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTasksRequest extends $tea.Model {
    endTime?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    startTime?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTasksResponseBody extends $tea.Model {
    items?: DescribeTasksResponseBodyItems[];
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTasksResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeZonesRequest extends $tea.Model {
    acceptLanguage?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeZonesResponseBody extends $tea.Model {
    requestId?: string;
    zones?: DescribeZonesResponseBodyZones;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeZonesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeZonesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableAdditionalBandwidthRequest extends $tea.Model {
    autoPay?: boolean;
    autoRenew?: boolean;
    autoRenewPeriod?: number;
    bandwidth?: string;
    chargeType?: string;
    couponNo?: string;
    instanceId?: string;
    nodeId?: string;
    orderTimeLength?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    sourceBiz?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableAdditionalBandwidthResponseBody extends $tea.Model {
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableAdditionalBandwidthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EnableAdditionalBandwidthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FlushExpireKeysRequest extends $tea.Model {
    effectiveTime?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FlushExpireKeysResponseBody extends $tea.Model {
    instanceId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FlushExpireKeysResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: FlushExpireKeysResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FlushInstanceRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FlushInstanceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FlushInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: FlushInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FlushInstanceForDBRequest extends $tea.Model {
    dbIndex?: number;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FlushInstanceForDBResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FlushInstanceForDBResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: FlushInstanceForDBResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantAccountPrivilegeRequest extends $tea.Model {
    accountName?: string;
    accountPrivilege?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantAccountPrivilegeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantAccountPrivilegeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GrantAccountPrivilegeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitializeKvstorePermissionRequest extends $tea.Model {
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitializeKvstorePermissionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitializeKvstorePermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InitializeKvstorePermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesRequest extends $tea.Model {
    nextToken?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceId?: string[];
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    resourceType?: string;
    tag?: ListTagResourcesRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBody extends $tea.Model {
    nextToken?: string;
    requestId?: string;
    tagResources?: ListTagResourcesResponseBodyTagResources;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListTagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LockDBInstanceWriteRequest extends $tea.Model {
    DBInstanceId?: string;
    lockReason?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LockDBInstanceWriteResponseBody extends $tea.Model {
    DBInstanceName?: string;
    lockReason?: string;
    requestId?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LockDBInstanceWriteResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LockDBInstanceWriteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateToOtherZoneRequest extends $tea.Model {
    DBInstanceId?: string;
    effectiveTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    secondaryZoneId?: string;
    securityToken?: string;
    vSwitchId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateToOtherZoneResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateToOtherZoneResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MigrateToOtherZoneResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountDescriptionRequest extends $tea.Model {
    accountDescription?: string;
    accountName?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountDescriptionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountDescriptionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyAccountDescriptionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountPasswordRequest extends $tea.Model {
    accountName?: string;
    instanceId?: string;
    newAccountPassword?: string;
    oldAccountPassword?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountPasswordResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountPasswordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyAccountPasswordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyActiveOperationTaskRequest extends $tea.Model {
    ids?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    switchTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyActiveOperationTaskResponseBody extends $tea.Model {
    ids?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyActiveOperationTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyActiveOperationTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAuditLogConfigRequest extends $tea.Model {
    dbAudit?: boolean;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    retention?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAuditLogConfigResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAuditLogConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyAuditLogConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyBackupPolicyRequest extends $tea.Model {
    backupRetentionPeriod?: number;
    enableBackupLog?: number;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    preferredBackupPeriod?: string;
    preferredBackupTime?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyBackupPolicyResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyBackupPolicyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyBackupPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConnectionStringRequest extends $tea.Model {
    currentConnectionString?: string;
    DBInstanceId?: string;
    IPType?: string;
    newConnectionString?: string;
    ownerAccount?: string;
    ownerId?: number;
    port?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConnectionStringResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConnectionStringResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyDBInstanceConnectionStringResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyGlobalSecurityIPGroupRequest extends $tea.Model {
    GIpList?: string;
    globalIgName?: string;
    globalSecurityGroupId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyGlobalSecurityIPGroupResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyGlobalSecurityIPGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyGlobalSecurityIPGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyGlobalSecurityIPGroupNameRequest extends $tea.Model {
    globalIgName?: string;
    globalSecurityGroupId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyGlobalSecurityIPGroupNameResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyGlobalSecurityIPGroupNameResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyGlobalSecurityIPGroupNameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyGlobalSecurityIPGroupRelationRequest extends $tea.Model {
    DBClusterId?: string;
    globalSecurityGroupId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyGlobalSecurityIPGroupRelationResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyGlobalSecurityIPGroupRelationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyGlobalSecurityIPGroupRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceAttributeRequest extends $tea.Model {
    instanceId?: string;
    instanceName?: string;
    instanceReleaseProtection?: boolean;
    newPassword?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceAttributeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceAttributeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceAttributeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceAutoRenewalAttributeRequest extends $tea.Model {
    autoRenew?: string;
    DBInstanceId?: string;
    duration?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceAutoRenewalAttributeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceAutoRenewalAttributeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceAutoRenewalAttributeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceConfigRequest extends $tea.Model {
    config?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceConfigResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceMaintainTimeRequest extends $tea.Model {
    instanceId?: string;
    maintainEndTime?: string;
    maintainStartTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceMaintainTimeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceMaintainTimeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceMaintainTimeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceMajorVersionRequest extends $tea.Model {
    effectiveTime?: string;
    instanceId?: string;
    majorVersion?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceMajorVersionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceMajorVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceMajorVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceMinorVersionRequest extends $tea.Model {
    effectiveTime?: string;
    instanceId?: string;
    minorversion?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceMinorVersionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceMinorVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceMinorVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceNetExpireTimeRequest extends $tea.Model {
    classicExpiredDays?: number;
    connectionString?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceNetExpireTimeResponseBody extends $tea.Model {
    instanceId?: string;
    netInfoItems?: ModifyInstanceNetExpireTimeResponseBodyNetInfoItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceNetExpireTimeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceNetExpireTimeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceParameterRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    parameterGroupId?: string;
    parameters?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceParameterResponseBody extends $tea.Model {
    instanceId?: string;
    requestId?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceParameterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceParameterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceSSLRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    SSLEnabled?: string;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceSSLResponseBody extends $tea.Model {
    instanceId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceSSLResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceSSLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceSpecRequest extends $tea.Model {
    autoPay?: boolean;
    businessInfo?: string;
    clientToken?: string;
    couponNo?: string;
    effectiveTime?: string;
    forceTrans?: boolean;
    forceUpgrade?: boolean;
    instanceClass?: string;
    instanceId?: string;
    majorVersion?: string;
    orderType?: string;
    ownerAccount?: string;
    ownerId?: number;
    readOnlyCount?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    shardCount?: number;
    slaveReadOnlyCount?: number;
    sourceBiz?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceSpecResponseBody extends $tea.Model {
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceSpecResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceSpecResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceTDERequest extends $tea.Model {
    encryptionKey?: string;
    encryptionName?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    roleArn?: string;
    securityToken?: string;
    TDEStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceTDEResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceTDEResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceTDEResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceVpcAuthModeRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    vpcAuthMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceVpcAuthModeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceVpcAuthModeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyInstanceVpcAuthModeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyIntranetAttributeRequest extends $tea.Model {
    bandWidth?: number;
    instanceId?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyIntranetAttributeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyIntranetAttributeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyIntranetAttributeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyResourceGroupRequest extends $tea.Model {
    clientToken?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyResourceGroupResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyResourceGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyResourceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityGroupConfigurationRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityGroupId?: string;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityGroupConfigurationResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityGroupConfigurationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifySecurityGroupConfigurationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityIpsRequest extends $tea.Model {
    instanceId?: string;
    modifyMode?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityIpGroupAttribute?: string;
    securityIpGroupName?: string;
    securityIps?: string;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityIpsResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityIpsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifySecurityIpsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseDirectConnectionRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseDirectConnectionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseDirectConnectionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ReleaseDirectConnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstancePublicConnectionRequest extends $tea.Model {
    currentConnectionString?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstancePublicConnectionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstancePublicConnectionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ReleaseInstancePublicConnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveSubInstanceRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveSubInstanceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveSubInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveSubInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewAdditionalBandwidthRequest extends $tea.Model {
    autoPay?: boolean;
    couponNo?: string;
    instanceId?: string;
    orderTimeLength?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    sourceBiz?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewAdditionalBandwidthResponseBody extends $tea.Model {
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewAdditionalBandwidthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RenewAdditionalBandwidthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewInstanceRequest extends $tea.Model {
    autoPay?: boolean;
    autoRenew?: boolean;
    businessInfo?: string;
    capacity?: string;
    clientToken?: string;
    couponNo?: string;
    fromApp?: string;
    instanceClass?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    period?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewInstanceResponseBody extends $tea.Model {
    endTime?: string;
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RenewInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetAccountPasswordRequest extends $tea.Model {
    accountName?: string;
    accountPassword?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetAccountPasswordResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetAccountPasswordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ResetAccountPasswordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestartInstanceRequest extends $tea.Model {
    effectiveTime?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    upgradeMinorVersion?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestartInstanceResponseBody extends $tea.Model {
    instanceId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestartInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RestartInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreInstanceRequest extends $tea.Model {
    backupId?: string;
    filterKey?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    restoreTime?: string;
    restoreType?: string;
    securityToken?: string;
    timeShift?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreInstanceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RestoreInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchInstanceHARequest extends $tea.Model {
    instanceId?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    switchMode?: number;
    switchType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchInstanceHAResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchInstanceHAResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SwitchInstanceHAResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchInstanceProxyRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchInstanceProxyResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchInstanceProxyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SwitchInstanceProxyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchNetworkRequest extends $tea.Model {
    classicExpiredDays?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    retainClassic?: string;
    securityToken?: string;
    targetNetworkType?: string;
    vSwitchId?: string;
    vpcId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchNetworkResponseBody extends $tea.Model {
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchNetworkResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SwitchNetworkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncDtsStatusRequest extends $tea.Model {
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    status?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncDtsStatusResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncDtsStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncDtsStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesRequest extends $tea.Model {
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceId?: string[];
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    resourceType?: string;
    tag?: TagResourcesRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformInstanceChargeTypeRequest extends $tea.Model {
    autoPay?: boolean;
    autoRenew?: string;
    autoRenewPeriod?: number;
    chargeType?: string;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    period?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformInstanceChargeTypeResponseBody extends $tea.Model {
    endTime?: string;
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformInstanceChargeTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TransformInstanceChargeTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformToPrePaidRequest extends $tea.Model {
    autoPay?: boolean;
    instanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    period?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformToPrePaidResponseBody extends $tea.Model {
    endTime?: string;
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformToPrePaidResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TransformToPrePaidResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnlockDBInstanceWriteRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnlockDBInstanceWriteResponseBody extends $tea.Model {
    DBInstanceName?: string;
    requestId?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnlockDBInstanceWriteResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UnlockDBInstanceWriteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesRequest extends $tea.Model {
    all?: boolean;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceId?: string[];
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    resourceType?: string;
    tagKey?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UntagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGlobalSecurityIPGroupResponseBodyGlobalSecurityIPGroup extends $tea.Model {
    GIpList?: string;
    globalIgName?: string;
    globalSecurityGroupId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstanceRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInstancesResponseBodyInstanceIds extends $tea.Model {
    instanceId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTairInstanceRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponseBodyAccountsAccountDatabasePrivilegesDatabasePrivilege extends $tea.Model {
    accountPrivilege?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponseBodyAccountsAccountDatabasePrivileges extends $tea.Model {
    databasePrivilege?: DescribeAccountsResponseBodyAccountsAccountDatabasePrivilegesDatabasePrivilege[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponseBodyAccountsAccount extends $tea.Model {
    accountDescription?: string;
    accountName?: string;
    accountStatus?: string;
    accountType?: string;
    databasePrivileges?: DescribeAccountsResponseBodyAccountsAccountDatabasePrivileges;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponseBodyAccounts extends $tea.Model {
    account?: DescribeAccountsResponseBodyAccountsAccount[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeActiveOperationTaskResponseBodyItems extends $tea.Model {
    createdTime?: string;
    dbType?: string;
    deadline?: string;
    id?: number;
    insName?: string;
    modifiedTime?: string;
    prepareInterval?: string;
    region?: string;
    startTime?: string;
    status?: number;
    switchTime?: string;
    taskType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAuditRecordsResponseBodyItemsSQL extends $tea.Model {
    accountName?: string;
    databaseName?: string;
    executeTime?: string;
    hostAddress?: string;
    IPAddress?: string;
    nodeId?: string;
    SQLText?: string;
    SQLType?: string;
    totalExecutionTimes?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAuditRecordsResponseBodyItems extends $tea.Model {
    SQL?: DescribeAuditRecordsResponseBodyItemsSQL[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbersSupportedShardNumberSupportedNodeTypesSupportedNodeTypeAvailableResourcesAvailableResource extends $tea.Model {
    capacity?: number;
    instanceClass?: string;
    instanceClassRemark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbersSupportedShardNumberSupportedNodeTypesSupportedNodeTypeAvailableResources extends $tea.Model {
    availableResource?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbersSupportedShardNumberSupportedNodeTypesSupportedNodeTypeAvailableResourcesAvailableResource[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbersSupportedShardNumberSupportedNodeTypesSupportedNodeType extends $tea.Model {
    availableResources?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbersSupportedShardNumberSupportedNodeTypesSupportedNodeTypeAvailableResources;
    supportedNodeType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbersSupportedShardNumberSupportedNodeTypes extends $tea.Model {
    supportedNodeType?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbersSupportedShardNumberSupportedNodeTypesSupportedNodeType[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbersSupportedShardNumber extends $tea.Model {
    shardNumber?: string;
    supportedNodeTypes?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbersSupportedShardNumberSupportedNodeTypes;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbers extends $tea.Model {
    supportedShardNumber?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbersSupportedShardNumber[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureType extends $tea.Model {
    architecture?: string;
    supportedShardNumbers?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureTypeSupportedShardNumbers;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypes extends $tea.Model {
    supportedArchitectureType?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypesSupportedArchitectureType[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersion extends $tea.Model {
    supportedArchitectureTypes?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersionSupportedArchitectureTypes;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersions extends $tea.Model {
    supportedEngineVersion?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersionsSupportedEngineVersion[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesType extends $tea.Model {
    seriesType?: string;
    supportedEngineVersions?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesTypeSupportedEngineVersions;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypes extends $tea.Model {
    supportedSeriesType?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypesSupportedSeriesType[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionType extends $tea.Model {
    editionType?: string;
    supportedSeriesTypes?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionTypeSupportedSeriesTypes;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypes extends $tea.Model {
    supportedEditionType?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypesSupportedEditionType[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngine extends $tea.Model {
    engine?: string;
    supportedEditionTypes?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEditionTypes;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEngines extends $tea.Model {
    supportedEngine?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngine[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone extends $tea.Model {
    regionId?: string;
    supportedEngines?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEngines;
    zoneId?: string;
    zoneName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableResourceResponseBodyAvailableZones extends $tea.Model {
    availableZone?: DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupPolicyResponseBodyAccessDeniedDetail extends $tea.Model {
    authAction?: string;
    authPrincipalDisplayName?: string;
    authPrincipalOwnerId?: string;
    authPrincipalType?: string;
    encodedDiagnosticMessage?: string;
    noPermissionType?: string;
    policyType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupTasksResponseBodyAccessDeniedDetail extends $tea.Model {
    authAction?: string;
    authPrincipalDisplayName?: string;
    authPrincipalOwnerId?: string;
    authPrincipalType?: string;
    encodedDiagnosticMessage?: string;
    noPermissionType?: string;
    policyType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupTasksResponseBodyBackupJobs extends $tea.Model {
    backupJobID?: number;
    backupProgressStatus?: string;
    jobMode?: string;
    nodeId?: string;
    process?: string;
    startTime?: string;
    taskAction?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsResponseBodyAccessDeniedDetail extends $tea.Model {
    authAction?: string;
    authPrincipalDisplayName?: string;
    authPrincipalOwnerId?: string;
    authPrincipalType?: string;
    encodedDiagnosticMessage?: string;
    noPermissionType?: string;
    policyType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsResponseBodyBackupsBackup extends $tea.Model {
    backupDBNames?: string;
    backupDownloadURL?: string;
    backupEndTime?: string;
    backupId?: number;
    backupIntranetDownloadURL?: string;
    backupJobID?: number;
    backupMethod?: string;
    backupMode?: string;
    backupSize?: number;
    backupStartTime?: string;
    backupStatus?: string;
    backupType?: string;
    engineVersion?: string;
    nodeInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsResponseBodyBackups extends $tea.Model {
    backup?: DescribeBackupsResponseBodyBackupsBackup[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCacheAnalysisReportListResponseBodyDailyTasksDailyTaskTasksTask extends $tea.Model {
    nodeId?: string;
    startTime?: string;
    status?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCacheAnalysisReportListResponseBodyDailyTasksDailyTaskTasks extends $tea.Model {
    task?: DescribeCacheAnalysisReportListResponseBodyDailyTasksDailyTaskTasksTask[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCacheAnalysisReportListResponseBodyDailyTasksDailyTask extends $tea.Model {
    date?: string;
    tasks?: DescribeCacheAnalysisReportListResponseBodyDailyTasksDailyTaskTasks;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCacheAnalysisReportListResponseBodyDailyTasks extends $tea.Model {
    dailyTask?: DescribeCacheAnalysisReportListResponseBodyDailyTasksDailyTask[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterBackupListResponseBodyClusterBackupsBackupsExtraInfo extends $tea.Model {
    custinsDbVersion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterBackupListResponseBodyClusterBackupsBackups extends $tea.Model {
    backupDownloadURL?: string;
    backupEndTime?: string;
    backupId?: string;
    backupIntranetDownloadURL?: string;
    backupName?: string;
    backupSize?: string;
    backupStartTime?: string;
    backupStatus?: string;
    engine?: string;
    extraInfo?: DescribeClusterBackupListResponseBodyClusterBackupsBackupsExtraInfo;
    instanceName?: string;
    isAvail?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterBackupListResponseBodyClusterBackups extends $tea.Model {
    backups?: DescribeClusterBackupListResponseBodyClusterBackupsBackups[];
    clusterBackupEndTime?: string;
    clusterBackupId?: string;
    clusterBackupMode?: string;
    clusterBackupSize?: string;
    clusterBackupStartTime?: string;
    clusterBackupStatus?: string;
    isAvail?: number;
    progress?: string;
    shardClassMemory?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterMemberInfoResponseBodyClusterChildren extends $tea.Model {
    bandWidth?: number;
    binlogRetentionDays?: number;
    bizType?: string;
    capacity?: number;
    classCode?: string;
    connections?: number;
    currentBandWidth?: number;
    diskSizeMB?: number;
    id?: number;
    name?: string;
    replicaSize?: number;
    resourceGroupName?: string;
    service?: string;
    serviceVersion?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponseBodyNetInfoItemsInstanceNetInfo extends $tea.Model {
    connectionString?: string;
    DBInstanceNetType?: string;
    directConnection?: number;
    expiredTime?: string;
    IPAddress?: string;
    IPType?: string;
    isSlaveProxy?: number;
    port?: string;
    upgradeable?: string;
    VPCId?: string;
    VPCInstanceId?: string;
    vSwitchId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponseBodyNetInfoItems extends $tea.Model {
    instanceNetInfo?: DescribeDBInstanceNetInfoResponseBodyNetInfoItemsInstanceNetInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBNodeDirectVipInfoResponseBodyDirectVipInfoVipInfo extends $tea.Model {
    netType?: string;
    nodeId?: string;
    port?: string;
    vip?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBNodeDirectVipInfoResponseBodyDirectVipInfo extends $tea.Model {
    vipInfo?: DescribeDBNodeDirectVipInfoResponseBodyDirectVipInfoVipInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedClusterInstanceListResponseBodyInstancesInstanceNodeList extends $tea.Model {
    dedicatedHostName?: string;
    instanceId?: string;
    nodeId?: number;
    nodeIp?: string;
    nodeType?: string;
    port?: number;
    role?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedClusterInstanceListResponseBodyInstances extends $tea.Model {
    bandWidth?: number;
    characterType?: string;
    clusterId?: string;
    clusterName?: string;
    connectionDomain?: string;
    createTime?: string;
    currentBandWidth?: number;
    customId?: string;
    engine?: string;
    engineVersion?: string;
    instanceClass?: string;
    instanceId?: string;
    instanceName?: string;
    instanceNodeList?: DescribeDedicatedClusterInstanceListResponseBodyInstancesInstanceNodeList[];
    instanceStatus?: string;
    maintainEndTime?: string;
    maintainStartTime?: string;
    proxyCount?: number;
    regionId?: string;
    shardCount?: number;
    storageType?: string;
    vpcId?: string;
    vswitchId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEncryptionKeyListResponseBodyKeyIds extends $tea.Model {
    keyId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEngineVersionResponseBodyDBLatestMinorVersionVersionReleaseReleaseInfoReleaseInfoList extends $tea.Model {
    createTime?: string;
    level?: string;
    releaseNote?: string;
    releaseNoteEn?: string;
    releaseVersion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEngineVersionResponseBodyDBLatestMinorVersionVersionReleaseReleaseInfo extends $tea.Model {
    releaseInfoList?: DescribeEngineVersionResponseBodyDBLatestMinorVersionVersionReleaseReleaseInfoReleaseInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEngineVersionResponseBodyDBLatestMinorVersionVersionRelease extends $tea.Model {
    releaseInfo?: DescribeEngineVersionResponseBodyDBLatestMinorVersionVersionReleaseReleaseInfo;
    versionChangesLevel?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEngineVersionResponseBodyDBLatestMinorVersion extends $tea.Model {
    level?: string;
    minorVersion?: string;
    versionRelease?: DescribeEngineVersionResponseBodyDBLatestMinorVersionVersionRelease;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEngineVersionResponseBodyProxyLatestMinorVersionVersionReleaseReleaseInfoReleaseInfoList extends $tea.Model {
    createTime?: string;
    level?: string;
    releaseNote?: string;
    releaseNoteEn?: string;
    releaseVersion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEngineVersionResponseBodyProxyLatestMinorVersionVersionReleaseReleaseInfo extends $tea.Model {
    releaseInfoList?: DescribeEngineVersionResponseBodyProxyLatestMinorVersionVersionReleaseReleaseInfoReleaseInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEngineVersionResponseBodyProxyLatestMinorVersionVersionRelease extends $tea.Model {
    releaseInfo?: DescribeEngineVersionResponseBodyProxyLatestMinorVersionVersionReleaseReleaseInfo;
    versionChangesLevel?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEngineVersionResponseBodyProxyLatestMinorVersion extends $tea.Model {
    level?: string;
    minorVersion?: string;
    versionRelease?: DescribeEngineVersionResponseBodyProxyLatestMinorVersionVersionRelease;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalDistributeCacheResponseBodyGlobalDistributeCachesSubInstances extends $tea.Model {
    globalInstanceId?: string;
    instanceClass?: string;
    instanceID?: string;
    instanceStatus?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalDistributeCacheResponseBodyGlobalDistributeCaches extends $tea.Model {
    globalInstanceId?: string;
    status?: string;
    subInstances?: DescribeGlobalDistributeCacheResponseBodyGlobalDistributeCachesSubInstances[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalSecurityIPGroupResponseBodyGlobalSecurityIPGroup extends $tea.Model {
    DBInstances?: string[];
    GIpList?: string;
    globalIgName?: string;
    globalSecurityGroupId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGlobalSecurityIPGroupRelationResponseBodyGlobalSecurityIPGroupRel extends $tea.Model {
    GIpList?: string;
    globalIgName?: string;
    globalSecurityGroupId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksResponseBodyItems extends $tea.Model {
    actionInfo?: string;
    callerSource?: string;
    callerUid?: string;
    currentStepName?: string;
    dbType?: string;
    endTime?: string;
    instanceId?: string;
    instanceName?: string;
    instanceType?: string;
    product?: string;
    progress?: number;
    reasonCode?: string;
    regionId?: string;
    remainTime?: number;
    startTime?: string;
    status?: number;
    taskDetail?: string;
    taskId?: string;
    taskType?: string;
    uid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAttributeResponseBodyInstancesDBInstanceAttributeTagsTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAttributeResponseBodyInstancesDBInstanceAttributeTags extends $tea.Model {
    tag?: DescribeInstanceAttributeResponseBodyInstancesDBInstanceAttributeTagsTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAttributeResponseBodyInstancesDBInstanceAttribute extends $tea.Model {
    architectureType?: string;
    auditLogRetention?: string;
    availabilityValue?: string;
    backupLogStartTime?: string;
    bandwidth?: number;
    capacity?: number;
    chargeType?: string;
    cloudType?: string;
    config?: string;
    connectionDomain?: string;
    connections?: number;
    createTime?: string;
    endTime?: string;
    engine?: string;
    engineVersion?: string;
    globalInstanceId?: string;
    hasRenewChangeOrder?: string;
    instanceClass?: string;
    instanceId?: string;
    instanceName?: string;
    instanceReleaseProtection?: boolean;
    instanceStatus?: string;
    instanceType?: string;
    isOrderCompleted?: boolean;
    isRds?: boolean;
    isSupportTDE?: boolean;
    maintainEndTime?: string;
    maintainStartTime?: string;
    networkType?: string;
    nodeType?: string;
    packageType?: string;
    port?: number;
    privateIp?: string;
    QPS?: number;
    readOnlyCount?: number;
    realInstanceClass?: string;
    regionId?: string;
    replicaId?: string;
    replicationMode?: string;
    resourceGroupId?: string;
    secondaryZoneId?: string;
    securityIPList?: string;
    shardCount?: number;
    slaveReadOnlyCount?: number;
    storage?: string;
    storageType?: string;
    tags?: DescribeInstanceAttributeResponseBodyInstancesDBInstanceAttributeTags;
    vSwitchId?: string;
    vpcAuthMode?: string;
    vpcCloudInstanceId?: string;
    vpcId?: string;
    zoneId?: string;
    zoneType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAttributeResponseBodyInstances extends $tea.Model {
    DBInstanceAttribute?: DescribeInstanceAttributeResponseBodyInstancesDBInstanceAttribute[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem extends $tea.Model {
    autoRenew?: string;
    DBInstanceId?: string;
    duration?: number;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAutoRenewalAttributeResponseBodyItems extends $tea.Model {
    item?: DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesResponseBodyInstancesKVStoreInstanceTagsTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesResponseBodyInstancesKVStoreInstanceTags extends $tea.Model {
    tag?: DescribeInstancesResponseBodyInstancesKVStoreInstanceTagsTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesResponseBodyInstancesKVStoreInstance extends $tea.Model {
    architectureType?: string;
    bandwidth?: number;
    capacity?: number;
    chargeType?: string;
    cloudType?: string;
    config?: string;
    connectionDomain?: string;
    connectionMode?: string;
    connections?: number;
    createTime?: string;
    destroyTime?: string;
    editionType?: string;
    endTime?: string;
    engineVersion?: string;
    globalInstanceId?: string;
    hasRenewChangeOrder?: boolean;
    instanceClass?: string;
    instanceId?: string;
    instanceName?: string;
    instanceStatus?: string;
    instanceType?: string;
    isRds?: boolean;
    networkType?: string;
    nodeType?: string;
    packageType?: string;
    port?: number;
    privateIp?: string;
    QPS?: number;
    regionId?: string;
    replacateId?: string;
    resourceGroupId?: string;
    secondaryZoneId?: string;
    shardClass?: string;
    shardCount?: number;
    tags?: DescribeInstancesResponseBodyInstancesKVStoreInstanceTags;
    userName?: string;
    vSwitchId?: string;
    vpcId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesResponseBodyInstances extends $tea.Model {
    KVStoreInstance?: DescribeInstancesResponseBodyInstancesKVStoreInstance[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstancesOverviewResponseBodyInstances extends $tea.Model {
    architectureType?: string;
    capacity?: number;
    chargeType?: string;
    connectionDomain?: string;
    createTime?: string;
    endTime?: string;
    engineVersion?: string;
    globalInstanceId?: string;
    instanceClass?: string;
    instanceId?: string;
    instanceName?: string;
    instanceStatus?: string;
    instanceType?: string;
    networkType?: string;
    privateIp?: string;
    regionId?: string;
    resourceGroupId?: string;
    secondaryZoneId?: string;
    vSwitchId?: string;
    vpcId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogicInstanceTopologyResponseBodyRedisProxyListNodeInfo extends $tea.Model {
    bandwidth?: string;
    capacity?: string;
    connection?: string;
    nodeId?: string;
    nodeType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogicInstanceTopologyResponseBodyRedisProxyList extends $tea.Model {
    nodeInfo?: DescribeLogicInstanceTopologyResponseBodyRedisProxyListNodeInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogicInstanceTopologyResponseBodyRedisShardListNodeInfo extends $tea.Model {
    bandwidth?: string;
    capacity?: string;
    connection?: string;
    nodeId?: string;
    nodeType?: string;
    subInstanceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogicInstanceTopologyResponseBodyRedisShardList extends $tea.Model {
    nodeInfo?: DescribeLogicInstanceTopologyResponseBodyRedisShardListNodeInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMonitorItemsResponseBodyMonitorItemsKVStoreMonitorItem extends $tea.Model {
    monitorKey?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMonitorItemsResponseBodyMonitorItems extends $tea.Model {
    KVStoreMonitorItem?: DescribeMonitorItemsResponseBodyMonitorItemsKVStoreMonitorItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterModificationHistoryResponseBodyHistoricalParametersHistoricalParameter extends $tea.Model {
    modifyTime?: string;
    newParameterValue?: string;
    oldParameterValue?: string;
    parameterName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterModificationHistoryResponseBodyHistoricalParameters extends $tea.Model {
    historicalParameter?: DescribeParameterModificationHistoryResponseBodyHistoricalParametersHistoricalParameter[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterTemplatesResponseBodyParametersTemplateRecord extends $tea.Model {
    checkingCode?: string;
    forceModify?: boolean;
    forceRestart?: boolean;
    parameterDescription?: string;
    parameterName?: string;
    parameterValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterTemplatesResponseBodyParameters extends $tea.Model {
    templateRecord?: DescribeParameterTemplatesResponseBodyParametersTemplateRecord[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponseBodyConfigParametersParameter extends $tea.Model {
    checkingCode?: string;
    forceRestart?: boolean;
    modifiableStatus?: boolean;
    parameterDescription?: string;
    parameterName?: string;
    parameterValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponseBodyConfigParameters extends $tea.Model {
    parameter?: DescribeParametersResponseBodyConfigParametersParameter[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponseBodyRunningParametersParameter extends $tea.Model {
    checkingCode?: string;
    forceRestart?: string;
    modifiableStatus?: string;
    parameterDescription?: string;
    parameterName?: string;
    parameterValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponseBodyRunningParameters extends $tea.Model {
    parameter?: DescribeParametersResponseBodyRunningParametersParameter[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyOrderCouponsCoupon extends $tea.Model {
    couponNo?: string;
    description?: string;
    isSelected?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyOrderCoupons extends $tea.Model {
    coupon?: DescribePriceResponseBodyOrderCouponsCoupon[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyOrderRuleIds extends $tea.Model {
    ruleId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyOrder extends $tea.Model {
    coupons?: DescribePriceResponseBodyOrderCoupons;
    currency?: string;
    discountAmount?: string;
    handlingFeeAmount?: string;
    originalAmount?: string;
    ruleIds?: DescribePriceResponseBodyOrderRuleIds;
    showDiscountInfo?: boolean;
    tradeAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyRulesRule extends $tea.Model {
    name?: string;
    ruleDescId?: number;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyRules extends $tea.Model {
    rule?: DescribePriceResponseBodyRulesRule[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodySubOrdersSubOrderRuleIds extends $tea.Model {
    ruleId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodySubOrdersSubOrder extends $tea.Model {
    discountAmount?: string;
    instanceId?: string;
    originalAmount?: string;
    ruleIds?: DescribePriceResponseBodySubOrdersSubOrderRuleIds;
    tradeAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodySubOrders extends $tea.Model {
    subOrder?: DescribePriceResponseBodySubOrdersSubOrder[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponseBodyRegionIdsKVStoreRegionZoneIdList extends $tea.Model {
    zoneId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponseBodyRegionIdsKVStoreRegion extends $tea.Model {
    localName?: string;
    regionEndpoint?: string;
    regionId?: string;
    zoneIdList?: DescribeRegionsResponseBodyRegionIdsKVStoreRegionZoneIdList;
    zoneIds?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponseBodyRegionIds extends $tea.Model {
    KVStoreRegion?: DescribeRegionsResponseBodyRegionIdsKVStoreRegion[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRoleZoneInfoResponseBodyNodeNodeInfo extends $tea.Model {
    currentBandWidth?: number;
    currentMinorVersion?: string;
    custinsId?: string;
    defaultBandWidth?: number;
    insName?: string;
    insType?: number;
    isLatestVersion?: number;
    isOpenBandWidthService?: boolean;
    nodeId?: string;
    nodeType?: string;
    role?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRoleZoneInfoResponseBodyNode extends $tea.Model {
    nodeInfo?: DescribeRoleZoneInfoResponseBodyNodeNodeInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRunningLogRecordsResponseBodyItemsLogRecords extends $tea.Model {
    content?: string;
    createTime?: string;
    instanceId?: string;
    nodeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRunningLogRecordsResponseBodyItems extends $tea.Model {
    logRecords?: DescribeRunningLogRecordsResponseBodyItemsLogRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation extends $tea.Model {
    netType?: string;
    regionId?: string;
    securityGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityGroupConfigurationResponseBodyItems extends $tea.Model {
    ecsSecurityGroupRelation?: DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityIpsResponseBodySecurityIpGroupsSecurityIpGroup extends $tea.Model {
    securityIpGroupAttribute?: string;
    securityIpGroupName?: string;
    securityIpList?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityIpsResponseBodySecurityIpGroups extends $tea.Model {
    securityIpGroup?: DescribeSecurityIpsResponseBodySecurityIpGroupsSecurityIpGroup[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogRecordsResponseBodyItemsLogRecords extends $tea.Model {
    account?: string;
    accountName?: string;
    command?: string;
    DBName?: string;
    dataBaseName?: string;
    elapsedTime?: number;
    executeTime?: string;
    IPAddress?: string;
    nodeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogRecordsResponseBodyItems extends $tea.Model {
    logRecords?: DescribeSlowLogRecordsResponseBodyItemsLogRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTasksResponseBodyItems extends $tea.Model {
    beginTime?: string;
    currentStepName?: string;
    finishTime?: string;
    progress?: number;
    remain?: number;
    status?: string;
    stepProgressInfo?: string;
    stepsInfo?: string;
    taskAction?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeZonesResponseBodyZonesKVStoreZone extends $tea.Model {
    disabled?: boolean;
    isRds?: boolean;
    regionId?: string;
    switchNetwork?: boolean;
    zoneId?: string;
    zoneName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeZonesResponseBodyZones extends $tea.Model {
    KVStoreZone?: DescribeZonesResponseBodyZonesKVStoreZone[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBodyTagResourcesTagResource extends $tea.Model {
    resourceId?: string;
    resourceType?: string;
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBodyTagResources extends $tea.Model {
    tagResource?: ListTagResourcesResponseBodyTagResourcesTagResource[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceNetExpireTimeResponseBodyNetInfoItemsNetInfoItem extends $tea.Model {
    connectionString?: string;
    DBInstanceNetType?: string;
    expiredTime?: string;
    IPAddress?: string;
    port?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceNetExpireTimeResponseBodyNetInfoItems extends $tea.Model {
    netInfoItem?: ModifyInstanceNetExpireTimeResponseBodyNetInfoItemsNetInfoItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    /**
      * This operation is available only for cluster instances that use cloud disks.
      *
      * @param request AddShardingNodeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return AddShardingNodeResponse
     */
    addShardingNodeWithOptions(request: AddShardingNodeRequest, runtime: $Util.RuntimeOptions): Promise<AddShardingNodeResponse>;
    /**
      * This operation is available only for cluster instances that use cloud disks.
      *
      * @param request AddShardingNodeRequest
      * @return AddShardingNodeResponse
     */
    addShardingNode(request: AddShardingNodeRequest): Promise<AddShardingNodeResponse>;
    /**
      * In direct connection mode, you can use private endpoints to bypass proxy nodes and connect to ApsaraDB for Redis instances from clients in the same manner as you connect to native Redis clusters. The direct connection mode can reduce communication overheads and accelerate the response speed. For more information, see [Enable the direct connection mode](~~146901~~).
      * To call this operation, the instance must meet the following requirements:
      * *   The instance is an ApsaraDB for Redis cluster instance.
      * *   The instance is a Community Edition instance that runs Redis 4.0 or 5.0, or an Enhanced Edition instance (Tair) that runs Redis 5.0.
      * *   The instance is deployed in a virtual private cloud (VPC). If the instance is deployed in the classic network, call the [SwitchNetwork](~~61005~~) operation to change the network type to VPC.
      * *   SSL encryption is disabled for the instance. If SSL encryption is enabled, you can call the [ModifyInstanceSSL](~~96194~~) operation to disable it.
      * *   The vSwitch to which the instance is connected has sufficient IP addresses to be allocated. For more information, see [Obtain the number of available IP addresses in the vSwitch to which an ApsaraDB for Redis instance is connected](~~183151~~).
      *
      * @param request AllocateDirectConnectionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return AllocateDirectConnectionResponse
     */
    allocateDirectConnectionWithOptions(request: AllocateDirectConnectionRequest, runtime: $Util.RuntimeOptions): Promise<AllocateDirectConnectionResponse>;
    /**
      * In direct connection mode, you can use private endpoints to bypass proxy nodes and connect to ApsaraDB for Redis instances from clients in the same manner as you connect to native Redis clusters. The direct connection mode can reduce communication overheads and accelerate the response speed. For more information, see [Enable the direct connection mode](~~146901~~).
      * To call this operation, the instance must meet the following requirements:
      * *   The instance is an ApsaraDB for Redis cluster instance.
      * *   The instance is a Community Edition instance that runs Redis 4.0 or 5.0, or an Enhanced Edition instance (Tair) that runs Redis 5.0.
      * *   The instance is deployed in a virtual private cloud (VPC). If the instance is deployed in the classic network, call the [SwitchNetwork](~~61005~~) operation to change the network type to VPC.
      * *   SSL encryption is disabled for the instance. If SSL encryption is enabled, you can call the [ModifyInstanceSSL](~~96194~~) operation to disable it.
      * *   The vSwitch to which the instance is connected has sufficient IP addresses to be allocated. For more information, see [Obtain the number of available IP addresses in the vSwitch to which an ApsaraDB for Redis instance is connected](~~183151~~).
      *
      * @param request AllocateDirectConnectionRequest
      * @return AllocateDirectConnectionResponse
     */
    allocateDirectConnection(request: AllocateDirectConnectionRequest): Promise<AllocateDirectConnectionResponse>;
    /**
      * You can also apply for public endpoints in the ApsaraDB for Redis console. For more information, see [Use a public endpoint to connect to an ApsaraDB for Redis instance](~~43850~~).
      *
      * @param request AllocateInstancePublicConnectionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return AllocateInstancePublicConnectionResponse
     */
    allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: $Util.RuntimeOptions): Promise<AllocateInstancePublicConnectionResponse>;
    /**
      * You can also apply for public endpoints in the ApsaraDB for Redis console. For more information, see [Use a public endpoint to connect to an ApsaraDB for Redis instance](~~43850~~).
      *
      * @param request AllocateInstancePublicConnectionRequest
      * @return AllocateInstancePublicConnectionResponse
     */
    allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): Promise<AllocateInstancePublicConnectionResponse>;
    /**
      * *   For information about Transparent Data Encryption (TDE) and the usage notes of TDE, see [Enable TDE](~~265913~~).
      * *   If the ApsaraDB for Redis instance is authorized to use KMS, you can call the [ModifyInstanceTDE](~~302337~~) operation to enable TDE.
      *
      * @param request CheckCloudResourceAuthorizedRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CheckCloudResourceAuthorizedResponse
     */
    checkCloudResourceAuthorizedWithOptions(request: CheckCloudResourceAuthorizedRequest, runtime: $Util.RuntimeOptions): Promise<CheckCloudResourceAuthorizedResponse>;
    /**
      * *   For information about Transparent Data Encryption (TDE) and the usage notes of TDE, see [Enable TDE](~~265913~~).
      * *   If the ApsaraDB for Redis instance is authorized to use KMS, you can call the [ModifyInstanceTDE](~~302337~~) operation to enable TDE.
      *
      * @param request CheckCloudResourceAuthorizedRequest
      * @return CheckCloudResourceAuthorizedResponse
     */
    checkCloudResourceAuthorized(request: CheckCloudResourceAuthorizedRequest): Promise<CheckCloudResourceAuthorizedResponse>;
    /**
      * >
      * *   This operation is supported only for ApsaraDB for Redis instances that run Redis 4.0 or later.
      * *   The ApsaraDB for Redis instance for which you want to call this operation must be in the running state.
      * *   You can create up to 18 accounts for an ApsaraDB for Redis instance.
      * You can also create an account in the ApsaraDB for Redis console. For more information, see [Manage database accounts](~~92665~~).
      *
      * @param request CreateAccountRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateAccountResponse
     */
    createAccountWithOptions(request: CreateAccountRequest, runtime: $Util.RuntimeOptions): Promise<CreateAccountResponse>;
    /**
      * >
      * *   This operation is supported only for ApsaraDB for Redis instances that run Redis 4.0 or later.
      * *   The ApsaraDB for Redis instance for which you want to call this operation must be in the running state.
      * *   You can create up to 18 accounts for an ApsaraDB for Redis instance.
      * You can also create an account in the ApsaraDB for Redis console. For more information, see [Manage database accounts](~~92665~~).
      *
      * @param request CreateAccountRequest
      * @return CreateAccountResponse
     */
    createAccount(request: CreateAccountRequest): Promise<CreateAccountResponse>;
    /**
      * You can also back up an instance in the ApsaraDB for Redis console. For more information, see [Backup and recovery](~~43886~~).
      *
      * @param request CreateBackupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateBackupResponse
     */
    createBackupWithOptions(request: CreateBackupRequest, runtime: $Util.RuntimeOptions): Promise<CreateBackupResponse>;
    /**
      * You can also back up an instance in the ApsaraDB for Redis console. For more information, see [Backup and recovery](~~43886~~).
      *
      * @param request CreateBackupRequest
      * @return CreateBackupResponse
     */
    createBackup(request: CreateBackupRequest): Promise<CreateBackupResponse>;
    /**
      * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
      * Before you call this operation, make sure that the instance meets the following requirements:
      * *   The engine version of the instance is Redis 4.0 or later.
      * *   The instance is a Community Edition instance or an Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
      * This feature is unavailable for cloud disk-based cluster instances. For more information, see [Comparison between ApsaraDB for Redis instances that use local disks and those that use cloud disks](~~188068~~).
      * *   The instance is of the latest minor version. For more information about whether you must update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
      * After you call this operation, you can call the [DescribeCacheAnalysisReport](~~128808~~) operation to view the analytic results.
      *
      * @param request CreateCacheAnalysisTaskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateCacheAnalysisTaskResponse
     */
    createCacheAnalysisTaskWithOptions(request: CreateCacheAnalysisTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateCacheAnalysisTaskResponse>;
    /**
      * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
      * Before you call this operation, make sure that the instance meets the following requirements:
      * *   The engine version of the instance is Redis 4.0 or later.
      * *   The instance is a Community Edition instance or an Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
      * This feature is unavailable for cloud disk-based cluster instances. For more information, see [Comparison between ApsaraDB for Redis instances that use local disks and those that use cloud disks](~~188068~~).
      * *   The instance is of the latest minor version. For more information about whether you must update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
      * After you call this operation, you can call the [DescribeCacheAnalysisReport](~~128808~~) operation to view the analytic results.
      *
      * @param request CreateCacheAnalysisTaskRequest
      * @return CreateCacheAnalysisTaskResponse
     */
    createCacheAnalysisTask(request: CreateCacheAnalysisTaskRequest): Promise<CreateCacheAnalysisTaskResponse>;
    /**
      * You cannot directly create a distributed instance. If you require a distributed instance, you must call this operation to convert an existing instance to the first child instance of the distributed instance. After the instance is converted, the distributed instance is created. Before you call this operation, make sure that the following requirements are met:
      * *   A [DRAM-based instance](~~126164~~) of Enhanced Edition is used.
      * *   If the existing instance is a cluster instance, the direct connection mode must be disabled for the instance. For more information, see [Release a private endpoint](~~150047~~).
      * > You can also call the [CreateInstance](~~60873~~) operation to create an instance that is specified as the first child instance of a distributed instance. After the child instance is created, the distributed instance to which the child instance belongs is created.
      *
      * @param request CreateGlobalDistributeCacheRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateGlobalDistributeCacheResponse
     */
    createGlobalDistributeCacheWithOptions(request: CreateGlobalDistributeCacheRequest, runtime: $Util.RuntimeOptions): Promise<CreateGlobalDistributeCacheResponse>;
    /**
      * You cannot directly create a distributed instance. If you require a distributed instance, you must call this operation to convert an existing instance to the first child instance of the distributed instance. After the instance is converted, the distributed instance is created. Before you call this operation, make sure that the following requirements are met:
      * *   A [DRAM-based instance](~~126164~~) of Enhanced Edition is used.
      * *   If the existing instance is a cluster instance, the direct connection mode must be disabled for the instance. For more information, see [Release a private endpoint](~~150047~~).
      * > You can also call the [CreateInstance](~~60873~~) operation to create an instance that is specified as the first child instance of a distributed instance. After the child instance is created, the distributed instance to which the child instance belongs is created.
      *
      * @param request CreateGlobalDistributeCacheRequest
      * @return CreateGlobalDistributeCacheResponse
     */
    createGlobalDistributeCache(request: CreateGlobalDistributeCacheRequest): Promise<CreateGlobalDistributeCacheResponse>;
    createGlobalSecurityIPGroupWithOptions(request: CreateGlobalSecurityIPGroupRequest, runtime: $Util.RuntimeOptions): Promise<CreateGlobalSecurityIPGroupResponse>;
    createGlobalSecurityIPGroup(request: CreateGlobalSecurityIPGroupRequest): Promise<CreateGlobalSecurityIPGroupResponse>;
    /**
      * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
      * You can call this operation to create an ApsaraDB for Redis instance or a classic Tair DRAM-based instance. To create a cloud-native Tair instance, call the [CreateTairInstance](~~208271~~) operation.
      * **
      * **Description** For more information about how to create an instance that meets your requirements in the ApsaraDB for Redis console, see [Step 1: Create an ApsaraDB for Redis instance](~~26351~~).
      *
      * @param request CreateInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateInstanceResponse
     */
    createInstanceWithOptions(request: CreateInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateInstanceResponse>;
    /**
      * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
      * You can call this operation to create an ApsaraDB for Redis instance or a classic Tair DRAM-based instance. To create a cloud-native Tair instance, call the [CreateTairInstance](~~208271~~) operation.
      * **
      * **Description** For more information about how to create an instance that meets your requirements in the ApsaraDB for Redis console, see [Step 1: Create an ApsaraDB for Redis instance](~~26351~~).
      *
      * @param request CreateInstanceRequest
      * @return CreateInstanceResponse
     */
    createInstance(request: CreateInstanceRequest): Promise<CreateInstanceResponse>;
    /**
      * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
      * >  For more information about how to create an instance that meets your requirements in the ApsaraDB for Redis console, see [Step 1: Create an ApsaraDB for Redis instance](~~26351~~).
      * To create an ApsaraDB for Redis Enhanced Edition (Tair) instance that uses cloud disks, call [CreateTairInstance](~~208271~~).
      *
      * @param request CreateInstancesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateInstancesResponse
     */
    createInstancesWithOptions(request: CreateInstancesRequest, runtime: $Util.RuntimeOptions): Promise<CreateInstancesResponse>;
    /**
      * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
      * >  For more information about how to create an instance that meets your requirements in the ApsaraDB for Redis console, see [Step 1: Create an ApsaraDB for Redis instance](~~26351~~).
      * To create an ApsaraDB for Redis Enhanced Edition (Tair) instance that uses cloud disks, call [CreateTairInstance](~~208271~~).
      *
      * @param request CreateInstancesRequest
      * @return CreateInstancesResponse
     */
    createInstances(request: CreateInstancesRequest): Promise<CreateInstancesResponse>;
    /**
      * For information about instance selection, see [Select an ApsaraDB for Redis instance](~~223808~~).
      * Before you call this operation, make sure that you are familiar with the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
      * >
      * *   For information about how to create a Tair instance in the Tair console, see [Create a Tair instance](~~443863~~).
      * *   If you want to create other types of instances, such as Community Edition instances or [Tair DRAM-based](~~126164~~) instances, you can call the [CreateInstance](~~60873~~) operation.
      *
      * @param request CreateTairInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateTairInstanceResponse
     */
    createTairInstanceWithOptions(request: CreateTairInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateTairInstanceResponse>;
    /**
      * For information about instance selection, see [Select an ApsaraDB for Redis instance](~~223808~~).
      * Before you call this operation, make sure that you are familiar with the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
      * >
      * *   For information about how to create a Tair instance in the Tair console, see [Create a Tair instance](~~443863~~).
      * *   If you want to create other types of instances, such as Community Edition instances or [Tair DRAM-based](~~126164~~) instances, you can call the [CreateInstance](~~60873~~) operation.
      *
      * @param request CreateTairInstanceRequest
      * @return CreateTairInstanceResponse
     */
    createTairInstance(request: CreateTairInstanceRequest): Promise<CreateTairInstanceResponse>;
    /**
      * *   This operation is supported only for ApsaraDB for Redis instances that run Redis 4.0.
      * *   The ApsaraDB for Redis instance must be in the Running state.
      *
      * @param request DeleteAccountRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteAccountResponse
     */
    deleteAccountWithOptions(request: DeleteAccountRequest, runtime: $Util.RuntimeOptions): Promise<DeleteAccountResponse>;
    /**
      * *   This operation is supported only for ApsaraDB for Redis instances that run Redis 4.0.
      * *   The ApsaraDB for Redis instance must be in the Running state.
      *
      * @param request DeleteAccountRequest
      * @return DeleteAccountResponse
     */
    deleteAccount(request: DeleteAccountRequest): Promise<DeleteAccountResponse>;
    /**
      * Before you delete an IP whitelist template, you must unbind (disassociate) the instances that are currently associated with the template.
      *
      * @param request DeleteGlobalSecurityIPGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteGlobalSecurityIPGroupResponse
     */
    deleteGlobalSecurityIPGroupWithOptions(request: DeleteGlobalSecurityIPGroupRequest, runtime: $Util.RuntimeOptions): Promise<DeleteGlobalSecurityIPGroupResponse>;
    /**
      * Before you delete an IP whitelist template, you must unbind (disassociate) the instances that are currently associated with the template.
      *
      * @param request DeleteGlobalSecurityIPGroupRequest
      * @return DeleteGlobalSecurityIPGroupResponse
     */
    deleteGlobalSecurityIPGroup(request: DeleteGlobalSecurityIPGroupRequest): Promise<DeleteGlobalSecurityIPGroupResponse>;
    /**
      * For more information about how to perform the corresponding operation in the console, see [Release an instance](~~43882~~).
      * Before you call this operation, make sure that the following requirements are met:
      * *   The instance is in the running state.
      * *   The instance is charged on a pay-as-you-go basis.
      * >  You cannot call this operation to release a subscription instance, which is automatically released when it expires. To release a subscription instance before it expires, submit a ticket.
      *
      * @param request DeleteInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteInstanceResponse
     */
    deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DeleteInstanceResponse>;
    /**
      * For more information about how to perform the corresponding operation in the console, see [Release an instance](~~43882~~).
      * Before you call this operation, make sure that the following requirements are met:
      * *   The instance is in the running state.
      * *   The instance is charged on a pay-as-you-go basis.
      * >  You cannot call this operation to release a subscription instance, which is automatically released when it expires. To release a subscription instance before it expires, submit a ticket.
      *
      * @param request DeleteInstanceRequest
      * @return DeleteInstanceResponse
     */
    deleteInstance(request: DeleteInstanceRequest): Promise<DeleteInstanceResponse>;
    /**
      * You can also remove data shards from an instance in the ApsaraDB for Redis console. For more information, see [Adjust the number of shards for an ApsaraDB for Redis instance with cloud disks](~~198082~~).\\
      * Before you call this operation, make sure that the instance meets the following requirements:
      * *   The instance is a persistent memory-optimized instance in the cluster architecture. For more information about persistent memory-optimized instances, see [Persistent memory-optimized instances](~~183956~~).
      * *   The instance has more than one data shard.
      *
      * @param request DeleteShardingNodeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteShardingNodeResponse
     */
    deleteShardingNodeWithOptions(request: DeleteShardingNodeRequest, runtime: $Util.RuntimeOptions): Promise<DeleteShardingNodeResponse>;
    /**
      * You can also remove data shards from an instance in the ApsaraDB for Redis console. For more information, see [Adjust the number of shards for an ApsaraDB for Redis instance with cloud disks](~~198082~~).\\
      * Before you call this operation, make sure that the instance meets the following requirements:
      * *   The instance is a persistent memory-optimized instance in the cluster architecture. For more information about persistent memory-optimized instances, see [Persistent memory-optimized instances](~~183956~~).
      * *   The instance has more than one data shard.
      *
      * @param request DeleteShardingNodeRequest
      * @return DeleteShardingNodeResponse
     */
    deleteShardingNode(request: DeleteShardingNodeRequest): Promise<DeleteShardingNodeResponse>;
    /**
      * >  Only ApsaraDB for Redis instances of Redis 4.0 or later are supported.
      *
      * @param request DescribeAccountsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeAccountsResponse
     */
    describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAccountsResponse>;
    /**
      * >  Only ApsaraDB for Redis instances of Redis 4.0 or later are supported.
      *
      * @param request DescribeAccountsRequest
      * @return DescribeAccountsResponse
     */
    describeAccounts(request: DescribeAccountsRequest): Promise<DescribeAccountsResponse>;
    /**
      * Specifies whether to return the historical tasks. Valid values:
      * *   **0**: returns the current task. This is the default value.
      * *   **1**: returns the historical tasks.
      *
      * @param request DescribeActiveOperationTaskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeActiveOperationTaskResponse
     */
    describeActiveOperationTaskWithOptions(request: DescribeActiveOperationTaskRequest, runtime: $Util.RuntimeOptions): Promise<DescribeActiveOperationTaskResponse>;
    /**
      * Specifies whether to return the historical tasks. Valid values:
      * *   **0**: returns the current task. This is the default value.
      * *   **1**: returns the historical tasks.
      *
      * @param request DescribeActiveOperationTaskRequest
      * @return DescribeActiveOperationTaskResponse
     */
    describeActiveOperationTask(request: DescribeActiveOperationTaskRequest): Promise<DescribeActiveOperationTaskResponse>;
    /**
      * > You can call the [ModifyAuditLogConfig](~~130206~~) operation to enable or disable the audit log feature for an ApsaraDB for Redis instance. For more information, see [Enable the new audit log feature](~~102015~~).
      * Before you call this operation, make sure that the ApsaraDB for Redis instance meets the following requirements:
      * *   The instance is an ApsaraDB for Redis Community Edition instance or ApsaraDB for Redis Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
      * *   The engine version of the instance is Redis 4.0 or later, and the latest minor version is used. You can call the [DescribeEngineVersion](~~95268~~) operation to check whether the instance uses the latest minor version.
      * *   The audit log feature is enabled for the instance. For more information, see [ModifyAuditLogConfig](~~130206~~).
      *
      * @param request DescribeAuditLogConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeAuditLogConfigResponse
     */
    describeAuditLogConfigWithOptions(request: DescribeAuditLogConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAuditLogConfigResponse>;
    /**
      * > You can call the [ModifyAuditLogConfig](~~130206~~) operation to enable or disable the audit log feature for an ApsaraDB for Redis instance. For more information, see [Enable the new audit log feature](~~102015~~).
      * Before you call this operation, make sure that the ApsaraDB for Redis instance meets the following requirements:
      * *   The instance is an ApsaraDB for Redis Community Edition instance or ApsaraDB for Redis Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
      * *   The engine version of the instance is Redis 4.0 or later, and the latest minor version is used. You can call the [DescribeEngineVersion](~~95268~~) operation to check whether the instance uses the latest minor version.
      * *   The audit log feature is enabled for the instance. For more information, see [ModifyAuditLogConfig](~~130206~~).
      *
      * @param request DescribeAuditLogConfigRequest
      * @return DescribeAuditLogConfigResponse
     */
    describeAuditLogConfig(request: DescribeAuditLogConfigRequest): Promise<DescribeAuditLogConfigResponse>;
    /**
      * This operation can be called up to 100 times per minute. You can also query audit logs in the ApsaraDB for Redis console. For more information, see [Query audit logs of an instance](~~101937~~).
      * Before you call this operation, make sure that the instance meets the following requirements:
      * *   The instance is an ApsaraDB for Redis Community Edition instance or an ApsaraDB for Redis Enhanced Edition (Tair) DRAM-based instance.
      * *   The engine version of the instance is Redis 4.0 or later.
      * *   The audit log feature is enabled for the instance. For more information, see [ModifyAuditLogConfig](~~130206~~).
      *
      * @param request DescribeAuditRecordsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeAuditRecordsResponse
     */
    describeAuditRecordsWithOptions(request: DescribeAuditRecordsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAuditRecordsResponse>;
    /**
      * This operation can be called up to 100 times per minute. You can also query audit logs in the ApsaraDB for Redis console. For more information, see [Query audit logs of an instance](~~101937~~).
      * Before you call this operation, make sure that the instance meets the following requirements:
      * *   The instance is an ApsaraDB for Redis Community Edition instance or an ApsaraDB for Redis Enhanced Edition (Tair) DRAM-based instance.
      * *   The engine version of the instance is Redis 4.0 or later.
      * *   The audit log feature is enabled for the instance. For more information, see [ModifyAuditLogConfig](~~130206~~).
      *
      * @param request DescribeAuditRecordsRequest
      * @return DescribeAuditRecordsResponse
     */
    describeAuditRecords(request: DescribeAuditRecordsRequest): Promise<DescribeAuditRecordsResponse>;
    describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAvailableResourceResponse>;
    describeAvailableResource(request: DescribeAvailableResourceRequest): Promise<DescribeAvailableResourceResponse>;
    describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBackupPolicyResponse>;
    describeBackupPolicy(request: DescribeBackupPolicyRequest): Promise<DescribeBackupPolicyResponse>;
    describeBackupTasksWithOptions(request: DescribeBackupTasksRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBackupTasksResponse>;
    describeBackupTasks(request: DescribeBackupTasksRequest): Promise<DescribeBackupTasksResponse>;
    describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBackupsResponse>;
    describeBackups(request: DescribeBackupsRequest): Promise<DescribeBackupsResponse>;
    /**
      * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
      * Before you call this operation, make sure that the instance meets the following requirements:
      * *   The engine version of the instance is Redis 4.0 or later.
      * *   The instance uses the latest minor version. For more information about how to check whether to update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
      *
      * @param request DescribeCacheAnalysisReportRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeCacheAnalysisReportResponse
     */
    describeCacheAnalysisReportWithOptions(request: DescribeCacheAnalysisReportRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCacheAnalysisReportResponse>;
    /**
      * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
      * Before you call this operation, make sure that the instance meets the following requirements:
      * *   The engine version of the instance is Redis 4.0 or later.
      * *   The instance uses the latest minor version. For more information about how to check whether to update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
      *
      * @param request DescribeCacheAnalysisReportRequest
      * @return DescribeCacheAnalysisReportResponse
     */
    describeCacheAnalysisReport(request: DescribeCacheAnalysisReportRequest): Promise<DescribeCacheAnalysisReportResponse>;
    /**
      * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
      * Before you call this operation, make sure that the instance meets the following requirements:
      * *   The engine version of the instance is Redis 4.0 or later.
      * *   The instance uses the latest minor version. For more information about how to check whether to update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
      *
      * @param request DescribeCacheAnalysisReportListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeCacheAnalysisReportListResponse
     */
    describeCacheAnalysisReportListWithOptions(request: DescribeCacheAnalysisReportListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCacheAnalysisReportListResponse>;
    /**
      * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
      * Before you call this operation, make sure that the instance meets the following requirements:
      * *   The engine version of the instance is Redis 4.0 or later.
      * *   The instance uses the latest minor version. For more information about how to check whether to update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
      *
      * @param request DescribeCacheAnalysisReportListRequest
      * @return DescribeCacheAnalysisReportListResponse
     */
    describeCacheAnalysisReportList(request: DescribeCacheAnalysisReportListRequest): Promise<DescribeCacheAnalysisReportListResponse>;
    describeClusterBackupListWithOptions(request: DescribeClusterBackupListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeClusterBackupListResponse>;
    describeClusterBackupList(request: DescribeClusterBackupListRequest): Promise<DescribeClusterBackupListResponse>;
    /**
      * > This API operation is applicable only to ApsaraDB for Redis instances that use [cloud disks](~~188068~~) and the [cluster architecture](~~52228~~).
      *
      * @param request DescribeClusterMemberInfoRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeClusterMemberInfoResponse
     */
    describeClusterMemberInfoWithOptions(request: DescribeClusterMemberInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeClusterMemberInfoResponse>;
    /**
      * > This API operation is applicable only to ApsaraDB for Redis instances that use [cloud disks](~~188068~~) and the [cluster architecture](~~52228~~).
      *
      * @param request DescribeClusterMemberInfoRequest
      * @return DescribeClusterMemberInfoResponse
     */
    describeClusterMemberInfo(request: DescribeClusterMemberInfoRequest): Promise<DescribeClusterMemberInfoResponse>;
    describeDBInstanceNetInfoWithOptions(request: DescribeDBInstanceNetInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceNetInfoResponse>;
    describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): Promise<DescribeDBInstanceNetInfoResponse>;
    describeDBNodeDirectVipInfoWithOptions(request: DescribeDBNodeDirectVipInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBNodeDirectVipInfoResponse>;
    describeDBNodeDirectVipInfo(request: DescribeDBNodeDirectVipInfoRequest): Promise<DescribeDBNodeDirectVipInfoResponse>;
    /**
      * > If you want to query the information about ApsaraDB for Redis instances that are not deployed in a dedicated cluster, call the [DescribeInstanceAttribute](~~60996~~) operation.
      *
      * @param request DescribeDedicatedClusterInstanceListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDedicatedClusterInstanceListResponse
     */
    describeDedicatedClusterInstanceListWithOptions(request: DescribeDedicatedClusterInstanceListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDedicatedClusterInstanceListResponse>;
    /**
      * > If you want to query the information about ApsaraDB for Redis instances that are not deployed in a dedicated cluster, call the [DescribeInstanceAttribute](~~60996~~) operation.
      *
      * @param request DescribeDedicatedClusterInstanceListRequest
      * @return DescribeDedicatedClusterInstanceListResponse
     */
    describeDedicatedClusterInstanceList(request: DescribeDedicatedClusterInstanceListRequest): Promise<DescribeDedicatedClusterInstanceListResponse>;
    /**
      * Before you call this operation, TDE must be enabled for the ApsaraDB for Redis instance by using a custom key. For more information, see [ModifyInstanceTDE](~~302337~~).
      * > For more information about TDE, see [Enable TDE](~~265913~~).
      *
      * @param request DescribeEncryptionKeyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeEncryptionKeyResponse
     */
    describeEncryptionKeyWithOptions(request: DescribeEncryptionKeyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEncryptionKeyResponse>;
    /**
      * Before you call this operation, TDE must be enabled for the ApsaraDB for Redis instance by using a custom key. For more information, see [ModifyInstanceTDE](~~302337~~).
      * > For more information about TDE, see [Enable TDE](~~265913~~).
      *
      * @param request DescribeEncryptionKeyRequest
      * @return DescribeEncryptionKeyResponse
     */
    describeEncryptionKey(request: DescribeEncryptionKeyRequest): Promise<DescribeEncryptionKeyResponse>;
    /**
      * *   You can specify a custom key when you call the [ModifyInstanceTDE](~~302337~~) operation to enable Transparent Data Encryption (TDE). You can call the DescribeEncryptionKeyList operation to query the custom keys that are in use. To create a custom key, you can call the [CreateKey](~~28947~~) operation of Key Management Service (KMS).
      * *   For more information about TDE and the usage notes of TDE, see [Enable TDE](~~265913~~).
      *
      * @param request DescribeEncryptionKeyListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeEncryptionKeyListResponse
     */
    describeEncryptionKeyListWithOptions(request: DescribeEncryptionKeyListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEncryptionKeyListResponse>;
    /**
      * *   You can specify a custom key when you call the [ModifyInstanceTDE](~~302337~~) operation to enable Transparent Data Encryption (TDE). You can call the DescribeEncryptionKeyList operation to query the custom keys that are in use. To create a custom key, you can call the [CreateKey](~~28947~~) operation of Key Management Service (KMS).
      * *   For more information about TDE and the usage notes of TDE, see [Enable TDE](~~265913~~).
      *
      * @param request DescribeEncryptionKeyListRequest
      * @return DescribeEncryptionKeyListResponse
     */
    describeEncryptionKeyList(request: DescribeEncryptionKeyListRequest): Promise<DescribeEncryptionKeyListResponse>;
    /**
      * ## Debugging
      * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=R-kvstore\\&api=DescribeEngineVersion\\&type=RPC\\&version=2015-01-01)
      *
      * @param request DescribeEngineVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeEngineVersionResponse
     */
    describeEngineVersionWithOptions(request: DescribeEngineVersionRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEngineVersionResponse>;
    /**
      * ## Debugging
      * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=R-kvstore\\&api=DescribeEngineVersion\\&type=RPC\\&version=2015-01-01)
      *
      * @param request DescribeEngineVersionRequest
      * @return DescribeEngineVersionResponse
     */
    describeEngineVersion(request: DescribeEngineVersionRequest): Promise<DescribeEngineVersionResponse>;
    /**
      * ## Debugging
      * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=R-kvstore\\&api=DescribeGlobalDistributeCache\\&type=RPC\\&version=2015-01-01)
      *
      * @param request DescribeGlobalDistributeCacheRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeGlobalDistributeCacheResponse
     */
    describeGlobalDistributeCacheWithOptions(request: DescribeGlobalDistributeCacheRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGlobalDistributeCacheResponse>;
    /**
      * ## Debugging
      * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=R-kvstore\\&api=DescribeGlobalDistributeCache\\&type=RPC\\&version=2015-01-01)
      *
      * @param request DescribeGlobalDistributeCacheRequest
      * @return DescribeGlobalDistributeCacheResponse
     */
    describeGlobalDistributeCache(request: DescribeGlobalDistributeCacheRequest): Promise<DescribeGlobalDistributeCacheResponse>;
    describeGlobalSecurityIPGroupWithOptions(request: DescribeGlobalSecurityIPGroupRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGlobalSecurityIPGroupResponse>;
    describeGlobalSecurityIPGroup(request: DescribeGlobalSecurityIPGroupRequest): Promise<DescribeGlobalSecurityIPGroupResponse>;
    describeGlobalSecurityIPGroupRelationWithOptions(request: DescribeGlobalSecurityIPGroupRelationRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGlobalSecurityIPGroupRelationResponse>;
    describeGlobalSecurityIPGroupRelation(request: DescribeGlobalSecurityIPGroupRelationRequest): Promise<DescribeGlobalSecurityIPGroupRelationResponse>;
    /**
      * You can also query the performance monitoring data of an instance in the ApsaraDB for Redis console. For more information, see [Metrics](~~43887~~).
      *
      * @param request DescribeHistoryMonitorValuesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeHistoryMonitorValuesResponse
     */
    describeHistoryMonitorValuesWithOptions(request: DescribeHistoryMonitorValuesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHistoryMonitorValuesResponse>;
    /**
      * You can also query the performance monitoring data of an instance in the ApsaraDB for Redis console. For more information, see [Metrics](~~43887~~).
      *
      * @param request DescribeHistoryMonitorValuesRequest
      * @return DescribeHistoryMonitorValuesResponse
     */
    describeHistoryMonitorValues(request: DescribeHistoryMonitorValuesRequest): Promise<DescribeHistoryMonitorValuesResponse>;
    describeHistoryTasksWithOptions(request: DescribeHistoryTasksRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHistoryTasksResponse>;
    describeHistoryTasks(request: DescribeHistoryTasksRequest): Promise<DescribeHistoryTasksResponse>;
    describeInstanceAttributeWithOptions(request: DescribeInstanceAttributeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceAttributeResponse>;
    describeInstanceAttribute(request: DescribeInstanceAttributeRequest): Promise<DescribeInstanceAttributeResponse>;
    describeInstanceAutoRenewalAttributeWithOptions(request: DescribeInstanceAutoRenewalAttributeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceAutoRenewalAttributeResponse>;
    describeInstanceAutoRenewalAttribute(request: DescribeInstanceAutoRenewalAttributeRequest): Promise<DescribeInstanceAutoRenewalAttributeResponse>;
    /**
      * This operation is available only for instances that use cloud disks.
      * > You can call the [DescribeParameters](~~473847~~) operation to query the parameter settings of instances that use local disks.
      *
      * @param request DescribeInstanceConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeInstanceConfigResponse
     */
    describeInstanceConfigWithOptions(request: DescribeInstanceConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceConfigResponse>;
    /**
      * This operation is available only for instances that use cloud disks.
      * > You can call the [DescribeParameters](~~473847~~) operation to query the parameter settings of instances that use local disks.
      *
      * @param request DescribeInstanceConfigRequest
      * @return DescribeInstanceConfigResponse
     */
    describeInstanceConfig(request: DescribeInstanceConfigRequest): Promise<DescribeInstanceConfigResponse>;
    /**
      * SSL encryption is supported for ApsaraDB for Redis 2.8 standard master-replica instances, ApsaraDB for Redis 2.8 master-replica cluster instances, and ApsaraDB for Redis 4.0 master-replica cluster instances. You can enable SSL encryption to enhance data transmission security.
      * You can use one of the following methods to enable or disable SSL encryption or update the SSL certificate for an ApsaraDB for Redis instance:
      * *   Call the [ModifyInstanceSSL](~~96194~~) operation.
      * *   Enable or disable SSL encryption or update the SSL certificate in the ApsaraDB for Redis console. For more information, see [Configure SSL encryption](~~84898~~).
      * > After SSL encryption is enabled, the instance may respond slower.
      *
      * @param request DescribeInstanceSSLRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeInstanceSSLResponse
     */
    describeInstanceSSLWithOptions(request: DescribeInstanceSSLRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceSSLResponse>;
    /**
      * SSL encryption is supported for ApsaraDB for Redis 2.8 standard master-replica instances, ApsaraDB for Redis 2.8 master-replica cluster instances, and ApsaraDB for Redis 4.0 master-replica cluster instances. You can enable SSL encryption to enhance data transmission security.
      * You can use one of the following methods to enable or disable SSL encryption or update the SSL certificate for an ApsaraDB for Redis instance:
      * *   Call the [ModifyInstanceSSL](~~96194~~) operation.
      * *   Enable or disable SSL encryption or update the SSL certificate in the ApsaraDB for Redis console. For more information, see [Configure SSL encryption](~~84898~~).
      * > After SSL encryption is enabled, the instance may respond slower.
      *
      * @param request DescribeInstanceSSLRequest
      * @return DescribeInstanceSSLResponse
     */
    describeInstanceSSL(request: DescribeInstanceSSLRequest): Promise<DescribeInstanceSSLResponse>;
    /**
      * For more information about TDE and the usage notes of TDE, see [Enable TDE](~~265913~~).
      * >  You can call the [ModifyInstanceTDE](~~302337~~) to enable or disable TDE.
      *
      * @param request DescribeInstanceTDEStatusRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeInstanceTDEStatusResponse
     */
    describeInstanceTDEStatusWithOptions(request: DescribeInstanceTDEStatusRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceTDEStatusResponse>;
    /**
      * For more information about TDE and the usage notes of TDE, see [Enable TDE](~~265913~~).
      * >  You can call the [ModifyInstanceTDE](~~302337~~) to enable or disable TDE.
      *
      * @param request DescribeInstanceTDEStatusRequest
      * @return DescribeInstanceTDEStatusResponse
     */
    describeInstanceTDEStatus(request: DescribeInstanceTDEStatusRequest): Promise<DescribeInstanceTDEStatusResponse>;
    describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstancesResponse>;
    describeInstances(request: DescribeInstancesRequest): Promise<DescribeInstancesResponse>;
    /**
      * If you do not specify the InstanceIds parameter when you call this operation, the overview information of all instances is returned.
      * > This operation returns non-paged results.
      *
      * @param request DescribeInstancesOverviewRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeInstancesOverviewResponse
     */
    describeInstancesOverviewWithOptions(request: DescribeInstancesOverviewRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstancesOverviewResponse>;
    /**
      * If you do not specify the InstanceIds parameter when you call this operation, the overview information of all instances is returned.
      * > This operation returns non-paged results.
      *
      * @param request DescribeInstancesOverviewRequest
      * @return DescribeInstancesOverviewResponse
     */
    describeInstancesOverview(request: DescribeInstancesOverviewRequest): Promise<DescribeInstancesOverviewResponse>;
    /**
      * You can call the [EnableAdditionalBandwidth](~~206173~~) operation to increase the internal bandwidth of an instance.
      *
      * @param request DescribeIntranetAttributeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeIntranetAttributeResponse
     */
    describeIntranetAttributeWithOptions(request: DescribeIntranetAttributeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeIntranetAttributeResponse>;
    /**
      * You can call the [EnableAdditionalBandwidth](~~206173~~) operation to increase the internal bandwidth of an instance.
      *
      * @param request DescribeIntranetAttributeRequest
      * @return DescribeIntranetAttributeResponse
     */
    describeIntranetAttribute(request: DescribeIntranetAttributeRequest): Promise<DescribeIntranetAttributeResponse>;
    /**
      * This parameter is supported only for cluster and read/write splitting instances.
      *
      * @param request DescribeLogicInstanceTopologyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeLogicInstanceTopologyResponse
     */
    describeLogicInstanceTopologyWithOptions(request: DescribeLogicInstanceTopologyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeLogicInstanceTopologyResponse>;
    /**
      * This parameter is supported only for cluster and read/write splitting instances.
      *
      * @param request DescribeLogicInstanceTopologyRequest
      * @return DescribeLogicInstanceTopologyResponse
     */
    describeLogicInstanceTopology(request: DescribeLogicInstanceTopologyRequest): Promise<DescribeLogicInstanceTopologyResponse>;
    /**
      * >  ApsaraDB for Redis has upgraded the monitoring metrics. The DescribeMonitorItems operation is phased out. For more information, see [The DescribeMonitorItems operation supported by ApsaraDB for Redis is phased out](~~189893~~).
      * After you call this operation to retrieve a list of metrics for a specified ApsaraDB for Redis instance, you can call the [DescribeHistoryMonitorValues](~~DescribeHistoryMonitorValues~~) operation to query monitoring history of the instance.
      *
      * @param request DescribeMonitorItemsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeMonitorItemsResponse
     */
    describeMonitorItemsWithOptions(request: DescribeMonitorItemsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeMonitorItemsResponse>;
    /**
      * >  ApsaraDB for Redis has upgraded the monitoring metrics. The DescribeMonitorItems operation is phased out. For more information, see [The DescribeMonitorItems operation supported by ApsaraDB for Redis is phased out](~~189893~~).
      * After you call this operation to retrieve a list of metrics for a specified ApsaraDB for Redis instance, you can call the [DescribeHistoryMonitorValues](~~DescribeHistoryMonitorValues~~) operation to query monitoring history of the instance.
      *
      * @param request DescribeMonitorItemsRequest
      * @return DescribeMonitorItemsResponse
     */
    describeMonitorItems(request: DescribeMonitorItemsRequest): Promise<DescribeMonitorItemsResponse>;
    describeParameterModificationHistoryWithOptions(request: DescribeParameterModificationHistoryRequest, runtime: $Util.RuntimeOptions): Promise<DescribeParameterModificationHistoryResponse>;
    describeParameterModificationHistory(request: DescribeParameterModificationHistoryRequest): Promise<DescribeParameterModificationHistoryResponse>;
    /**
      * An array that consists of the details about the parameters returned.
      *
      * @param request DescribeParameterTemplatesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeParameterTemplatesResponse
     */
    describeParameterTemplatesWithOptions(request: DescribeParameterTemplatesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeParameterTemplatesResponse>;
    /**
      * An array that consists of the details about the parameters returned.
      *
      * @param request DescribeParameterTemplatesRequest
      * @return DescribeParameterTemplatesResponse
     */
    describeParameterTemplates(request: DescribeParameterTemplatesRequest): Promise<DescribeParameterTemplatesResponse>;
    /**
      * This operation is available only for instances that use local disks.
      * > You can call the [DescribeInstanceConfig](~~473846~~) operation to query the parameter settings of instances that use cloud disks.
      *
      * @param request DescribeParametersRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeParametersResponse
     */
    describeParametersWithOptions(request: DescribeParametersRequest, runtime: $Util.RuntimeOptions): Promise<DescribeParametersResponse>;
    /**
      * This operation is available only for instances that use local disks.
      * > You can call the [DescribeInstanceConfig](~~473846~~) operation to query the parameter settings of instances that use cloud disks.
      *
      * @param request DescribeParametersRequest
      * @return DescribeParametersResponse
     */
    describeParameters(request: DescribeParametersRequest): Promise<DescribeParametersResponse>;
    describePriceWithOptions(request: DescribePriceRequest, runtime: $Util.RuntimeOptions): Promise<DescribePriceResponse>;
    describePrice(request: DescribePriceRequest): Promise<DescribePriceResponse>;
    describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRegionsResponse>;
    describeRegions(request: DescribeRegionsRequest): Promise<DescribeRegionsResponse>;
    describeRoleZoneInfoWithOptions(request: DescribeRoleZoneInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRoleZoneInfoResponse>;
    describeRoleZoneInfo(request: DescribeRoleZoneInfoRequest): Promise<DescribeRoleZoneInfoResponse>;
    /**
      * For more information about how to view the operational logs of an instance in the ApsaraDB for Redis console, see [View active logs](~~101713~~).
      * This operation can be called up to 100 times per minute.
      *
      * @param request DescribeRunningLogRecordsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeRunningLogRecordsResponse
     */
    describeRunningLogRecordsWithOptions(request: DescribeRunningLogRecordsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRunningLogRecordsResponse>;
    /**
      * For more information about how to view the operational logs of an instance in the ApsaraDB for Redis console, see [View active logs](~~101713~~).
      * This operation can be called up to 100 times per minute.
      *
      * @param request DescribeRunningLogRecordsRequest
      * @return DescribeRunningLogRecordsResponse
     */
    describeRunningLogRecords(request: DescribeRunningLogRecordsRequest): Promise<DescribeRunningLogRecordsResponse>;
    describeSecurityGroupConfigurationWithOptions(request: DescribeSecurityGroupConfigurationRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSecurityGroupConfigurationResponse>;
    describeSecurityGroupConfiguration(request: DescribeSecurityGroupConfigurationRequest): Promise<DescribeSecurityGroupConfigurationResponse>;
    describeSecurityIpsWithOptions(request: DescribeSecurityIpsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSecurityIpsResponse>;
    describeSecurityIps(request: DescribeSecurityIpsRequest): Promise<DescribeSecurityIpsResponse>;
    /**
      * You can also query slow logs in the ApsaraDB for Redis console. For more information, see [Query slow logs of an instance](~~95874~~). This operation can be called up to 100 times per minute.
      *
      * @param request DescribeSlowLogRecordsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSlowLogRecordsResponse
     */
    describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSlowLogRecordsResponse>;
    /**
      * You can also query slow logs in the ApsaraDB for Redis console. For more information, see [Query slow logs of an instance](~~95874~~). This operation can be called up to 100 times per minute.
      *
      * @param request DescribeSlowLogRecordsRequest
      * @return DescribeSlowLogRecordsResponse
     */
    describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): Promise<DescribeSlowLogRecordsResponse>;
    /**
      * You can call this operation to query the progress of a task when you perform time-consuming operations. You can also log on to the ApsaraDB for Redis console and click the Tasks icon in the upper-right corner of the **Instance Information** page to view the progress of the current task.
      *
      * @param request DescribeTasksRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeTasksResponse
     */
    describeTasksWithOptions(request: DescribeTasksRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTasksResponse>;
    /**
      * You can call this operation to query the progress of a task when you perform time-consuming operations. You can also log on to the ApsaraDB for Redis console and click the Tasks icon in the upper-right corner of the **Instance Information** page to view the progress of the current task.
      *
      * @param request DescribeTasksRequest
      * @return DescribeTasksResponse
     */
    describeTasks(request: DescribeTasksRequest): Promise<DescribeTasksResponse>;
    describeZonesWithOptions(request: DescribeZonesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeZonesResponse>;
    describeZones(request: DescribeZonesRequest): Promise<DescribeZonesResponse>;
    /**
      * When you call this operation, make sure that your instance is an ApsaraDB for Redis Community Edition instance or an ApsaraDB for Redis Enhanced Edition (Tair) [DRAM-based instance](~~126164~~), and that the instance is deployed in classic mode. For more information, see [Comparison between cloud-native instances and classic instances](~~188068~~).
      * If you enable the bandwidth auto scaling feature and call this operation at the same time, bandwidth auto scaling takes precedence. During bandwidth scale-back, the instance is scaled back to the default bandwidth of the instance type. For more information about the limits, costs, and FAQ about this feature, see [Adjust the bandwidth of an instance](~~102588~~).
      * >  Before you call this operation, you can call the [DescribeRoleZoneInfo](~~190794~~) operation to query the current bandwidth of each data node in an instance.
      *
      * @param request EnableAdditionalBandwidthRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return EnableAdditionalBandwidthResponse
     */
    enableAdditionalBandwidthWithOptions(request: EnableAdditionalBandwidthRequest, runtime: $Util.RuntimeOptions): Promise<EnableAdditionalBandwidthResponse>;
    /**
      * When you call this operation, make sure that your instance is an ApsaraDB for Redis Community Edition instance or an ApsaraDB for Redis Enhanced Edition (Tair) [DRAM-based instance](~~126164~~), and that the instance is deployed in classic mode. For more information, see [Comparison between cloud-native instances and classic instances](~~188068~~).
      * If you enable the bandwidth auto scaling feature and call this operation at the same time, bandwidth auto scaling takes precedence. During bandwidth scale-back, the instance is scaled back to the default bandwidth of the instance type. For more information about the limits, costs, and FAQ about this feature, see [Adjust the bandwidth of an instance](~~102588~~).
      * >  Before you call this operation, you can call the [DescribeRoleZoneInfo](~~190794~~) operation to query the current bandwidth of each data node in an instance.
      *
      * @param request EnableAdditionalBandwidthRequest
      * @return EnableAdditionalBandwidthResponse
     */
    enableAdditionalBandwidth(request: EnableAdditionalBandwidthRequest): Promise<EnableAdditionalBandwidthResponse>;
    /**
      * For more information about how to clear the expired keys in the ApsaraDB for Redis console, see [Clear data](~~43881~~).
      * >  Expired keys cannot be recovered after they are deleted. Exercise caution when you call this operation.
      *
      * @param request FlushExpireKeysRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return FlushExpireKeysResponse
     */
    flushExpireKeysWithOptions(request: FlushExpireKeysRequest, runtime: $Util.RuntimeOptions): Promise<FlushExpireKeysResponse>;
    /**
      * For more information about how to clear the expired keys in the ApsaraDB for Redis console, see [Clear data](~~43881~~).
      * >  Expired keys cannot be recovered after they are deleted. Exercise caution when you call this operation.
      *
      * @param request FlushExpireKeysRequest
      * @return FlushExpireKeysResponse
     */
    flushExpireKeys(request: FlushExpireKeysRequest): Promise<FlushExpireKeysResponse>;
    flushInstanceWithOptions(request: FlushInstanceRequest, runtime: $Util.RuntimeOptions): Promise<FlushInstanceResponse>;
    flushInstance(request: FlushInstanceRequest): Promise<FlushInstanceResponse>;
    /**
      * Each ApsaraDB for Redis or Tair instance can contain up to 256 databases. Each database does not have a separate memory usage limit. The memory capacity that a database can use is subject to the total memory limit of the instance. You can execute the `SELECT` statement to switch between databases. For more information, see [What is the size of each database on an ApsaraDB for Redis instance, and how can I choose databases?](~~38688~~)
      * >  This operation is available only for cloud-native instances that use cloud disks.
      *
      * @param request FlushInstanceForDBRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return FlushInstanceForDBResponse
     */
    flushInstanceForDBWithOptions(request: FlushInstanceForDBRequest, runtime: $Util.RuntimeOptions): Promise<FlushInstanceForDBResponse>;
    /**
      * Each ApsaraDB for Redis or Tair instance can contain up to 256 databases. Each database does not have a separate memory usage limit. The memory capacity that a database can use is subject to the total memory limit of the instance. You can execute the `SELECT` statement to switch between databases. For more information, see [What is the size of each database on an ApsaraDB for Redis instance, and how can I choose databases?](~~38688~~)
      * >  This operation is available only for cloud-native instances that use cloud disks.
      *
      * @param request FlushInstanceForDBRequest
      * @return FlushInstanceForDBResponse
     */
    flushInstanceForDB(request: FlushInstanceForDBRequest): Promise<FlushInstanceForDBResponse>;
    /**
      * >
      * *   Only ApsaraDB for Redis instances of Redis 4.0 or later are supported.
      * *   The ApsaraDB for Redis instance must be in the running state.
      *
      * @param request GrantAccountPrivilegeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GrantAccountPrivilegeResponse
     */
    grantAccountPrivilegeWithOptions(request: GrantAccountPrivilegeRequest, runtime: $Util.RuntimeOptions): Promise<GrantAccountPrivilegeResponse>;
    /**
      * >
      * *   Only ApsaraDB for Redis instances of Redis 4.0 or later are supported.
      * *   The ApsaraDB for Redis instance must be in the running state.
      *
      * @param request GrantAccountPrivilegeRequest
      * @return GrantAccountPrivilegeResponse
     */
    grantAccountPrivilege(request: GrantAccountPrivilegeRequest): Promise<GrantAccountPrivilegeResponse>;
    /**
      * The log management feature of ApsaraDB for Redis requires the resources of [Log Service](~~48869~~). To use the log management feature of ApsaraDB for Redis, you can call this operation to associate the RAM role named AliyunServiceRoleForKvstore with the ApsaraDB for Redis instance. For more information, see [Associated RAM roles of ApsaraDB for Redis] (~~184337~~).
      *
      * @param request InitializeKvstorePermissionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return InitializeKvstorePermissionResponse
     */
    initializeKvstorePermissionWithOptions(request: InitializeKvstorePermissionRequest, runtime: $Util.RuntimeOptions): Promise<InitializeKvstorePermissionResponse>;
    /**
      * The log management feature of ApsaraDB for Redis requires the resources of [Log Service](~~48869~~). To use the log management feature of ApsaraDB for Redis, you can call this operation to associate the RAM role named AliyunServiceRoleForKvstore with the ApsaraDB for Redis instance. For more information, see [Associated RAM roles of ApsaraDB for Redis] (~~184337~~).
      *
      * @param request InitializeKvstorePermissionRequest
      * @return InitializeKvstorePermissionResponse
     */
    initializeKvstorePermission(request: InitializeKvstorePermissionRequest): Promise<InitializeKvstorePermissionResponse>;
    /**
      * You can also query the relationships between instances and tags in the ApsaraDB for Redis console. For more information, see [Filter ApsaraDB for Redis instances by tag](~~119160~~) and [View tags bound to an instance](~~134038~~).
      *
      * @param request ListTagResourcesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListTagResourcesResponse
     */
    listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<ListTagResourcesResponse>;
    /**
      * You can also query the relationships between instances and tags in the ApsaraDB for Redis console. For more information, see [Filter ApsaraDB for Redis instances by tag](~~119160~~) and [View tags bound to an instance](~~134038~~).
      *
      * @param request ListTagResourcesRequest
      * @return ListTagResourcesResponse
     */
    listTagResources(request: ListTagResourcesRequest): Promise<ListTagResourcesResponse>;
    lockDBInstanceWriteWithOptions(request: LockDBInstanceWriteRequest, runtime: $Util.RuntimeOptions): Promise<LockDBInstanceWriteResponse>;
    lockDBInstanceWrite(request: LockDBInstanceWriteRequest): Promise<LockDBInstanceWriteResponse>;
    /**
      * For more information about how to migrate an instance across zones in the ApsaraDB for Redis console, see [Migrate an instance across zones](~~106272~~).
      * > *   If the network type of an ApsaraDB for Redis instance is switched from classic network to Virtual Private Cloud (VPC), and the endpoint of the classic network is retained, you can migrate the instance across zones only after the classic network endpoint is released upon expiration.
      * > *   After the data is migrated, the endpoint of an instance remains unchanged. However, the virtual IP address (VIP) is changed. We recommend that you use the endpoint instead of the VIP to connect to the instance.
      *
      * @param request MigrateToOtherZoneRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return MigrateToOtherZoneResponse
     */
    migrateToOtherZoneWithOptions(request: MigrateToOtherZoneRequest, runtime: $Util.RuntimeOptions): Promise<MigrateToOtherZoneResponse>;
    /**
      * For more information about how to migrate an instance across zones in the ApsaraDB for Redis console, see [Migrate an instance across zones](~~106272~~).
      * > *   If the network type of an ApsaraDB for Redis instance is switched from classic network to Virtual Private Cloud (VPC), and the endpoint of the classic network is retained, you can migrate the instance across zones only after the classic network endpoint is released upon expiration.
      * > *   After the data is migrated, the endpoint of an instance remains unchanged. However, the virtual IP address (VIP) is changed. We recommend that you use the endpoint instead of the VIP to connect to the instance.
      *
      * @param request MigrateToOtherZoneRequest
      * @return MigrateToOtherZoneResponse
     */
    migrateToOtherZone(request: MigrateToOtherZoneRequest): Promise<MigrateToOtherZoneResponse>;
    /**
      * > This operation is supported only for instances that run Redis 4.0 or later.
      *
      * @param request ModifyAccountDescriptionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyAccountDescriptionResponse
     */
    modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: $Util.RuntimeOptions): Promise<ModifyAccountDescriptionResponse>;
    /**
      * > This operation is supported only for instances that run Redis 4.0 or later.
      *
      * @param request ModifyAccountDescriptionRequest
      * @return ModifyAccountDescriptionResponse
     */
    modifyAccountDescription(request: ModifyAccountDescriptionRequest): Promise<ModifyAccountDescriptionResponse>;
    modifyAccountPasswordWithOptions(request: ModifyAccountPasswordRequest, runtime: $Util.RuntimeOptions): Promise<ModifyAccountPasswordResponse>;
    modifyAccountPassword(request: ModifyAccountPasswordRequest): Promise<ModifyAccountPasswordResponse>;
    /**
      * You can receive notifications for ApsaraDB for Redis events such as instance migration and version upgrade by text message, phone call, email, internal message, or by using the ApsaraDB for Redis console. You can also change the scheduled switchover time of a task in the ApsaraDB for Redis console. For more information, see [Query or manage pending events](~~187022~~).
      *
      * @param request ModifyActiveOperationTaskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyActiveOperationTaskResponse
     */
    modifyActiveOperationTaskWithOptions(request: ModifyActiveOperationTaskRequest, runtime: $Util.RuntimeOptions): Promise<ModifyActiveOperationTaskResponse>;
    /**
      * You can receive notifications for ApsaraDB for Redis events such as instance migration and version upgrade by text message, phone call, email, internal message, or by using the ApsaraDB for Redis console. You can also change the scheduled switchover time of a task in the ApsaraDB for Redis console. For more information, see [Query or manage pending events](~~187022~~).
      *
      * @param request ModifyActiveOperationTaskRequest
      * @return ModifyActiveOperationTaskResponse
     */
    modifyActiveOperationTask(request: ModifyActiveOperationTaskRequest): Promise<ModifyActiveOperationTaskResponse>;
    /**
      * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of the audit log feature.
      * Before you call this operation, make sure that the ApsaraDB for Redis instance meets the following requirements:
      * *   The instance is an ApsaraDB for Redis Community Edition instance or ApsaraDB for Redis Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
      * *   The engine version of the instance is Redis 4.0 or later, and the latest minor version is used. You can call the [DescribeEngineVersion](~~95268~~) operation to check whether the instance uses the latest major version and minor version.
      *
      * @param request ModifyAuditLogConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyAuditLogConfigResponse
     */
    modifyAuditLogConfigWithOptions(request: ModifyAuditLogConfigRequest, runtime: $Util.RuntimeOptions): Promise<ModifyAuditLogConfigResponse>;
    /**
      * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of the audit log feature.
      * Before you call this operation, make sure that the ApsaraDB for Redis instance meets the following requirements:
      * *   The instance is an ApsaraDB for Redis Community Edition instance or ApsaraDB for Redis Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
      * *   The engine version of the instance is Redis 4.0 or later, and the latest minor version is used. You can call the [DescribeEngineVersion](~~95268~~) operation to check whether the instance uses the latest major version and minor version.
      *
      * @param request ModifyAuditLogConfigRequest
      * @return ModifyAuditLogConfigResponse
     */
    modifyAuditLogConfig(request: ModifyAuditLogConfigRequest): Promise<ModifyAuditLogConfigResponse>;
    modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: $Util.RuntimeOptions): Promise<ModifyBackupPolicyResponse>;
    modifyBackupPolicy(request: ModifyBackupPolicyRequest): Promise<ModifyBackupPolicyResponse>;
    /**
      * You can also modify the endpoint or port number of an instance in the ApsaraDB for Redis console. For more information, see [Change the endpoint or port number of an instance](~~85683~~).
      *
      * @param request ModifyDBInstanceConnectionStringRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceConnectionStringResponse
     */
    modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceConnectionStringResponse>;
    /**
      * You can also modify the endpoint or port number of an instance in the ApsaraDB for Redis console. For more information, see [Change the endpoint or port number of an instance](~~85683~~).
      *
      * @param request ModifyDBInstanceConnectionStringRequest
      * @return ModifyDBInstanceConnectionStringResponse
     */
    modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): Promise<ModifyDBInstanceConnectionStringResponse>;
    modifyGlobalSecurityIPGroupWithOptions(request: ModifyGlobalSecurityIPGroupRequest, runtime: $Util.RuntimeOptions): Promise<ModifyGlobalSecurityIPGroupResponse>;
    modifyGlobalSecurityIPGroup(request: ModifyGlobalSecurityIPGroupRequest): Promise<ModifyGlobalSecurityIPGroupResponse>;
    modifyGlobalSecurityIPGroupNameWithOptions(request: ModifyGlobalSecurityIPGroupNameRequest, runtime: $Util.RuntimeOptions): Promise<ModifyGlobalSecurityIPGroupNameResponse>;
    modifyGlobalSecurityIPGroupName(request: ModifyGlobalSecurityIPGroupNameRequest): Promise<ModifyGlobalSecurityIPGroupNameResponse>;
    modifyGlobalSecurityIPGroupRelationWithOptions(request: ModifyGlobalSecurityIPGroupRelationRequest, runtime: $Util.RuntimeOptions): Promise<ModifyGlobalSecurityIPGroupRelationResponse>;
    modifyGlobalSecurityIPGroupRelation(request: ModifyGlobalSecurityIPGroupRelationRequest): Promise<ModifyGlobalSecurityIPGroupRelationResponse>;
    /**
      * You can also modify the information of an instance in the ApsaraDB for Redis console. For more information, see [Change or reset the password](~~43874~~).
      *
      * @param request ModifyInstanceAttributeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceAttributeResponse
     */
    modifyInstanceAttributeWithOptions(request: ModifyInstanceAttributeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceAttributeResponse>;
    /**
      * You can also modify the information of an instance in the ApsaraDB for Redis console. For more information, see [Change or reset the password](~~43874~~).
      *
      * @param request ModifyInstanceAttributeRequest
      * @return ModifyInstanceAttributeResponse
     */
    modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): Promise<ModifyInstanceAttributeResponse>;
    /**
      * > Auto-renewal is triggered seven days before the expiration date of the instance.
      *
      * @param request ModifyInstanceAutoRenewalAttributeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceAutoRenewalAttributeResponse
     */
    modifyInstanceAutoRenewalAttributeWithOptions(request: ModifyInstanceAutoRenewalAttributeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceAutoRenewalAttributeResponse>;
    /**
      * > Auto-renewal is triggered seven days before the expiration date of the instance.
      *
      * @param request ModifyInstanceAutoRenewalAttributeRequest
      * @return ModifyInstanceAutoRenewalAttributeResponse
     */
    modifyInstanceAutoRenewalAttribute(request: ModifyInstanceAutoRenewalAttributeRequest): Promise<ModifyInstanceAutoRenewalAttributeResponse>;
    modifyInstanceConfigWithOptions(request: ModifyInstanceConfigRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceConfigResponse>;
    modifyInstanceConfig(request: ModifyInstanceConfigRequest): Promise<ModifyInstanceConfigResponse>;
    /**
      * You can also modify the maintenance window of an instance in the ApsaraDB for Redis console. For more information, see [Set a maintenance window](~~55252~~).
      *
      * @param request ModifyInstanceMaintainTimeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceMaintainTimeResponse
     */
    modifyInstanceMaintainTimeWithOptions(request: ModifyInstanceMaintainTimeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceMaintainTimeResponse>;
    /**
      * You can also modify the maintenance window of an instance in the ApsaraDB for Redis console. For more information, see [Set a maintenance window](~~55252~~).
      *
      * @param request ModifyInstanceMaintainTimeRequest
      * @return ModifyInstanceMaintainTimeResponse
     */
    modifyInstanceMaintainTime(request: ModifyInstanceMaintainTimeRequest): Promise<ModifyInstanceMaintainTimeResponse>;
    /**
      * For more information about how to perform the corresponding operation in the console, see [Upgrade the major version](~~101764~~).
      *
      * @param request ModifyInstanceMajorVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceMajorVersionResponse
     */
    modifyInstanceMajorVersionWithOptions(request: ModifyInstanceMajorVersionRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceMajorVersionResponse>;
    /**
      * For more information about how to perform the corresponding operation in the console, see [Upgrade the major version](~~101764~~).
      *
      * @param request ModifyInstanceMajorVersionRequest
      * @return ModifyInstanceMajorVersionResponse
     */
    modifyInstanceMajorVersion(request: ModifyInstanceMajorVersionRequest): Promise<ModifyInstanceMajorVersionResponse>;
    /**
      * The procedure to update the minor version of an instance varies based on types of ApsaraDB for Redis instances. For more information, see [Upgrade the minor version](~~56450~~).
      * >
      * *   Before you call this operation, you can call the [DescribeEngineVersion](~~95268~~) operation to query the minor version of the current instance.
      * *   When you switch your workloads over from the original instance to a new instance or from the master node to the replica node in the original instance, you may experience disconnections that last a few seconds. The original instance stays in the read-only state within 60 seconds until all data is synchronized. We recommend that you upgrade the original instance during off-peak hours and make sure that your application is configured to automatically reconnect to the original instance.
      *
      * @param request ModifyInstanceMinorVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceMinorVersionResponse
     */
    modifyInstanceMinorVersionWithOptions(request: ModifyInstanceMinorVersionRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceMinorVersionResponse>;
    /**
      * The procedure to update the minor version of an instance varies based on types of ApsaraDB for Redis instances. For more information, see [Upgrade the minor version](~~56450~~).
      * >
      * *   Before you call this operation, you can call the [DescribeEngineVersion](~~95268~~) operation to query the minor version of the current instance.
      * *   When you switch your workloads over from the original instance to a new instance or from the master node to the replica node in the original instance, you may experience disconnections that last a few seconds. The original instance stays in the read-only state within 60 seconds until all data is synchronized. We recommend that you upgrade the original instance during off-peak hours and make sure that your application is configured to automatically reconnect to the original instance.
      *
      * @param request ModifyInstanceMinorVersionRequest
      * @return ModifyInstanceMinorVersionResponse
     */
    modifyInstanceMinorVersion(request: ModifyInstanceMinorVersionRequest): Promise<ModifyInstanceMinorVersionResponse>;
    /**
      * You can also perform this operation in the ApsaraDB for Redis console. For more information, see [Change the expiration time for the endpoint of the classic network](~~60062~~).
      * > For more information about how to switch the network type of an ApsaraDB for Redis instance from classic network to VPC, see [SwitchNetwork](~~61005~~).
      *
      * @param request ModifyInstanceNetExpireTimeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceNetExpireTimeResponse
     */
    modifyInstanceNetExpireTimeWithOptions(request: ModifyInstanceNetExpireTimeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceNetExpireTimeResponse>;
    /**
      * You can also perform this operation in the ApsaraDB for Redis console. For more information, see [Change the expiration time for the endpoint of the classic network](~~60062~~).
      * > For more information about how to switch the network type of an ApsaraDB for Redis instance from classic network to VPC, see [SwitchNetwork](~~61005~~).
      *
      * @param request ModifyInstanceNetExpireTimeRequest
      * @return ModifyInstanceNetExpireTimeResponse
     */
    modifyInstanceNetExpireTime(request: ModifyInstanceNetExpireTimeRequest): Promise<ModifyInstanceNetExpireTimeResponse>;
    modifyInstanceParameterWithOptions(request: ModifyInstanceParameterRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceParameterResponse>;
    modifyInstanceParameter(request: ModifyInstanceParameterRequest): Promise<ModifyInstanceParameterResponse>;
    /**
      * You can also modify SSL encryption configurations in the ApsaraDB for Redis console. For more information, see [Configure SSL encryption](~~84898~~).
      * >  To specify the earliest supported SSL version, you can call the [ModifyInstanceConfig](~~ModifyInstanceConfig~~) operation to modify the required parameter.
      *
      * @param request ModifyInstanceSSLRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceSSLResponse
     */
    modifyInstanceSSLWithOptions(request: ModifyInstanceSSLRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceSSLResponse>;
    /**
      * You can also modify SSL encryption configurations in the ApsaraDB for Redis console. For more information, see [Configure SSL encryption](~~84898~~).
      * >  To specify the earliest supported SSL version, you can call the [ModifyInstanceConfig](~~ModifyInstanceConfig~~) operation to modify the required parameter.
      *
      * @param request ModifyInstanceSSLRequest
      * @return ModifyInstanceSSLResponse
     */
    modifyInstanceSSL(request: ModifyInstanceSSLRequest): Promise<ModifyInstanceSSLResponse>;
    /**
      * >  For more information about the procedure, impacts, limits, and fees of this operation, see [Change the configurations of an instance](~~26353~~).
      *
      * @param request ModifyInstanceSpecRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceSpecResponse
     */
    modifyInstanceSpecWithOptions(request: ModifyInstanceSpecRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceSpecResponse>;
    /**
      * >  For more information about the procedure, impacts, limits, and fees of this operation, see [Change the configurations of an instance](~~26353~~).
      *
      * @param request ModifyInstanceSpecRequest
      * @return ModifyInstanceSpecResponse
     */
    modifyInstanceSpec(request: ModifyInstanceSpecRequest): Promise<ModifyInstanceSpecResponse>;
    /**
      * > For more information about TDE and the impact of TDE, see [Enable TDE](~~265913~~).
      *
      * @param request ModifyInstanceTDERequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceTDEResponse
     */
    modifyInstanceTDEWithOptions(request: ModifyInstanceTDERequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceTDEResponse>;
    /**
      * > For more information about TDE and the impact of TDE, see [Enable TDE](~~265913~~).
      *
      * @param request ModifyInstanceTDERequest
      * @return ModifyInstanceTDEResponse
     */
    modifyInstanceTDE(request: ModifyInstanceTDERequest): Promise<ModifyInstanceTDEResponse>;
    /**
      * When the password-free access feature is enabled, Elastic Compute Service (ECS) instances in the same virtual private cloud (VPC) can connect to the ApsaraDB for Redis instance without a password. You can also use the username and password to connect to the ApsaraDB for Redis instance.
      * > The ApsaraDB for Redis instance is deployed in a VPC. For more information, see [Enable password-free access](~~85168~~).
      *
      * @param request ModifyInstanceVpcAuthModeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceVpcAuthModeResponse
     */
    modifyInstanceVpcAuthModeWithOptions(request: ModifyInstanceVpcAuthModeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceVpcAuthModeResponse>;
    /**
      * When the password-free access feature is enabled, Elastic Compute Service (ECS) instances in the same virtual private cloud (VPC) can connect to the ApsaraDB for Redis instance without a password. You can also use the username and password to connect to the ApsaraDB for Redis instance.
      * > The ApsaraDB for Redis instance is deployed in a VPC. For more information, see [Enable password-free access](~~85168~~).
      *
      * @param request ModifyInstanceVpcAuthModeRequest
      * @return ModifyInstanceVpcAuthModeResponse
     */
    modifyInstanceVpcAuthMode(request: ModifyInstanceVpcAuthModeRequest): Promise<ModifyInstanceVpcAuthModeResponse>;
    /**
      * >
      * *   This operation is applicable only to an ApsaraDB for Redis instance that is deployed in a dedicated cluster. To adjust the bandwidth of a standard ApsaraDB for Redis instance, call the [EnableAdditionalBandwidth](~~206173~~) operation.
      *
      * @param request ModifyIntranetAttributeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyIntranetAttributeResponse
     */
    modifyIntranetAttributeWithOptions(request: ModifyIntranetAttributeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyIntranetAttributeResponse>;
    /**
      * >
      * *   This operation is applicable only to an ApsaraDB for Redis instance that is deployed in a dedicated cluster. To adjust the bandwidth of a standard ApsaraDB for Redis instance, call the [EnableAdditionalBandwidth](~~206173~~) operation.
      *
      * @param request ModifyIntranetAttributeRequest
      * @return ModifyIntranetAttributeResponse
     */
    modifyIntranetAttribute(request: ModifyIntranetAttributeRequest): Promise<ModifyIntranetAttributeResponse>;
    /**
      * Resource groups allow you to sort resources owned by your Alibaba Cloud account into groups. This simplifies resource and permission management within your Alibaba Cloud account. For more information, see [What is Resource Management?](~~94475~~)
      * > For more information about resource group API operations, see [Resource Management API overview](~~160024~~).
      *
      * @param request ModifyResourceGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyResourceGroupResponse
     */
    modifyResourceGroupWithOptions(request: ModifyResourceGroupRequest, runtime: $Util.RuntimeOptions): Promise<ModifyResourceGroupResponse>;
    /**
      * Resource groups allow you to sort resources owned by your Alibaba Cloud account into groups. This simplifies resource and permission management within your Alibaba Cloud account. For more information, see [What is Resource Management?](~~94475~~)
      * > For more information about resource group API operations, see [Resource Management API overview](~~160024~~).
      *
      * @param request ModifyResourceGroupRequest
      * @return ModifyResourceGroupResponse
     */
    modifyResourceGroup(request: ModifyResourceGroupRequest): Promise<ModifyResourceGroupResponse>;
    /**
      * > After you call this operation, the security groups that are added to the whitelists of the ApsaraDB for Redis instance are deleted, and the security group specified by the **SecurityGroupId** parameter is added to the whitelists. For more information about how to reset security groups in the ApsaraDB for Redis console, see [Add security groups](~~148267~~).
      *
      * @param request ModifySecurityGroupConfigurationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifySecurityGroupConfigurationResponse
     */
    modifySecurityGroupConfigurationWithOptions(request: ModifySecurityGroupConfigurationRequest, runtime: $Util.RuntimeOptions): Promise<ModifySecurityGroupConfigurationResponse>;
    /**
      * > After you call this operation, the security groups that are added to the whitelists of the ApsaraDB for Redis instance are deleted, and the security group specified by the **SecurityGroupId** parameter is added to the whitelists. For more information about how to reset security groups in the ApsaraDB for Redis console, see [Add security groups](~~148267~~).
      *
      * @param request ModifySecurityGroupConfigurationRequest
      * @return ModifySecurityGroupConfigurationResponse
     */
    modifySecurityGroupConfiguration(request: ModifySecurityGroupConfigurationRequest): Promise<ModifySecurityGroupConfigurationResponse>;
    /**
      * You can also modify the whitelists of an instance in the ApsaraDB for Redis console. For more information, see [Configure a whitelist for an instance](~~56464~~).
      *
      * @param request ModifySecurityIpsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifySecurityIpsResponse
     */
    modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: $Util.RuntimeOptions): Promise<ModifySecurityIpsResponse>;
    /**
      * You can also modify the whitelists of an instance in the ApsaraDB for Redis console. For more information, see [Configure a whitelist for an instance](~~56464~~).
      *
      * @param request ModifySecurityIpsRequest
      * @return ModifySecurityIpsResponse
     */
    modifySecurityIps(request: ModifySecurityIpsRequest): Promise<ModifySecurityIpsResponse>;
    /**
      * In direct connection mode, clients can bypass proxy nodes and use private endpoints to connect to ApsaraDB for Redis instances. This is similar to the connection to a native Redis cluster. The direct connection mode can reduce communication overheads and the response time of ApsaraDB for Redis. For more information, see [Enable the direct connection mode](~~146901~~).
      *
      * @param request ReleaseDirectConnectionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ReleaseDirectConnectionResponse
     */
    releaseDirectConnectionWithOptions(request: ReleaseDirectConnectionRequest, runtime: $Util.RuntimeOptions): Promise<ReleaseDirectConnectionResponse>;
    /**
      * In direct connection mode, clients can bypass proxy nodes and use private endpoints to connect to ApsaraDB for Redis instances. This is similar to the connection to a native Redis cluster. The direct connection mode can reduce communication overheads and the response time of ApsaraDB for Redis. For more information, see [Enable the direct connection mode](~~146901~~).
      *
      * @param request ReleaseDirectConnectionRequest
      * @return ReleaseDirectConnectionResponse
     */
    releaseDirectConnection(request: ReleaseDirectConnectionRequest): Promise<ReleaseDirectConnectionResponse>;
    /**
      * For more information about how to perform the API operation in the ApsaraDB for Redis console, see [Release public endpoints](~~125424~~).
      *
      * @param request ReleaseInstancePublicConnectionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ReleaseInstancePublicConnectionResponse
     */
    releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: $Util.RuntimeOptions): Promise<ReleaseInstancePublicConnectionResponse>;
    /**
      * For more information about how to perform the API operation in the ApsaraDB for Redis console, see [Release public endpoints](~~125424~~).
      *
      * @param request ReleaseInstancePublicConnectionRequest
      * @return ReleaseInstancePublicConnectionResponse
     */
    releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): Promise<ReleaseInstancePublicConnectionResponse>;
    /**
      * The operation that you want to perform. Set the value to **RemoveSubInstance**.
      *
      * @param request RemoveSubInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RemoveSubInstanceResponse
     */
    removeSubInstanceWithOptions(request: RemoveSubInstanceRequest, runtime: $Util.RuntimeOptions): Promise<RemoveSubInstanceResponse>;
    /**
      * The operation that you want to perform. Set the value to **RemoveSubInstance**.
      *
      * @param request RemoveSubInstanceRequest
      * @return RemoveSubInstanceResponse
     */
    removeSubInstance(request: RemoveSubInstanceRequest): Promise<RemoveSubInstanceResponse>;
    /**
      * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
      * You can adjust the bandwidth of an instance in the ApsaraDB for Redis console. For more information, see [Adjust the bandwidth of an ApsaraDB for Redis instance](~~102588~~). You can also call the [EnableAdditionalBandwidth](~~206173~~) operation to adjust the bandwidth of an instance. If you want to continue using the bandwidth that you purchase after the validity period of the bandwidth, you must call the RenewAdditionalBandwidth operation to renew the bandwidth before the bandwidth expires.
      * > Before you call this operation, you can call the [DescribeIntranetAttribute](~~128715~~) operation, which returns the expiration time of the purchased bandwidth in the **BandwidthExpireTime** parameter.
      *
      * @param request RenewAdditionalBandwidthRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RenewAdditionalBandwidthResponse
     */
    renewAdditionalBandwidthWithOptions(request: RenewAdditionalBandwidthRequest, runtime: $Util.RuntimeOptions): Promise<RenewAdditionalBandwidthResponse>;
    /**
      * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
      * You can adjust the bandwidth of an instance in the ApsaraDB for Redis console. For more information, see [Adjust the bandwidth of an ApsaraDB for Redis instance](~~102588~~). You can also call the [EnableAdditionalBandwidth](~~206173~~) operation to adjust the bandwidth of an instance. If you want to continue using the bandwidth that you purchase after the validity period of the bandwidth, you must call the RenewAdditionalBandwidth operation to renew the bandwidth before the bandwidth expires.
      * > Before you call this operation, you can call the [DescribeIntranetAttribute](~~128715~~) operation, which returns the expiration time of the purchased bandwidth in the **BandwidthExpireTime** parameter.
      *
      * @param request RenewAdditionalBandwidthRequest
      * @return RenewAdditionalBandwidthResponse
     */
    renewAdditionalBandwidth(request: RenewAdditionalBandwidthRequest): Promise<RenewAdditionalBandwidthResponse>;
    /**
      * This operation is applicable only to subscription instances.
      *
      * @param request RenewInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RenewInstanceResponse
     */
    renewInstanceWithOptions(request: RenewInstanceRequest, runtime: $Util.RuntimeOptions): Promise<RenewInstanceResponse>;
    /**
      * This operation is applicable only to subscription instances.
      *
      * @param request RenewInstanceRequest
      * @return RenewInstanceResponse
     */
    renewInstance(request: RenewInstanceRequest): Promise<RenewInstanceResponse>;
    /**
      * >  Only ApsaraDB for Redis instances of Redis 4.0 or later are supported.
      *
      * @param request ResetAccountPasswordRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ResetAccountPasswordResponse
     */
    resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: $Util.RuntimeOptions): Promise<ResetAccountPasswordResponse>;
    /**
      * >  Only ApsaraDB for Redis instances of Redis 4.0 or later are supported.
      *
      * @param request ResetAccountPasswordRequest
      * @return ResetAccountPasswordResponse
     */
    resetAccountPassword(request: ResetAccountPasswordRequest): Promise<ResetAccountPasswordResponse>;
    restartInstanceWithOptions(request: RestartInstanceRequest, runtime: $Util.RuntimeOptions): Promise<RestartInstanceResponse>;
    restartInstance(request: RestartInstanceRequest): Promise<RestartInstanceResponse>;
    /**
      * *   If your instance is a [persistent memory-optimized instance](~~443828~~) or [DRAM-based instance](~~443827~~) that is compatible with Redis 5.0 and the [data flashback](~~443784~~) feature is enabled, you can call this operation to restore the data of a specified key to a specified point in time that is accurate to the second. Other keys are not affected. This way, you can achieve more fine-grained data restoration.
      * *   For other instance series, this operation overwrites the existing data of your instance with the backup data. Proceed with caution. We recommend that you call the [CreateInstance](~~60873~~) operation to create an instance. Then, you can restore data to the new instance.
      *
      * @param request RestoreInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RestoreInstanceResponse
     */
    restoreInstanceWithOptions(request: RestoreInstanceRequest, runtime: $Util.RuntimeOptions): Promise<RestoreInstanceResponse>;
    /**
      * *   If your instance is a [persistent memory-optimized instance](~~443828~~) or [DRAM-based instance](~~443827~~) that is compatible with Redis 5.0 and the [data flashback](~~443784~~) feature is enabled, you can call this operation to restore the data of a specified key to a specified point in time that is accurate to the second. Other keys are not affected. This way, you can achieve more fine-grained data restoration.
      * *   For other instance series, this operation overwrites the existing data of your instance with the backup data. Proceed with caution. We recommend that you call the [CreateInstance](~~60873~~) operation to create an instance. Then, you can restore data to the new instance.
      *
      * @param request RestoreInstanceRequest
      * @return RestoreInstanceResponse
     */
    restoreInstance(request: RestoreInstanceRequest): Promise<RestoreInstanceResponse>;
    /**
      * > For more information about nearby access to applications that are deployed across zones, see [Switch node roles](~~164222~~).
      * The instance must be an ApsaraDB for Redis Community Edition instance or Enhanced Edition (Tair) [DRAM-based](~~126164~~) instance that uses local disks.
      * A call to this operation has the following impacts on your instance:
      * *   The data shards in the instance may change to the read-only state and experience transient connections within seconds. Make sure that your application is configured to automatically reconnect to the instance.
      * *   If the instance enters the switching state, you cannot manage this instance. For example, you cannot modify the instance configurations or migrate the instance to another zone.
      *
      * @param request SwitchInstanceHARequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SwitchInstanceHAResponse
     */
    switchInstanceHAWithOptions(request: SwitchInstanceHARequest, runtime: $Util.RuntimeOptions): Promise<SwitchInstanceHAResponse>;
    /**
      * > For more information about nearby access to applications that are deployed across zones, see [Switch node roles](~~164222~~).
      * The instance must be an ApsaraDB for Redis Community Edition instance or Enhanced Edition (Tair) [DRAM-based](~~126164~~) instance that uses local disks.
      * A call to this operation has the following impacts on your instance:
      * *   The data shards in the instance may change to the read-only state and experience transient connections within seconds. Make sure that your application is configured to automatically reconnect to the instance.
      * *   If the instance enters the switching state, you cannot manage this instance. For example, you cannot modify the instance configurations or migrate the instance to another zone.
      *
      * @param request SwitchInstanceHARequest
      * @return SwitchInstanceHAResponse
     */
    switchInstanceHA(request: SwitchInstanceHARequest): Promise<SwitchInstanceHAResponse>;
    /**
      * For more information about the proxy mode, see [Features of proxy nodes](~~142959~~). Before you call this operation, make sure that the following requirements are met:
      * *   Your ApsaraDB for Redis instance is created by using a dedicated cluster. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
      * *   The instance uses the cluster architecture. For more information about the cluster architecture, see [Cluster master-replica instances](~~52228~~).
      * > Before you call the SwitchInstanceProxy operation, you must call the [DescribeDedicatedClusterInstanceList](~~229522~~) operation and view the value of the **ProxyCount** response parameter to check whether the proxy mode is enabled. A value of 0 indicates that the proxy mode is disabled. A value that is greater than 0 indicates that the proxy mode is enabled.
      *
      * @param request SwitchInstanceProxyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SwitchInstanceProxyResponse
     */
    switchInstanceProxyWithOptions(request: SwitchInstanceProxyRequest, runtime: $Util.RuntimeOptions): Promise<SwitchInstanceProxyResponse>;
    /**
      * For more information about the proxy mode, see [Features of proxy nodes](~~142959~~). Before you call this operation, make sure that the following requirements are met:
      * *   Your ApsaraDB for Redis instance is created by using a dedicated cluster. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
      * *   The instance uses the cluster architecture. For more information about the cluster architecture, see [Cluster master-replica instances](~~52228~~).
      * > Before you call the SwitchInstanceProxy operation, you must call the [DescribeDedicatedClusterInstanceList](~~229522~~) operation and view the value of the **ProxyCount** response parameter to check whether the proxy mode is enabled. A value of 0 indicates that the proxy mode is disabled. A value that is greater than 0 indicates that the proxy mode is enabled.
      *
      * @param request SwitchInstanceProxyRequest
      * @return SwitchInstanceProxyResponse
     */
    switchInstanceProxy(request: SwitchInstanceProxyRequest): Promise<SwitchInstanceProxyResponse>;
    switchNetworkWithOptions(request: SwitchNetworkRequest, runtime: $Util.RuntimeOptions): Promise<SwitchNetworkResponse>;
    switchNetwork(request: SwitchNetworkRequest): Promise<SwitchNetworkResponse>;
    syncDtsStatusWithOptions(request: SyncDtsStatusRequest, runtime: $Util.RuntimeOptions): Promise<SyncDtsStatusResponse>;
    syncDtsStatus(request: SyncDtsStatusRequest): Promise<SyncDtsStatusResponse>;
    /**
      * If you have a large number of instances, you can create multiple tags and add these tags to the instances. Then, you can filter instances by tag.
      * *   A tag consists of a key and a value. Each key must be unique in a region for an Alibaba Cloud account. Different keys can be mapped to the same value.
      * *   If the tag that you specify does not exist, this tag is automatically created and added to the specified instance.
      * *   If the key of the specified tag is the same as that of an existing tag, the specified tag overwrites the existing tag.
      * *   You can add up to 20 tags to each instance.
      * *   You can add tags to up to 50 instances in each request.
      * You can also add tags to instances in the ApsaraDB for Redis console. For more information, see [Create a tag](~~118779~~).
      *
      * @param request TagResourcesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return TagResourcesResponse
     */
    tagResourcesWithOptions(request: TagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<TagResourcesResponse>;
    /**
      * If you have a large number of instances, you can create multiple tags and add these tags to the instances. Then, you can filter instances by tag.
      * *   A tag consists of a key and a value. Each key must be unique in a region for an Alibaba Cloud account. Different keys can be mapped to the same value.
      * *   If the tag that you specify does not exist, this tag is automatically created and added to the specified instance.
      * *   If the key of the specified tag is the same as that of an existing tag, the specified tag overwrites the existing tag.
      * *   You can add up to 20 tags to each instance.
      * *   You can add tags to up to 50 instances in each request.
      * You can also add tags to instances in the ApsaraDB for Redis console. For more information, see [Create a tag](~~118779~~).
      *
      * @param request TagResourcesRequest
      * @return TagResourcesResponse
     */
    tagResources(request: TagResourcesRequest): Promise<TagResourcesResponse>;
    /**
      * Before you call this operation, make sure that you understand relevant precautions and billing rules. For more information, see the following topics:
      * *   [Change the billing method to subscription](~~54542~~).
      * *   [Change the billing method to pay-as-you-go](~~211549~~).
      *
      * @param request TransformInstanceChargeTypeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return TransformInstanceChargeTypeResponse
     */
    transformInstanceChargeTypeWithOptions(request: TransformInstanceChargeTypeRequest, runtime: $Util.RuntimeOptions): Promise<TransformInstanceChargeTypeResponse>;
    /**
      * Before you call this operation, make sure that you understand relevant precautions and billing rules. For more information, see the following topics:
      * *   [Change the billing method to subscription](~~54542~~).
      * *   [Change the billing method to pay-as-you-go](~~211549~~).
      *
      * @param request TransformInstanceChargeTypeRequest
      * @return TransformInstanceChargeTypeResponse
     */
    transformInstanceChargeType(request: TransformInstanceChargeTypeRequest): Promise<TransformInstanceChargeTypeResponse>;
    /**
      * For more information about how to change the billing method in the ApsaraDB for Redis console, see [Switch to subscription](~~54542~~).
      * >  You cannot change the billing method of an ApsaraDB for Redis instance from subscription to pay-as-you-go.
      *
      * @param request TransformToPrePaidRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return TransformToPrePaidResponse
     */
    transformToPrePaidWithOptions(request: TransformToPrePaidRequest, runtime: $Util.RuntimeOptions): Promise<TransformToPrePaidResponse>;
    /**
      * For more information about how to change the billing method in the ApsaraDB for Redis console, see [Switch to subscription](~~54542~~).
      * >  You cannot change the billing method of an ApsaraDB for Redis instance from subscription to pay-as-you-go.
      *
      * @param request TransformToPrePaidRequest
      * @return TransformToPrePaidResponse
     */
    transformToPrePaid(request: TransformToPrePaidRequest): Promise<TransformToPrePaidResponse>;
    unlockDBInstanceWriteWithOptions(request: UnlockDBInstanceWriteRequest, runtime: $Util.RuntimeOptions): Promise<UnlockDBInstanceWriteResponse>;
    unlockDBInstanceWrite(request: UnlockDBInstanceWriteRequest): Promise<UnlockDBInstanceWriteResponse>;
    /**
      * *   You can remove up to 20 tags at a time.
      * *   If a tag is removed from an instance and is not added to other instances, the tag is deleted.
      * You can also remove tags from instances in the ApsaraDB for Redis console. For more information, see [Remove a tag](~~119157~~).
      *
      * @param request UntagResourcesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UntagResourcesResponse
     */
    untagResourcesWithOptions(request: UntagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<UntagResourcesResponse>;
    /**
      * *   You can remove up to 20 tags at a time.
      * *   If a tag is removed from an instance and is not added to other instances, the tag is deleted.
      * You can also remove tags from instances in the ApsaraDB for Redis console. For more information, see [Remove a tag](~~119157~~).
      *
      * @param request UntagResourcesRequest
      * @return UntagResourcesResponse
     */
    untagResources(request: UntagResourcesRequest): Promise<UntagResourcesResponse>;
}
