/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class ActivateMigrationTargetInstanceRequest extends $tea.Model {
    DBInstanceName?: string;
    forceSwitch?: string;
    resourceOwnerId?: number;
    switchTime?: string;
    switchTimeMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ActivateMigrationTargetInstanceResponseBody extends $tea.Model {
    DBInstanceName?: string;
    requestId?: string;
    sourceIpAddress?: string;
    sourcePort?: number;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ActivateMigrationTargetInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ActivateMigrationTargetInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTagsToResourceRequest extends $tea.Model {
    tag?: AddTagsToResourceRequestTag[];
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    tags?: string;
    proxyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTagsToResourceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTagsToResourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddTagsToResourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateInstancePublicConnectionRequest extends $tea.Model {
    babelfishPort?: string;
    connectionStringPrefix?: string;
    DBInstanceId?: string;
    generalGroupName?: string;
    ownerAccount?: string;
    ownerId?: number;
    PGBouncerPort?: string;
    port?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateInstancePublicConnectionResponseBody extends $tea.Model {
    connectionString?: string;
    dbInstanceName?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateInstancePublicConnectionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AllocateInstancePublicConnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateReadWriteSplittingConnectionRequest extends $tea.Model {
    connectionStringPrefix?: string;
    DBInstanceId?: string;
    distributionType?: string;
    maxDelayTime?: string;
    netType?: string;
    ownerAccount?: string;
    ownerId?: number;
    port?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    weight?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateReadWriteSplittingConnectionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AllocateReadWriteSplittingConnectionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AllocateReadWriteSplittingConnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachWhitelistTemplateToInstanceRequest extends $tea.Model {
    insName?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachWhitelistTemplateToInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: AttachWhitelistTemplateToInstanceResponseBodyData;
    httpStatusCode?: number;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachWhitelistTemplateToInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AttachWhitelistTemplateToInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CalculateDBInstanceWeightRequest extends $tea.Model {
    DBInstanceId?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CalculateDBInstanceWeightResponseBody extends $tea.Model {
    items?: CalculateDBInstanceWeightResponseBodyItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CalculateDBInstanceWeightResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CalculateDBInstanceWeightResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelImportRequest extends $tea.Model {
    DBInstanceId?: string;
    importId?: number;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelImportResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelImportResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CancelImportResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckAccountNameAvailableRequest extends $tea.Model {
    accountName?: string;
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckAccountNameAvailableResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckAccountNameAvailableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CheckAccountNameAvailableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCloudResourceAuthorizedRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    targetRegionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCloudResourceAuthorizedResponseBody extends $tea.Model {
    authorizationState?: number;
    requestId?: string;
    roleArn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCloudResourceAuthorizedResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CheckCloudResourceAuthorizedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCreateDdrDBInstanceRequest extends $tea.Model {
    backupSetId?: string;
    DBInstanceClass?: string;
    DBInstanceStorage?: number;
    engine?: string;
    engineVersion?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    restoreTime?: string;
    restoreType?: string;
    sourceDBInstanceName?: string;
    sourceRegion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCreateDdrDBInstanceResponseBody extends $tea.Model {
    isValid?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCreateDdrDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CheckCreateDdrDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckDBNameAvailableRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    DBName?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckDBNameAvailableResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckDBNameAvailableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CheckDBNameAvailableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckInstanceExistRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckInstanceExistResponseBody extends $tea.Model {
    isExistInstance?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckInstanceExistResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CheckInstanceExistResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckServiceLinkedRoleRequest extends $tea.Model {
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    serviceLinkedRole?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckServiceLinkedRoleResponseBody extends $tea.Model {
    hasServiceLinkedRole?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckServiceLinkedRoleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CheckServiceLinkedRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloneDBInstanceRequest extends $tea.Model {
    autoPay?: boolean;
    backupId?: string;
    backupType?: string;
    bpeEnabled?: string;
    burstingEnabled?: boolean;
    category?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    dbNames?: string;
    dedicatedHostGroupId?: string;
    deletionProtection?: boolean;
    instanceNetworkType?: string;
    payType?: string;
    period?: string;
    privateIpAddress?: string;
    regionId?: string;
    resourceOwnerId?: number;
    restoreTable?: string;
    restoreTime?: string;
    serverlessConfig?: CloneDBInstanceRequestServerlessConfig;
    tableMeta?: string;
    usedTime?: number;
    VPCId?: string;
    vSwitchId?: string;
    zoneId?: string;
    zoneIdSlave1?: string;
    zoneIdSlave2?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloneDBInstanceShrinkRequest extends $tea.Model {
    autoPay?: boolean;
    backupId?: string;
    backupType?: string;
    bpeEnabled?: string;
    burstingEnabled?: boolean;
    category?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    dbNames?: string;
    dedicatedHostGroupId?: string;
    deletionProtection?: boolean;
    instanceNetworkType?: string;
    payType?: string;
    period?: string;
    privateIpAddress?: string;
    regionId?: string;
    resourceOwnerId?: number;
    restoreTable?: string;
    restoreTime?: string;
    serverlessConfigShrink?: string;
    tableMeta?: string;
    usedTime?: number;
    VPCId?: string;
    vSwitchId?: string;
    zoneId?: string;
    zoneIdSlave1?: string;
    zoneIdSlave2?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloneDBInstanceResponseBody extends $tea.Model {
    DBInstanceId?: string;
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloneDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CloneDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloneParameterGroupRequest extends $tea.Model {
    ownerId?: number;
    parameterGroupDesc?: string;
    parameterGroupId?: string;
    parameterGroupName?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    targetRegionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloneParameterGroupResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloneParameterGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CloneParameterGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmNotifyRequest extends $tea.Model {
    confirmor?: number;
    notifyIdList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmNotifyShrinkRequest extends $tea.Model {
    confirmor?: number;
    notifyIdListShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmNotifyResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmNotifyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ConfirmNotifyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDatabaseRequest extends $tea.Model {
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDatabaseResponseBody extends $tea.Model {
    DBName?: string;
    DBStatus?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDatabaseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CopyDatabaseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDatabaseBetweenInstancesRequest extends $tea.Model {
    backupId?: string;
    DBInstanceId?: string;
    dbNames?: string;
    resourceOwnerId?: number;
    restoreTime?: string;
    syncUserPrivilege?: string;
    targetDBInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDatabaseBetweenInstancesResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDatabaseBetweenInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CopyDatabaseBetweenInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAccountRequest extends $tea.Model {
    accountDescription?: string;
    accountName?: string;
    accountPassword?: string;
    accountType?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAccountResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAccountResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBackupRequest extends $tea.Model {
    backupMethod?: string;
    backupStrategy?: string;
    backupType?: string;
    DBInstanceId?: string;
    DBName?: string;
    resourceGroupId?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBackupResponseBody extends $tea.Model {
    backupJobId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBackupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateBackupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudMigrationPrecheckTaskRequest extends $tea.Model {
    DBInstanceName?: string;
    resourceOwnerId?: number;
    sourceAccount?: string;
    sourceCategory?: string;
    sourceIpAddress?: string;
    sourcePassword?: string;
    sourcePort?: number;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudMigrationPrecheckTaskResponseBody extends $tea.Model {
    DBInstanceName?: string;
    requestId?: string;
    taskId?: number;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudMigrationPrecheckTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateCloudMigrationPrecheckTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudMigrationTaskRequest extends $tea.Model {
    DBInstanceName?: string;
    resourceOwnerId?: number;
    sourceAccount?: string;
    sourceCategory?: string;
    sourceIpAddress?: string;
    sourcePassword?: string;
    sourcePort?: number;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudMigrationTaskResponseBody extends $tea.Model {
    DBInstanceName?: string;
    requestId?: string;
    taskId?: number;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudMigrationTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateCloudMigrationTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceRequest extends $tea.Model {
    amount?: number;
    autoPay?: boolean;
    autoRenew?: string;
    babelfishConfig?: string;
    bpeEnabled?: string;
    burstingEnabled?: boolean;
    businessInfo?: string;
    category?: string;
    clientToken?: string;
    connectionMode?: string;
    connectionString?: string;
    createStrategy?: string;
    DBInstanceClass?: string;
    DBInstanceDescription?: string;
    DBInstanceNetType?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    DBIsIgnoreCase?: string;
    DBParamGroupId?: string;
    DBTimeZone?: string;
    dedicatedHostGroupId?: string;
    deletionProtection?: boolean;
    dryRun?: boolean;
    encryptionKey?: string;
    engine?: string;
    engineVersion?: string;
    instanceNetworkType?: string;
    payType?: string;
    period?: string;
    port?: string;
    privateIpAddress?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerId?: number;
    roleARN?: string;
    securityIPList?: string;
    serverlessConfig?: CreateDBInstanceRequestServerlessConfig;
    storageAutoScale?: string;
    storageThreshold?: number;
    storageUpperBound?: number;
    systemDBCharset?: string;
    tag?: CreateDBInstanceRequestTag[];
    targetDedicatedHostIdForLog?: string;
    targetDedicatedHostIdForMaster?: string;
    targetDedicatedHostIdForSlave?: string;
    targetMinorVersion?: string;
    usedTime?: string;
    userBackupId?: string;
    VPCId?: string;
    vSwitchId?: string;
    zoneId?: string;
    zoneIdSlave1?: string;
    zoneIdSlave2?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceShrinkRequest extends $tea.Model {
    amount?: number;
    autoPay?: boolean;
    autoRenew?: string;
    babelfishConfig?: string;
    bpeEnabled?: string;
    burstingEnabled?: boolean;
    businessInfo?: string;
    category?: string;
    clientToken?: string;
    connectionMode?: string;
    connectionString?: string;
    createStrategy?: string;
    DBInstanceClass?: string;
    DBInstanceDescription?: string;
    DBInstanceNetType?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    DBIsIgnoreCase?: string;
    DBParamGroupId?: string;
    DBTimeZone?: string;
    dedicatedHostGroupId?: string;
    deletionProtection?: boolean;
    dryRun?: boolean;
    encryptionKey?: string;
    engine?: string;
    engineVersion?: string;
    instanceNetworkType?: string;
    payType?: string;
    period?: string;
    port?: string;
    privateIpAddress?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerId?: number;
    roleARN?: string;
    securityIPList?: string;
    serverlessConfigShrink?: string;
    storageAutoScale?: string;
    storageThreshold?: number;
    storageUpperBound?: number;
    systemDBCharset?: string;
    tag?: CreateDBInstanceShrinkRequestTag[];
    targetDedicatedHostIdForLog?: string;
    targetDedicatedHostIdForMaster?: string;
    targetDedicatedHostIdForSlave?: string;
    targetMinorVersion?: string;
    usedTime?: string;
    userBackupId?: string;
    VPCId?: string;
    vSwitchId?: string;
    zoneId?: string;
    zoneIdSlave1?: string;
    zoneIdSlave2?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceResponseBody extends $tea.Model {
    connectionString?: string;
    DBInstanceId?: string;
    dryRun?: boolean;
    dryRunResult?: boolean;
    message?: string;
    orderId?: string;
    port?: string;
    requestId?: string;
    tagResult?: boolean;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceEndpointRequest extends $tea.Model {
    clientToken?: string;
    connectionStringPrefix?: string;
    DBInstanceEndpointDescription?: string;
    DBInstanceEndpointType?: string;
    DBInstanceId?: string;
    nodeItems?: CreateDBInstanceEndpointRequestNodeItems[];
    port?: string;
    privateIpAddress?: string;
    resourceGroupId?: string;
    resourceOwnerId?: number;
    vSwitchId?: string;
    vpcId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceEndpointShrinkRequest extends $tea.Model {
    clientToken?: string;
    connectionStringPrefix?: string;
    DBInstanceEndpointDescription?: string;
    DBInstanceEndpointType?: string;
    DBInstanceId?: string;
    nodeItemsShrink?: string;
    port?: string;
    privateIpAddress?: string;
    resourceGroupId?: string;
    resourceOwnerId?: number;
    vSwitchId?: string;
    vpcId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceEndpointResponseBody extends $tea.Model {
    data?: CreateDBInstanceEndpointResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceEndpointResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDBInstanceEndpointResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceEndpointAddressRequest extends $tea.Model {
    clientToken?: string;
    connectionStringPrefix?: string;
    DBInstanceEndpointId?: string;
    DBInstanceId?: string;
    ipType?: string;
    port?: string;
    resourceGroupId?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceEndpointAddressResponseBody extends $tea.Model {
    data?: CreateDBInstanceEndpointAddressResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceEndpointAddressResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDBInstanceEndpointAddressResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceForRebuildRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceDescription?: string;
    DBInstanceId?: string;
    DBInstanceNetType?: string;
    instanceNetworkType?: string;
    ownerAccount?: string;
    ownerId?: number;
    payType?: string;
    period?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityIPList?: string;
    securityToken?: string;
    usedTime?: string;
    VPCId?: string;
    vSwitchId?: string;
    zoneId?: string;
    zoneIdSlave1?: string;
    zoneIdSlave2?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceForRebuildResponseBody extends $tea.Model {
    DBInstanceId?: string;
    message?: string;
    orderId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceForRebuildResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDBInstanceForRebuildResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBNodesRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    DBNode?: CreateDBNodesRequestDBNode[];
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBNodesShrinkRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    DBNodeShrink?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBNodesResponseBody extends $tea.Model {
    DBInstanceId?: string;
    nodeIds?: string;
    orderId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDBNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBProxyEndpointAddressRequest extends $tea.Model {
    connectionStringPrefix?: string;
    DBInstanceId?: string;
    DBProxyConnectStringNetType?: string;
    DBProxyEndpointId?: string;
    DBProxyEngineType?: string;
    DBProxyNewConnectStringPort?: string;
    regionId?: string;
    resourceGroupId?: string;
    VPCId?: string;
    vSwitchId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBProxyEndpointAddressResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBProxyEndpointAddressResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDBProxyEndpointAddressResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDatabaseRequest extends $tea.Model {
    characterSetName?: string;
    DBDescription?: string;
    DBInstanceId?: string;
    DBName?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDatabaseResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDatabaseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDatabaseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDdrInstanceRequest extends $tea.Model {
    backupSetId?: string;
    clientToken?: string;
    connectionMode?: string;
    DBInstanceClass?: string;
    DBInstanceDescription?: string;
    DBInstanceNetType?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    engine?: string;
    engineVersion?: string;
    instanceNetworkType?: string;
    ownerAccount?: string;
    ownerId?: number;
    payType?: string;
    period?: string;
    privateIpAddress?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    restoreTime?: string;
    restoreType?: string;
    securityIPList?: string;
    sourceDBInstanceName?: string;
    sourceRegion?: string;
    systemDBCharset?: string;
    usedTime?: string;
    VPCId?: string;
    vSwitchId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDdrInstanceResponseBody extends $tea.Model {
    connectionString?: string;
    DBInstanceId?: string;
    orderId?: string;
    port?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDdrInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDdrInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDiagnosticReportRequest extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDiagnosticReportResponseBody extends $tea.Model {
    reportId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDiagnosticReportResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDiagnosticReportResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGADInstanceRequest extends $tea.Model {
    centralDBInstanceId?: string;
    centralRdsDtsAdminAccount?: string;
    centralRdsDtsAdminPassword?: string;
    centralRegionId?: string;
    DBList?: string;
    description?: string;
    resourceGroupId?: string;
    tag?: CreateGADInstanceRequestTag[];
    unitNode?: CreateGADInstanceRequestUnitNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGADInstanceResponseBody extends $tea.Model {
    requestId?: string;
    result?: CreateGADInstanceResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGADInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateGADInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGadInstanceMemberRequest extends $tea.Model {
    centralDBInstanceId?: string;
    centralRdsDtsAdminAccount?: string;
    centralRdsDtsAdminPassword?: string;
    centralRegionId?: string;
    DBList?: string;
    gadInstanceId?: string;
    unitNode?: CreateGadInstanceMemberRequestUnitNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGadInstanceMemberResponseBody extends $tea.Model {
    requestId?: string;
    result?: CreateGadInstanceMemberResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGadInstanceMemberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateGadInstanceMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMigrateTaskRequest extends $tea.Model {
    backupMode?: string;
    checkDBMode?: string;
    DBInstanceId?: string;
    DBName?: string;
    isOnlineDB?: string;
    migrateTaskId?: string;
    OSSUrls?: string;
    ossObjectPositions?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMigrateTaskResponseBody extends $tea.Model {
    backupMode?: string;
    DBInstanceId?: string;
    DBName?: string;
    migrateTaskId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMigrateTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateMigrateTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOnlineDatabaseTaskRequest extends $tea.Model {
    checkDBMode?: string;
    clientToken?: string;
    DBInstanceId?: string;
    DBName?: string;
    migrateTaskId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOnlineDatabaseTaskResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOnlineDatabaseTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOnlineDatabaseTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderForCreateDBNodesRequest extends $tea.Model {
    autoPay?: boolean;
    businessInfo?: string;
    clientToken?: string;
    commodityCode?: string;
    DBInstanceId?: string;
    DBNode?: CreateOrderForCreateDBNodesRequestDBNode[];
    engineVersion?: string;
    nodeType?: string;
    ownerId?: number;
    promotionCode?: string;
    regionId?: string;
    resource?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderForCreateDBNodesShrinkRequest extends $tea.Model {
    autoPay?: boolean;
    businessInfo?: string;
    clientToken?: string;
    commodityCode?: string;
    DBInstanceId?: string;
    DBNodeShrink?: string;
    engineVersion?: string;
    nodeType?: string;
    ownerId?: number;
    promotionCode?: string;
    regionId?: string;
    resource?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderForCreateDBNodesResponseBody extends $tea.Model {
    DBInstanceId?: string;
    orderId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderForCreateDBNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOrderForCreateDBNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderForDeleteDBNodesRequest extends $tea.Model {
    autoPay?: boolean;
    businessInfo?: string;
    clientToken?: string;
    commodityCode?: string;
    DBInstanceId?: string;
    DBNodeId?: string[];
    engineVersion?: string;
    nodeType?: string;
    ownerId?: number;
    promotionCode?: string;
    regionId?: string;
    resource?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderForDeleteDBNodesShrinkRequest extends $tea.Model {
    autoPay?: boolean;
    businessInfo?: string;
    clientToken?: string;
    commodityCode?: string;
    DBInstanceId?: string;
    DBNodeIdShrink?: string;
    engineVersion?: string;
    nodeType?: string;
    ownerId?: number;
    promotionCode?: string;
    regionId?: string;
    resource?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderForDeleteDBNodesResponseBody extends $tea.Model {
    DBInstanceId?: string;
    orderId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderForDeleteDBNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOrderForDeleteDBNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateParameterGroupRequest extends $tea.Model {
    engine?: string;
    engineVersion?: string;
    ownerId?: number;
    parameterGroupDesc?: string;
    parameterGroupName?: string;
    parameters?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateParameterGroupResponseBody extends $tea.Model {
    parameterGroupId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateParameterGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateParameterGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePostgresExtensionsRequest extends $tea.Model {
    accountName?: string;
    clientToken?: string;
    DBInstanceId?: string;
    DBNames?: string;
    extensions?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    sourceDatabase?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePostgresExtensionsResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePostgresExtensionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreatePostgresExtensionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateReadOnlyDBInstanceRequest extends $tea.Model {
    autoPay?: boolean;
    autoRenew?: string;
    bpeEnabled?: string;
    burstingEnabled?: boolean;
    category?: string;
    clientToken?: string;
    DBInstanceClass?: string;
    DBInstanceDescription?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    dedicatedHostGroupId?: string;
    deletionProtection?: boolean;
    engineVersion?: string;
    gdnInstanceName?: string;
    instanceNetworkType?: string;
    instructionSetArch?: string;
    ownerAccount?: string;
    ownerId?: number;
    payType?: string;
    period?: string;
    port?: string;
    privateIpAddress?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    targetDedicatedHostIdForMaster?: string;
    tddlBizType?: string;
    tddlRegionConfig?: string;
    usedTime?: string;
    VPCId?: string;
    vSwitchId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateReadOnlyDBInstanceResponseBody extends $tea.Model {
    connectionString?: string;
    DBInstanceId?: string;
    orderId?: string;
    port?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateReadOnlyDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateReadOnlyDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSecretRequest extends $tea.Model {
    clientToken?: string;
    dbInstanceId?: string;
    dbNames?: string;
    description?: string;
    engine?: string;
    ownerId?: number;
    password?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    secretName?: string;
    username?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSecretResponseBody extends $tea.Model {
    requestId?: string;
    secretArn?: string;
    secretName?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSecretResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateSecretResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateServiceLinkedRoleRequest extends $tea.Model {
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    serviceLinkedRole?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateServiceLinkedRoleResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateServiceLinkedRoleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateServiceLinkedRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTempDBInstanceRequest extends $tea.Model {
    backupId?: number;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    restoreTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTempDBInstanceResponseBody extends $tea.Model {
    requestId?: string;
    tempDBInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTempDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateTempDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateYouhuiForOrderRequest extends $tea.Model {
    activityId?: number;
    ownerId?: string;
    promotionId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateYouhuiForOrderResponseBody extends $tea.Model {
    message?: string;
    requestId?: string;
    youhuiId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateYouhuiForOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateYouhuiForOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteADSettingRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteADSettingResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteADSettingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteADSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAccountRequest extends $tea.Model {
    accountName?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAccountResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAccountResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBackupRequest extends $tea.Model {
    backupId?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBackupResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBackupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteBackupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBackupFileRequest extends $tea.Model {
    backupId?: string;
    backupTime?: string;
    DBInstanceId?: string;
    DBName?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBackupFileResponseBody extends $tea.Model {
    deletedBaksetIds?: DeleteBackupFileResponseBodyDeletedBaksetIds;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBackupFileResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteBackupFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBInstanceRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    releasedKeepPolicy?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBInstanceResponseBody extends $tea.Model {
    regionId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBInstanceEndpointRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceEndpointId?: string;
    DBInstanceId?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBInstanceEndpointResponseBody extends $tea.Model {
    data?: DeleteDBInstanceEndpointResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBInstanceEndpointResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDBInstanceEndpointResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBInstanceEndpointAddressRequest extends $tea.Model {
    clientToken?: string;
    connectionString?: string;
    DBInstanceEndpointId?: string;
    DBInstanceId?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBInstanceEndpointAddressResponseBody extends $tea.Model {
    data?: DeleteDBInstanceEndpointAddressResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBInstanceEndpointAddressResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDBInstanceEndpointAddressResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBNodesRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    DBNodeId?: string[];
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBNodesShrinkRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    DBNodeIdShrink?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBNodesResponseBody extends $tea.Model {
    DBInstanceId?: string;
    orderId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDBNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBProxyEndpointAddressRequest extends $tea.Model {
    DBInstanceId?: string;
    DBProxyConnectStringNetType?: string;
    DBProxyEndpointId?: string;
    DBProxyEngineType?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBProxyEndpointAddressResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBProxyEndpointAddressResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDBProxyEndpointAddressResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDatabaseRequest extends $tea.Model {
    DBInstanceId?: string;
    DBName?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDatabaseResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDatabaseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDatabaseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGadInstanceRequest extends $tea.Model {
    gadInstanceName?: string;
    regionId?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGadInstanceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGadInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteGadInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteParameterGroupRequest extends $tea.Model {
    ownerId?: number;
    parameterGroupId?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteParameterGroupResponseBody extends $tea.Model {
    parameterGroupId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteParameterGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteParameterGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePostgresExtensionsRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    DBNames?: string;
    extensions?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePostgresExtensionsResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePostgresExtensionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeletePostgresExtensionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSecretRequest extends $tea.Model {
    clientToken?: string;
    dbInstanceId?: string;
    engine?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    secretArn?: string;
    secretName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSecretResponseBody extends $tea.Model {
    requestId?: string;
    secretArn?: string;
    secretName?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSecretResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSecretResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSlotRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    slotName?: string;
    slotStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSlotResponseBody extends $tea.Model {
    requestId?: string;
    slotName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSlotResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSlotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUserBackupFileRequest extends $tea.Model {
    backupId?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUserBackupFileResponseBody extends $tea.Model {
    backupId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUserBackupFileResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteUserBackupFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescibeImportsFromDatabaseRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    endTime?: string;
    engine?: string;
    importId?: number;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescibeImportsFromDatabaseResponseBody extends $tea.Model {
    items?: DescibeImportsFromDatabaseResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescibeImportsFromDatabaseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescibeImportsFromDatabaseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeADInfoRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeADInfoResponseBody extends $tea.Model {
    ADDNS?: string;
    ADServerIpAddress?: string;
    ADStatus?: string;
    abnormalReason?: string;
    requestId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeADInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeADInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsRequest extends $tea.Model {
    accountName?: string;
    DBInstanceId?: string;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponseBody extends $tea.Model {
    accounts?: DescribeAccountsResponseBodyAccounts;
    pageNumber?: number;
    requestId?: string;
    systemAdminAccountFirstActivationTime?: string;
    systemAdminAccountStatus?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeAccountsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeActionEventPolicyRequest extends $tea.Model {
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeActionEventPolicyResponseBody extends $tea.Model {
    enableEventLog?: string;
    regionId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeActionEventPolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeActionEventPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeActiveOperationTasksRequest extends $tea.Model {
    allowCancel?: number;
    allowChange?: number;
    changeLevel?: string;
    dbType?: string;
    insName?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    productId?: string;
    region?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    status?: number;
    taskType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeActiveOperationTasksResponseBody extends $tea.Model {
    items?: DescribeActiveOperationTasksResponseBodyItems[];
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeActiveOperationTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeActiveOperationTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAllWhitelistTemplateRequest extends $tea.Model {
    fuzzySearch?: boolean;
    maxRecordsPerPage?: number;
    pageNumbers?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAllWhitelistTemplateResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeAllWhitelistTemplateResponseBodyData;
    httpStatusCode?: number;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAllWhitelistTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeAllWhitelistTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAnalyticdbByPrimaryDBInstanceRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAnalyticdbByPrimaryDBInstanceResponseBody extends $tea.Model {
    analyticDBCount?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAnalyticdbByPrimaryDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeAnalyticdbByPrimaryDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableClassesRequest extends $tea.Model {
    category?: string;
    commodityCode?: string;
    DBInstanceId?: string;
    DBInstanceStorageType?: string;
    engine?: string;
    engineVersion?: string;
    instanceChargeType?: string;
    orderType?: string;
    regionId?: string;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableClassesResponseBody extends $tea.Model {
    DBInstanceClasses?: DescribeAvailableClassesResponseBodyDBInstanceClasses[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableClassesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeAvailableClassesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableCrossRegionRequest extends $tea.Model {
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableCrossRegionResponseBody extends $tea.Model {
    regions?: DescribeAvailableCrossRegionResponseBodyRegions;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableCrossRegionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeAvailableCrossRegionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableMetricsRequest extends $tea.Model {
    DBInstanceName?: string;
    resourceGroupId?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableMetricsResponseBody extends $tea.Model {
    DBInstanceName?: string;
    items?: DescribeAvailableMetricsResponseBodyItems[];
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableMetricsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeAvailableMetricsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableRecoveryTimeRequest extends $tea.Model {
    crossBackupId?: number;
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableRecoveryTimeResponseBody extends $tea.Model {
    crossBackupId?: number;
    recoveryBeginTime?: string;
    recoveryEndTime?: string;
    regionId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableRecoveryTimeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeAvailableRecoveryTimeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableZonesRequest extends $tea.Model {
    category?: string;
    commodityCode?: string;
    DBInstanceName?: string;
    dispenseMode?: string;
    engine?: string;
    engineVersion?: string;
    regionId?: string;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableZonesResponseBody extends $tea.Model {
    availableZones?: DescribeAvailableZonesResponseBodyAvailableZones[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableZonesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeAvailableZonesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupDatabaseRequest extends $tea.Model {
    backupId?: string;
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupDatabaseResponseBody extends $tea.Model {
    databaseNames?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupDatabaseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeBackupDatabaseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupPolicyRequest extends $tea.Model {
    backupPolicyMode?: string;
    compressType?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    releasedKeepPolicy?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupPolicyResponseBody extends $tea.Model {
    archiveBackupKeepCount?: string;
    archiveBackupKeepPolicy?: string;
    archiveBackupRetentionPeriod?: string;
    backupInterval?: string;
    backupLog?: string;
    backupMethod?: string;
    backupPriority?: number;
    backupRetentionPeriod?: number;
    category?: string;
    compressType?: string;
    enableBackupLog?: string;
    enableIncrementDataBackup?: boolean;
    highSpaceUsageProtection?: string;
    localLogRetentionHours?: number;
    localLogRetentionSpace?: string;
    logBackupFrequency?: string;
    logBackupLocalRetentionNumber?: number;
    logBackupRetentionPeriod?: number;
    preferredBackupPeriod?: string;
    preferredBackupTime?: string;
    preferredNextBackupTime?: string;
    releasedKeepPolicy?: string;
    requestId?: string;
    supportModifyBackupPriority?: boolean;
    supportReleasedKeep?: number;
    supportVolumeShadowCopy?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupPolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeBackupPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupTasksRequest extends $tea.Model {
    backupJobId?: number;
    backupJobStatus?: string;
    backupMode?: string;
    clientToken?: string;
    DBInstanceId?: string;
    flag?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupTasksResponseBody extends $tea.Model {
    items?: DescribeBackupTasksResponseBodyItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeBackupTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsRequest extends $tea.Model {
    backupId?: string;
    backupMode?: string;
    backupStatus?: string;
    backupType?: string;
    DBInstanceId?: string;
    endTime?: string;
    pageNumber?: number;
    pageSize?: number;
    resourceGroupId?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsResponseBody extends $tea.Model {
    items?: DescribeBackupsResponseBodyItems;
    pageNumber?: string;
    pageRecordCount?: string;
    requestId?: string;
    totalEcsSnapshotSize?: number;
    totalRecordCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeBackupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBinlogFilesRequest extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBinlogFilesResponseBody extends $tea.Model {
    items?: DescribeBinlogFilesResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalFileSize?: number;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBinlogFilesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeBinlogFilesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCharacterSetNameRequest extends $tea.Model {
    engine?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCharacterSetNameResponseBody extends $tea.Model {
    characterSetNameItems?: DescribeCharacterSetNameResponseBodyCharacterSetNameItems;
    engine?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCharacterSetNameResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeCharacterSetNameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClassDetailsRequest extends $tea.Model {
    classCode?: string;
    clientToken?: string;
    commodityCode?: string;
    engine?: string;
    engineVersion?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClassDetailsResponseBody extends $tea.Model {
    category?: string;
    classCode?: string;
    classGroup?: string;
    cpu?: string;
    DBInstanceStorageType?: string;
    instructionSetArch?: string;
    maxConnections?: string;
    maxIOMBPS?: string;
    maxIOPS?: string;
    memoryClass?: string;
    referencePrice?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClassDetailsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClassDetailsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCloudMigrationPrecheckResultRequest extends $tea.Model {
    DBInstanceName?: string;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerId?: number;
    sourceIpAddress?: string;
    sourcePort?: number;
    taskId?: number;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCloudMigrationPrecheckResultResponseBody extends $tea.Model {
    items?: DescribeCloudMigrationPrecheckResultResponseBodyItems[];
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCloudMigrationPrecheckResultResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeCloudMigrationPrecheckResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCloudMigrationResultRequest extends $tea.Model {
    DBInstanceName?: string;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerId?: number;
    sourceIpAddress?: string;
    sourcePort?: number;
    taskId?: number;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCloudMigrationResultResponseBody extends $tea.Model {
    items?: DescribeCloudMigrationResultResponseBodyItems[];
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCloudMigrationResultResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeCloudMigrationResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCollationTimeZonesRequest extends $tea.Model {
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCollationTimeZonesResponseBody extends $tea.Model {
    collationTimeZones?: DescribeCollationTimeZonesResponseBodyCollationTimeZones;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCollationTimeZonesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeCollationTimeZonesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossBackupMetaListRequest extends $tea.Model {
    backupSetId?: string;
    getDbName?: string;
    ownerId?: number;
    pageIndex?: string;
    pageSize?: string;
    pattern?: string;
    region?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossBackupMetaListResponseBody extends $tea.Model {
    DBInstanceName?: string;
    items?: DescribeCrossBackupMetaListResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalPageCount?: number;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossBackupMetaListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeCrossBackupMetaListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionBackupDBInstanceRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionBackupDBInstanceResponseBody extends $tea.Model {
    items?: DescribeCrossRegionBackupDBInstanceResponseBodyItems;
    itemsNumbers?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    requestId?: string;
    totalRecords?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionBackupDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeCrossRegionBackupDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionBackupsRequest extends $tea.Model {
    backupId?: number;
    crossBackupId?: number;
    crossBackupRegion?: string;
    DBInstanceId?: string;
    endTime?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionBackupsResponseBody extends $tea.Model {
    endTime?: string;
    items?: DescribeCrossRegionBackupsResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    regionId?: string;
    requestId?: string;
    startTime?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionBackupsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeCrossRegionBackupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionLogBackupFilesRequest extends $tea.Model {
    crossBackupRegion?: string;
    DBInstanceId?: string;
    endTime?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionLogBackupFilesResponseBody extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    items?: DescribeCrossRegionLogBackupFilesResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    regionId?: string;
    requestId?: string;
    startTime?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionLogBackupFilesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeCrossRegionLogBackupFilesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCurrentModifyOrderRequest extends $tea.Model {
    clientToken?: string;
    dbInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCurrentModifyOrderResponseBody extends $tea.Model {
    modifyOrder?: DescribeCurrentModifyOrderResponseBodyModifyOrder[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCurrentModifyOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeCurrentModifyOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustinsResourceInfoRequest extends $tea.Model {
    DBInstanceIds?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustinsResourceInfoResponseBody extends $tea.Model {
    data?: DescribeCustinsResourceInfoResponseBodyData[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustinsResourceInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeCustinsResourceInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeRequest extends $tea.Model {
    DBInstanceId?: string;
    expired?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBody extends $tea.Model {
    items?: DescribeDBInstanceAttributeResponseBodyItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceAttributeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceByTagsRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    proxyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceByTagsResponseBody extends $tea.Model {
    items?: DescribeDBInstanceByTagsResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceByTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceByTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceConnectivityRequest extends $tea.Model {
    dbInstanceName?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    sourceIpAddress?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceConnectivityResponseBody extends $tea.Model {
    connCheckErrorCode?: string;
    connCheckErrorMessage?: string;
    connCheckResult?: string;
    dbInstanceName?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceConnectivityResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceConnectivityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceDetailRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceDetailResponseBody extends $tea.Model {
    activationState?: string;
    DBInstanceId?: string;
    licenseType?: string;
    regionId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEncryptionKeyRequest extends $tea.Model {
    DBInstanceId?: string;
    encryptionKey?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    targetRegionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEncryptionKeyResponseBody extends $tea.Model {
    creator?: string;
    deleteDate?: string;
    description?: string;
    encryptionKey?: string;
    encryptionKeyList?: DescribeDBInstanceEncryptionKeyResponseBodyEncryptionKeyList[];
    encryptionKeyStatus?: string;
    keyUsage?: string;
    materialExpireTime?: string;
    origin?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEncryptionKeyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceEncryptionKeyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEndpointsRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceEndpointId?: string;
    DBInstanceId?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEndpointsResponseBody extends $tea.Model {
    data?: DescribeDBInstanceEndpointsResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEndpointsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceEndpointsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceHAConfigRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceHAConfigResponseBody extends $tea.Model {
    DBInstanceId?: string;
    HAMode?: string;
    hostInstanceInfos?: DescribeDBInstanceHAConfigResponseBodyHostInstanceInfos;
    requestId?: string;
    syncMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceHAConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceHAConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceIPArrayListRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    resourceOwnerId?: number;
    whitelistNetworkType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceIPArrayListResponseBody extends $tea.Model {
    items?: DescribeDBInstanceIPArrayListResponseBodyItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceIPArrayListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceIPArrayListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceIpHostnameRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceIpHostnameResponseBody extends $tea.Model {
    DBInstanceId?: string;
    ipHostnameInfos?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceIpHostnameResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceIpHostnameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceMetricsRequest extends $tea.Model {
    DBInstanceName?: string;
    resourceGroupId?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceMetricsResponseBody extends $tea.Model {
    DBInstanceName?: string;
    items?: DescribeDBInstanceMetricsResponseBodyItems[];
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceMetricsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceMetricsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceMonitorRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceMonitorResponseBody extends $tea.Model {
    period?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceMonitorResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceMonitorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    DBInstanceNetRWSplitType?: string;
    flag?: number;
    generalGroupName?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponseBody extends $tea.Model {
    DBInstanceNetInfos?: DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos;
    instanceNetworkType?: string;
    requestId?: string;
    securityIPMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceNetInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoForChannelRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    DBInstanceNetRWSplitType?: string;
    flag?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoForChannelResponseBody extends $tea.Model {
    DBInstanceNetInfos?: DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfos;
    instanceNetworkType?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoForChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceNetInfoForChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancePerformanceRequest extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    key?: string;
    nodeId?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancePerformanceResponseBody extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    engine?: string;
    performanceKeys?: DescribeDBInstancePerformanceResponseBodyPerformanceKeys;
    requestId?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancePerformanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstancePerformanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancePromoteActivityRequest extends $tea.Model {
    aliUid?: string;
    dbInstanceName?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancePromoteActivityResponseBody extends $tea.Model {
    aliUid?: string;
    bid?: string;
    DBInstanceId?: string;
    DBInstanceName?: string;
    DBType?: string;
    isActivity?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancePromoteActivityResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstancePromoteActivityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceProxyConfigurationRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceProxyConfigurationResponseBody extends $tea.Model {
    attacksProtectionConfiguration?: string;
    persistentConnectionsConfiguration?: string;
    requestId?: string;
    transparentSwitchConfiguration?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceProxyConfigurationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceProxyConfigurationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceSSLRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceSSLResponseBody extends $tea.Model {
    ACL?: string;
    CAType?: string;
    clientCACert?: string;
    clientCACertExpireTime?: string;
    clientCertRevocationList?: string;
    connectionString?: string;
    lastModifyStatus?: string;
    modifyStatusReason?: string;
    replicationACL?: string;
    requestId?: string;
    requireUpdate?: string;
    requireUpdateItem?: string;
    requireUpdateReason?: string;
    SSLCreateTime?: string;
    SSLEnabled?: string;
    SSLExpireTime?: string;
    serverCAUrl?: string;
    serverCert?: string;
    serverKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceSSLResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceSSLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceTDERequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceTDEResponseBody extends $tea.Model {
    databases?: DescribeDBInstanceTDEResponseBodyDatabases;
    requestId?: string;
    TDEMode?: string;
    TDEStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceTDEResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstanceTDEResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesRequest extends $tea.Model {
    category?: string;
    clientToken?: string;
    connectionMode?: string;
    connectionString?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    DBInstanceStatus?: string;
    DBInstanceType?: string;
    dedicatedHostGroupId?: string;
    dedicatedHostId?: string;
    engine?: string;
    engineVersion?: string;
    expired?: string;
    filter?: string;
    instanceLevel?: number;
    instanceNetworkType?: string;
    maxResults?: number;
    nextToken?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    payType?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    searchKey?: string;
    tags?: string;
    vSwitchId?: string;
    vpcId?: string;
    zoneId?: string;
    proxyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesResponseBody extends $tea.Model {
    items?: DescribeDBInstancesResponseBodyItems;
    nextToken?: string;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesAsCsvRequest extends $tea.Model {
    cachedAsync?: boolean;
    DBInstanceId?: string;
    exportKey?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesAsCsvResponseBody extends $tea.Model {
    items?: DescribeDBInstancesAsCsvResponseBodyItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesAsCsvResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstancesAsCsvResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesByExpireTimeRequest extends $tea.Model {
    expirePeriod?: number;
    expired?: boolean;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    tags?: string;
    proxyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesByExpireTimeResponseBody extends $tea.Model {
    items?: DescribeDBInstancesByExpireTimeResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesByExpireTimeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstancesByExpireTimeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesByPerformanceRequest extends $tea.Model {
    tag?: DescribeDBInstancesByPerformanceRequestTag[];
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    sortKey?: string;
    sortMethod?: string;
    tags?: string;
    proxyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesByPerformanceResponseBody extends $tea.Model {
    items?: DescribeDBInstancesByPerformanceResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesByPerformanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstancesByPerformanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesForCloneRequest extends $tea.Model {
    clientToken?: string;
    connectionMode?: string;
    currentInstanceId?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    DBInstanceStatus?: string;
    DBInstanceType?: string;
    engine?: string;
    engineVersion?: string;
    expired?: string;
    instanceNetworkType?: string;
    nodeType?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    payType?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    searchKey?: string;
    vSwitchId?: string;
    vpcId?: string;
    zoneId?: string;
    proxyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesForCloneResponseBody extends $tea.Model {
    items?: DescribeDBInstancesForCloneResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesForCloneResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBInstancesForCloneResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBMiniEngineVersionsRequest extends $tea.Model {
    DBInstanceId?: string;
    dedicatedHostGroupId?: string;
    engine?: string;
    engineVersion?: string;
    minorVersionTag?: string;
    nodeType?: string;
    regionId?: string;
    resourceOwnerId?: number;
    storageType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBMiniEngineVersionsResponseBody extends $tea.Model {
    DBInstanceId?: string;
    maxRecordsPerPage?: number;
    minorVersionItems?: DescribeDBMiniEngineVersionsResponseBodyMinorVersionItems[];
    pageNumbers?: number;
    requestId?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBMiniEngineVersionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBMiniEngineVersionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyRequest extends $tea.Model {
    DBInstanceId?: string;
    DBProxyEngineType?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyResponseBody extends $tea.Model {
    DBProxyAVZones?: DescribeDBProxyResponseBodyDBProxyAVZones;
    DBProxyConnectStringItems?: DescribeDBProxyResponseBodyDBProxyConnectStringItems;
    DBProxyEngineType?: string;
    DBProxyInstanceCurrentMinorVersion?: string;
    DBProxyInstanceLatestMinorVersion?: string;
    DBProxyInstanceName?: string;
    DBProxyInstanceNum?: number;
    DBProxyInstanceSize?: string;
    DBProxyInstanceStatus?: string;
    DBProxyInstanceType?: string;
    DBProxyPersistentConnectionSupport?: string;
    DBProxyServiceStatus?: string;
    dbProxyEndpointItems?: DescribeDBProxyResponseBodyDbProxyEndpointItems;
    requestId?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBProxyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyEndpointRequest extends $tea.Model {
    DBInstanceId?: string;
    DBProxyConnectString?: string;
    DBProxyEndpointId?: string;
    DBProxyEngineType?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyEndpointResponseBody extends $tea.Model {
    DBProxyConnectString?: string;
    DBProxyConnectStringNetType?: string;
    DBProxyConnectStringPort?: string;
    DBProxyEndpointId?: string;
    DBProxyEngineType?: string;
    DBProxyFeatures?: string;
    dbProxyEndpointAliases?: string;
    dbProxyEndpointReadWriteMode?: string;
    endpointConnectItems?: DescribeDBProxyEndpointResponseBodyEndpointConnectItems;
    readOnlyInstanceDistributionType?: string;
    readOnlyInstanceMaxDelayTime?: string;
    readOnlyInstanceWeight?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyEndpointResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBProxyEndpointResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyPerformanceRequest extends $tea.Model {
    DBInstanceId?: string;
    DBProxyEngineType?: string;
    DBProxyInstanceType?: string;
    endTime?: string;
    metricsName?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyPerformanceResponseBody extends $tea.Model {
    DBInstanceId?: string;
    DBProxyEngineType?: string;
    endTime?: string;
    performanceKeys?: DescribeDBProxyPerformanceResponseBodyPerformanceKeys;
    requestId?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyPerformanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDBProxyPerformanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDTCSecurityIpHostsForSQLServerRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDTCSecurityIpHostsForSQLServerResponseBody extends $tea.Model {
    DBInstanceId?: string;
    ipHostPairNum?: string;
    items?: DescribeDTCSecurityIpHostsForSQLServerResponseBodyItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDTCSecurityIpHostsForSQLServerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDTCSecurityIpHostsForSQLServerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDatabasesRequest extends $tea.Model {
    DBInstanceId?: string;
    DBName?: string;
    DBStatus?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDatabasesResponseBody extends $tea.Model {
    databases?: DescribeDatabasesResponseBodyDatabases;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDatabasesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDatabasesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedHostGroupsRequest extends $tea.Model {
    dedicatedHostGroupId?: string;
    imageCategory?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedHostGroupsResponseBody extends $tea.Model {
    dedicatedHostGroups?: DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroups;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedHostGroupsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDedicatedHostGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedHostsRequest extends $tea.Model {
    allocationStatus?: string;
    dedicatedHostGroupId?: string;
    dedicatedHostId?: string;
    hostStatus?: string;
    hostType?: string;
    orderId?: number;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedHostsResponseBody extends $tea.Model {
    dedicatedHostGroupId?: string;
    dedicatedHosts?: DescribeDedicatedHostsResponseBodyDedicatedHosts;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedHostsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDedicatedHostsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDetachedBackupsRequest extends $tea.Model {
    backupId?: string;
    backupMode?: string;
    backupStatus?: string;
    DBInstanceId?: string;
    endTime?: string;
    pageNumber?: number;
    pageSize?: number;
    region?: string;
    resourceGroupId?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDetachedBackupsResponseBody extends $tea.Model {
    items?: DescribeDetachedBackupsResponseBodyItems;
    pageNumber?: string;
    pageRecordCount?: string;
    requestId?: string;
    totalRecordCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDetachedBackupsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDetachedBackupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDiagnosticReportListRequest extends $tea.Model {
    DBInstanceId?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDiagnosticReportListResponseBody extends $tea.Model {
    DBInstanceId?: string;
    reportList?: DescribeDiagnosticReportListResponseBodyReportList[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDiagnosticReportListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeDiagnosticReportListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeErrorLogsRequest extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeErrorLogsResponseBody extends $tea.Model {
    items?: DescribeErrorLogsResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeErrorLogsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeErrorLogsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEventsRequest extends $tea.Model {
    endTime?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEventsResponseBody extends $tea.Model {
    eventItems?: DescribeEventsResponseBodyEventItems;
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEventsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeEventsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGadInstancesRequest extends $tea.Model {
    gadInstanceName?: string;
    regionId?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGadInstancesResponseBody extends $tea.Model {
    gadInstances?: DescribeGadInstancesResponseBodyGadInstances[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGadInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeGadInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHADiagnoseConfigRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHADiagnoseConfigResponseBody extends $tea.Model {
    requestId?: string;
    tcpConnectionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHADiagnoseConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHADiagnoseConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHASwitchConfigRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHASwitchConfigResponseBody extends $tea.Model {
    HAConfig?: string;
    manualHATime?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHASwitchConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHASwitchConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryEventsRequest extends $tea.Model {
    archiveStatus?: string;
    eventCategory?: string;
    eventId?: string;
    eventLevel?: string;
    eventStatus?: string;
    eventType?: string;
    fromStartTime?: string;
    instanceId?: string;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceType?: string;
    securityToken?: string;
    taskId?: string;
    toStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryEventsResponseBody extends $tea.Model {
    items?: DescribeHistoryEventsResponseBodyItems[];
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryEventsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHistoryEventsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryEventsStatRequest extends $tea.Model {
    archiveStatus?: string;
    fromStartTime?: string;
    regionId?: string;
    securityToken?: string;
    toStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryEventsStatResponseBody extends $tea.Model {
    items?: DescribeHistoryEventsStatResponseBodyItems[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryEventsStatResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHistoryEventsStatResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksRequest extends $tea.Model {
    fromExecTime?: number;
    fromStartTime?: string;
    instanceId?: string;
    instanceType?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: number;
    resourceOwnerId?: number;
    securityToken?: string;
    status?: string;
    taskId?: string;
    taskType?: string;
    toExecTime?: number;
    toStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksResponseBody extends $tea.Model {
    items?: DescribeHistoryTasksResponseBodyItems[];
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHistoryTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksStatRequest extends $tea.Model {
    fromExecTime?: number;
    fromStartTime?: string;
    instanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: number;
    resourceOwnerId?: number;
    securityToken?: string;
    status?: string;
    taskId?: string;
    taskType?: string;
    toExecTime?: number;
    toStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksStatResponseBody extends $tea.Model {
    items?: DescribeHistoryTasksStatResponseBodyItems[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksStatResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHistoryTasksStatResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHostGroupElasticStrategyParametersRequest extends $tea.Model {
    dedicatedHostGroupName?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHostGroupElasticStrategyParametersResponseBody extends $tea.Model {
    cpuShar?: number;
    cpuZoom?: number;
    iopsZoom?: number;
    maxConnZoom?: number;
    memoryZoom?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHostGroupElasticStrategyParametersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHostGroupElasticStrategyParametersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHostWebShellRequest extends $tea.Model {
    accountName?: string;
    accountPassword?: string;
    DBInstanceId?: string;
    hostName?: string;
    ownerId?: number;
    regionID?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHostWebShellResponseBody extends $tea.Model {
    loginUrl?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHostWebShellResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHostWebShellResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAutoRenewalAttributeRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    proxyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAutoRenewalAttributeResponseBody extends $tea.Model {
    items?: DescribeInstanceAutoRenewalAttributeResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAutoRenewalAttributeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeInstanceAutoRenewalAttributeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceCrossBackupPolicyRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceCrossBackupPolicyResponseBody extends $tea.Model {
    backupEnabled?: string;
    backupEnabledTime?: string;
    crossBackupRegion?: string;
    crossBackupType?: string;
    DBInstanceDescription?: string;
    DBInstanceId?: string;
    DBInstanceStatus?: string;
    engine?: string;
    engineVersion?: string;
    lockMode?: string;
    logBackupEnabled?: string;
    logBackupEnabledTime?: string;
    regionId?: string;
    requestId?: string;
    retentType?: number;
    retention?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceCrossBackupPolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeInstanceCrossBackupPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceKeywordsRequest extends $tea.Model {
    key?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceKeywordsResponseBody extends $tea.Model {
    key?: string;
    requestId?: string;
    words?: DescribeInstanceKeywordsResponseBodyWords;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceKeywordsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeInstanceKeywordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceLinkedWhitelistTemplateRequest extends $tea.Model {
    insName?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceLinkedWhitelistTemplateResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeInstanceLinkedWhitelistTemplateResponseBodyData;
    httpStatusCode?: number;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceLinkedWhitelistTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeInstanceLinkedWhitelistTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLocalAvailableRecoveryTimeRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    region?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLocalAvailableRecoveryTimeResponseBody extends $tea.Model {
    DBInstanceId?: string;
    recoveryBeginTime?: string;
    recoveryEndTime?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLocalAvailableRecoveryTimeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeLocalAvailableRecoveryTimeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogBackupFilesRequest extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogBackupFilesResponseBody extends $tea.Model {
    items?: DescribeLogBackupFilesResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalFileSize?: number;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogBackupFilesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeLogBackupFilesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMarketingActivityRequest extends $tea.Model {
    aliUid?: number;
    bid?: string;
    clientToken?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    upgradeCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMarketingActivityResponseBody extends $tea.Model {
    aliUid?: number;
    bid?: string;
    items?: DescribeMarketingActivityResponseBodyItems[];
    regionId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMarketingActivityResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeMarketingActivityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMetaListRequest extends $tea.Model {
    backupSetID?: number;
    clientToken?: string;
    DBInstanceId?: string;
    getDbName?: string;
    ownerId?: number;
    pageIndex?: number;
    pageSize?: number;
    pattern?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    restoreTime?: string;
    restoreType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMetaListResponseBody extends $tea.Model {
    DBInstanceName?: string;
    items?: DescribeMetaListResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalPageCount?: number;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMetaListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeMetaListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMigrateTaskByIdRequest extends $tea.Model {
    DBInstanceId?: string;
    migrateTaskId?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMigrateTaskByIdResponseBody extends $tea.Model {
    backupMode?: string;
    createTime?: string;
    DBInstanceName?: string;
    DBName?: string;
    description?: string;
    endTime?: string;
    isDBReplaced?: string;
    migrateTaskId?: string;
    requestId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMigrateTaskByIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeMigrateTaskByIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMigrateTasksRequest extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMigrateTasksResponseBody extends $tea.Model {
    DBInstanceId?: string;
    items?: DescribeMigrateTasksResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMigrateTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeMigrateTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyPGHbaConfigLogRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    endTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyPGHbaConfigLogResponseBody extends $tea.Model {
    DBInstanceId?: string;
    hbaLogItems?: DescribeModifyPGHbaConfigLogResponseBodyHbaLogItems;
    logItemCount?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyPGHbaConfigLogResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeModifyPGHbaConfigLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyParameterLogRequest extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyParameterLogResponseBody extends $tea.Model {
    DBInstanceId?: string;
    engine?: string;
    engineVersion?: string;
    items?: DescribeModifyParameterLogResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyParameterLogResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeModifyParameterLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeOssDownloadsRequest extends $tea.Model {
    DBInstanceId?: string;
    migrateTaskId?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeOssDownloadsResponseBody extends $tea.Model {
    DBInstanceId?: string;
    items?: DescribeOssDownloadsResponseBodyItems;
    migrateTaskId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeOssDownloadsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeOssDownloadsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePGHbaConfigRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePGHbaConfigResponseBody extends $tea.Model {
    DBInstanceId?: string;
    defaultHbaItems?: DescribePGHbaConfigResponseBodyDefaultHbaItems;
    hbaModifyTime?: string;
    lastModifyStatus?: string;
    modifyStatusReason?: string;
    requestId?: string;
    runningHbaItems?: DescribePGHbaConfigResponseBodyRunningHbaItems;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePGHbaConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePGHbaConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupRequest extends $tea.Model {
    ownerId?: number;
    parameterGroupId?: string;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupResponseBody extends $tea.Model {
    paramGroup?: DescribeParameterGroupResponseBodyParamGroup;
    relatedCustinsInfo?: DescribeParameterGroupResponseBodyRelatedCustinsInfo;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeParameterGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupsRequest extends $tea.Model {
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupsResponseBody extends $tea.Model {
    parameterGroups?: DescribeParameterGroupsResponseBodyParameterGroups;
    requestId?: string;
    signalForOptimizeParams?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeParameterGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterTemplatesRequest extends $tea.Model {
    category?: string;
    clientToken?: string;
    DBInstanceId?: string;
    engine?: string;
    engineVersion?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterTemplatesResponseBody extends $tea.Model {
    engine?: string;
    engineVersion?: string;
    parameterCount?: string;
    parameters?: DescribeParameterTemplatesResponseBodyParameters;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterTemplatesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeParameterTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponseBody extends $tea.Model {
    configParameters?: DescribeParametersResponseBodyConfigParameters;
    engine?: string;
    engineVersion?: string;
    paramGroupInfo?: DescribeParametersResponseBodyParamGroupInfo;
    requestId?: string;
    runningParameters?: DescribeParametersResponseBodyRunningParameters;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeParametersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePostgresExtensionsRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    DBName?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePostgresExtensionsResponseBody extends $tea.Model {
    installedExtensions?: DescribePostgresExtensionsResponseBodyInstalledExtensions[];
    overview?: {
        [key: string]: any;
    };
    requestId?: string;
    uninstalledExtensions?: DescribePostgresExtensionsResponseBodyUninstalledExtensions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePostgresExtensionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePostgresExtensionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceRequest extends $tea.Model {
    clientToken?: string;
    commodityCode?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    DBNode?: DescribePriceRequestDBNode[];
    engine?: string;
    engineVersion?: string;
    instanceUsedType?: number;
    orderType?: string;
    ownerAccount?: string;
    ownerId?: number;
    payType?: string;
    quantity?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    serverlessConfig?: DescribePriceRequestServerlessConfig;
    timeType?: string;
    usedTime?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceShrinkRequest extends $tea.Model {
    clientToken?: string;
    commodityCode?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    DBNodeShrink?: string;
    engine?: string;
    engineVersion?: string;
    instanceUsedType?: number;
    orderType?: string;
    ownerAccount?: string;
    ownerId?: number;
    payType?: string;
    quantity?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    serverlessConfigShrink?: string;
    timeType?: string;
    usedTime?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBody extends $tea.Model {
    priceInfo?: DescribePriceResponseBodyPriceInfo;
    requestId?: string;
    rules?: DescribePriceResponseBodyRules;
    showDiscount?: boolean;
    tradeMaxRCUAmount?: number;
    tradeMinRCUAmount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePriceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeQuickSaleConfigRequest extends $tea.Model {
    commodity?: string;
    engine?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeQuickSaleConfigResponseBody extends $tea.Model {
    commodity?: string;
    items?: {
        [key: string]: any;
    };
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeQuickSaleConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeQuickSaleConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRdsResourceSettingsRequest extends $tea.Model {
    ownerId?: number;
    resourceNiche?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRdsResourceSettingsResponseBody extends $tea.Model {
    rdsInstanceResourceSettings?: DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettings;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRdsResourceSettingsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeRdsResourceSettingsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeReadDBInstanceDelayRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    readInstanceId?: string;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeReadDBInstanceDelayResponseBody extends $tea.Model {
    DBInstanceId?: string;
    delayTime?: number;
    items?: DescribeReadDBInstanceDelayResponseBodyItems;
    readDBInstanceId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeReadDBInstanceDelayResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeReadDBInstanceDelayResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionInfosRequest extends $tea.Model {
    clientToken?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionInfosResponseBody extends $tea.Model {
    regions?: DescribeRegionInfosResponseBodyRegions;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionInfosResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeRegionInfosResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsRequest extends $tea.Model {
    acceptLanguage?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponseBody extends $tea.Model {
    regions?: DescribeRegionsResponseBodyRegions;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeRegionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRenewalPriceRequest extends $tea.Model {
    businessInfo?: string;
    clientToken?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    orderType?: string;
    ownerAccount?: string;
    ownerId?: number;
    payType?: string;
    quantity?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    timeType?: string;
    usedTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRenewalPriceResponseBody extends $tea.Model {
    priceInfo?: DescribeRenewalPriceResponseBodyPriceInfo;
    requestId?: string;
    rules?: DescribeRenewalPriceResponseBodyRules;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRenewalPriceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeRenewalPriceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceDetailsRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceDetailsResponseBody extends $tea.Model {
    backupDataSize?: number;
    backupLogSize?: number;
    backupSize?: number;
    dbInstanceStorage?: number;
    dbProxyInstanceName?: string;
    diskUsed?: number;
    instanceStorageType?: string;
    rdsEcsSecurityGroupRel?: DescribeResourceDetailsResponseBodyRdsEcsSecurityGroupRel[];
    region?: string;
    requestId?: string;
    resourceGroupId?: string;
    securityIPList?: string;
    vSwitchId?: string;
    vpcId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceDetailsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeResourceDetailsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageResponseBody extends $tea.Model {
    archiveBackupSize?: number;
    backupDataSize?: number;
    backupLogSize?: number;
    backupOssDataSize?: number;
    backupOssLogSize?: number;
    backupSize?: number;
    coldBackupSize?: number;
    DBInstanceId?: string;
    dataSize?: number;
    diskUsed?: number;
    engine?: string;
    logSize?: number;
    paidBackupSize?: number;
    requestId?: string;
    SQLSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceUsageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeResourceUsageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLCollectorPolicyRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLCollectorPolicyResponseBody extends $tea.Model {
    requestId?: string;
    SQLCollectorStatus?: string;
    storagePeriod?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLCollectorPolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSQLCollectorPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLCollectorRetentionRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLCollectorRetentionResponseBody extends $tea.Model {
    configValue?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLCollectorRetentionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSQLCollectorRetentionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogFilesRequest extends $tea.Model {
    DBInstanceId?: string;
    fileName?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogFilesResponseBody extends $tea.Model {
    items?: DescribeSQLLogFilesResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogFilesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSQLLogFilesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogRecordsRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    database?: string;
    endTime?: string;
    form?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    queryKeywords?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    SQLId?: number;
    startTime?: string;
    user?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogRecordsResponseBody extends $tea.Model {
    items?: DescribeSQLLogRecordsResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogRecordsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSQLLogRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogReportListRequest extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogReportListResponseBody extends $tea.Model {
    items?: DescribeSQLLogReportListResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogReportListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSQLLogReportListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecretsRequest extends $tea.Model {
    acceptLanguage?: string;
    clientToken?: string;
    dbInstanceId?: string;
    engine?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecretsResponseBody extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    secrets?: DescribeSecretsResponseBodySecrets[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecretsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSecretsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityGroupConfigurationRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityGroupConfigurationResponseBody extends $tea.Model {
    DBInstanceName?: string;
    items?: DescribeSecurityGroupConfigurationResponseBodyItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityGroupConfigurationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSecurityGroupConfigurationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlotsRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlotsResponseBody extends $tea.Model {
    requestId?: string;
    slots?: DescribeSlotsResponseBodySlots[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlotsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSlotsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogRecordsRequest extends $tea.Model {
    DBInstanceId?: string;
    DBName?: string;
    endTime?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    SQLHASH?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogRecordsResponseBody extends $tea.Model {
    DBInstanceId?: string;
    engine?: string;
    items?: DescribeSlowLogRecordsResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogRecordsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSlowLogRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogsRequest extends $tea.Model {
    DBInstanceId?: string;
    DBName?: string;
    endTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    sortKey?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogsResponseBody extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    engine?: string;
    items?: DescribeSlowLogsResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    startTime?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSlowLogsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSupportOnlineResizeDiskRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSupportOnlineResizeDiskResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSupportOnlineResizeDiskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeSupportOnlineResizeDiskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTagsRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    resourceType?: string;
    tags?: string;
    proxyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTagsResponseBody extends $tea.Model {
    items?: DescribeTagsResponseBodyItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTasksRequest extends $tea.Model {
    DBInstanceId?: string;
    endTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    startTime?: string;
    status?: string;
    taskAction?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTasksResponseBody extends $tea.Model {
    items?: DescribeTasksResponseBodyItems;
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUpgradeMajorVersionPrecheckTaskRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    targetMajorVersion?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUpgradeMajorVersionPrecheckTaskResponseBody extends $tea.Model {
    items?: DescribeUpgradeMajorVersionPrecheckTaskResponseBodyItems[];
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUpgradeMajorVersionPrecheckTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeUpgradeMajorVersionPrecheckTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUpgradeMajorVersionTasksRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    targetMajorVersion?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUpgradeMajorVersionTasksResponseBody extends $tea.Model {
    items?: DescribeUpgradeMajorVersionTasksResponseBodyItems[];
    pageNumber?: number;
    pageRecordCount?: number;
    requestId?: string;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUpgradeMajorVersionTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeUpgradeMajorVersionTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeVSwitchesRequest extends $tea.Model {
    dedicatedHostGroupId?: string;
    ownerAccount?: string;
    ownerId?: number;
    pageNumber?: number;
    pageSize?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    vpcId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeVSwitchesResponseBody extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    requestId?: string;
    totalCount?: number;
    vSwitchs?: DescribeVSwitchesResponseBodyVSwitchs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeVSwitchesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeVSwitchesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWhitelistTemplateRequest extends $tea.Model {
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWhitelistTemplateResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeWhitelistTemplateResponseBodyData;
    httpStatusCode?: number;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWhitelistTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeWhitelistTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWhitelistTemplateLinkedInstanceRequest extends $tea.Model {
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWhitelistTemplateLinkedInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: DescribeWhitelistTemplateLinkedInstanceResponseBodyData;
    httpStatusCode?: number;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWhitelistTemplateLinkedInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeWhitelistTemplateLinkedInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DestroyDBInstanceRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DestroyDBInstanceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DestroyDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DestroyDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachGadInstanceMemberRequest extends $tea.Model {
    gadInstanceName?: string;
    memberInstanceName?: string;
    regionId?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachGadInstanceMemberResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachGadInstanceMemberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DetachGadInstanceMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachWhitelistTemplateToInstanceRequest extends $tea.Model {
    insName?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachWhitelistTemplateToInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: DetachWhitelistTemplateToInstanceResponseBodyData;
    httpStatusCode?: number;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachWhitelistTemplateToInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DetachWhitelistTemplateToInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EvaluateLocalExtendDiskRequest extends $tea.Model {
    DBInstanceName?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    storage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EvaluateLocalExtendDiskResponseBody extends $tea.Model {
    available?: string;
    DBInstanceId?: string;
    DBInstanceTransType?: string;
    localUpgradeDiskLimit?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EvaluateLocalExtendDiskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EvaluateLocalExtendDiskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDBInstanceTopologyRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDBInstanceTopologyResponseBody extends $tea.Model {
    code?: string;
    data?: GetDBInstanceTopologyResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDBInstanceTopologyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDBInstanceTopologyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDbProxyInstanceSslRequest extends $tea.Model {
    DBProxyEngineType?: string;
    dbInstanceId?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDbProxyInstanceSslResponseBody extends $tea.Model {
    dbProxyCertListItems?: GetDbProxyInstanceSslResponseBodyDbProxyCertListItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDbProxyInstanceSslResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDbProxyInstanceSslResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantAccountPrivilegeRequest extends $tea.Model {
    accountName?: string;
    accountPrivilege?: string;
    DBInstanceId?: string;
    DBName?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantAccountPrivilegeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantAccountPrivilegeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GrantAccountPrivilegeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantOperatorPermissionRequest extends $tea.Model {
    DBInstanceId?: string;
    expiredTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    privileges?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantOperatorPermissionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantOperatorPermissionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GrantOperatorPermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportDatabaseBetweenInstancesRequest extends $tea.Model {
    DBInfo?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    sourceDBInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportDatabaseBetweenInstancesResponseBody extends $tea.Model {
    importId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportDatabaseBetweenInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ImportDatabaseBetweenInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportUserBackupFileRequest extends $tea.Model {
    backupFile?: string;
    bucketRegion?: string;
    comment?: string;
    engineVersion?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    restoreSize?: number;
    retention?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportUserBackupFileResponseBody extends $tea.Model {
    backupId?: string;
    requestId?: string;
    status?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportUserBackupFileResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ImportUserBackupFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClassesRequest extends $tea.Model {
    clientToken?: string;
    commodityCode?: string;
    DBInstanceId?: string;
    orderType?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClassesResponseBody extends $tea.Model {
    items?: ListClassesResponseBodyItems[];
    regionId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClassesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListClassesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesRequest extends $tea.Model {
    nextToken?: string;
    ownerId?: number;
    regionId?: string;
    resourceId?: string[];
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    resourceType?: string;
    tag?: ListTagResourcesRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBody extends $tea.Model {
    nextToken?: string;
    requestId?: string;
    tagResources?: ListTagResourcesResponseBodyTagResources;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListTagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserBackupFilesRequest extends $tea.Model {
    backupId?: string;
    comment?: string;
    ossUrl?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    status?: string;
    tags?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserBackupFilesResponseBody extends $tea.Model {
    records?: ListUserBackupFilesResponseBodyRecords[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserBackupFilesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListUserBackupFilesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LockAccountRequest extends $tea.Model {
    accountName?: string;
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LockAccountResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LockAccountResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: LockAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateConnectionToOtherZoneRequest extends $tea.Model {
    connectionString?: string;
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateConnectionToOtherZoneResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateConnectionToOtherZoneResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: MigrateConnectionToOtherZoneResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateDBInstanceRequest extends $tea.Model {
    DBInstanceId?: string;
    dedicatedHostGroupId?: string;
    effectiveTime?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    specifiedTime?: string;
    targetDedicatedHostIdForMaster?: string;
    targetDedicatedHostIdForSlave?: string;
    zoneIdForFollower?: string;
    zoneIdForLog?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateDBInstanceResponseBody extends $tea.Model {
    migrationId?: number;
    requestId?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: MigrateDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateSecurityIPModeRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateSecurityIPModeResponseBody extends $tea.Model {
    DBInstanceId?: string;
    requestId?: string;
    securityIPMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateSecurityIPModeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: MigrateSecurityIPModeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateToOtherZoneRequest extends $tea.Model {
    category?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: number;
    effectiveTime?: string;
    isModifySpec?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    switchTime?: string;
    VPCId?: string;
    vSwitchId?: string;
    zoneId?: string;
    zoneIdSlave1?: string;
    zoneIdSlave2?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateToOtherZoneResponseBody extends $tea.Model {
    DBInstanceId?: string;
    orderId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateToOtherZoneResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: MigrateToOtherZoneResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyADInfoRequest extends $tea.Model {
    ADAccountName?: string;
    ADDNS?: string;
    ADPassword?: string;
    ADServerIpAddress?: string;
    clientToken?: string;
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyADInfoResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyADInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyADInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountDescriptionRequest extends $tea.Model {
    accountDescription?: string;
    accountName?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountDescriptionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyAccountDescriptionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyAccountDescriptionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyActionEventPolicyRequest extends $tea.Model {
    enableEventLog?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyActionEventPolicyResponseBody extends $tea.Model {
    enableEventLog?: string;
    regionId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyActionEventPolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyActionEventPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyActiveOperationTasksRequest extends $tea.Model {
    ids?: string;
    immediateStart?: number;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    switchTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyActiveOperationTasksResponseBody extends $tea.Model {
    ids?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyActiveOperationTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyActiveOperationTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyBackupPolicyRequest extends $tea.Model {
    archiveBackupKeepCount?: number;
    archiveBackupKeepPolicy?: string;
    archiveBackupRetentionPeriod?: string;
    backupInterval?: string;
    backupLog?: string;
    backupMethod?: string;
    backupPolicyMode?: string;
    backupPriority?: number;
    backupRetentionPeriod?: string;
    category?: string;
    compressType?: string;
    DBInstanceId?: string;
    enableBackupLog?: string;
    enableIncrementDataBackup?: boolean;
    highSpaceUsageProtection?: string;
    localLogRetentionHours?: string;
    localLogRetentionSpace?: string;
    logBackupFrequency?: string;
    logBackupLocalRetentionNumber?: number;
    logBackupRetentionPeriod?: string;
    ownerAccount?: string;
    ownerId?: number;
    preferredBackupPeriod?: string;
    preferredBackupTime?: string;
    releasedKeepPolicy?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyBackupPolicyResponseBody extends $tea.Model {
    compressType?: string;
    DBInstanceID?: string;
    enableBackupLog?: string;
    highSpaceUsageProtection?: string;
    localLogRetentionHours?: number;
    localLogRetentionSpace?: string;
    logBackupLocalRetentionNumber?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyBackupPolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyBackupPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyCollationTimeZoneRequest extends $tea.Model {
    collation?: string;
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    timezone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyCollationTimeZoneResponseBody extends $tea.Model {
    collation?: string;
    DBInstanceId?: string;
    requestId?: string;
    taskId?: string;
    timezone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyCollationTimeZoneResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyCollationTimeZoneResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyCustinsResourceRequest extends $tea.Model {
    adjustDeadline?: string;
    DBInstanceId?: string;
    increaseRatio?: string;
    resourceOwnerId?: number;
    resourceType?: string;
    restoreOriginalSpecification?: string;
    targetValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyCustinsResourceResponseBody extends $tea.Model {
    requestId?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyCustinsResourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyCustinsResourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBDescriptionRequest extends $tea.Model {
    DBDescription?: string;
    DBInstanceId?: string;
    DBName?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBDescriptionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBDescriptionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBDescriptionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceAutoUpgradeMinorVersionRequest extends $tea.Model {
    autoUpgradeMinorVersion?: string;
    clientToken?: string;
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceAutoUpgradeMinorVersionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceAutoUpgradeMinorVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceAutoUpgradeMinorVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConfigRequest extends $tea.Model {
    clientToken?: string;
    configName?: string;
    configValue?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConfigResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConnectionModeRequest extends $tea.Model {
    connectionMode?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConnectionModeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConnectionModeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceConnectionModeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConnectionStringRequest extends $tea.Model {
    babelfishPort?: string;
    connectionStringPrefix?: string;
    currentConnectionString?: string;
    DBInstanceId?: string;
    generalGroupName?: string;
    ownerAccount?: string;
    ownerId?: number;
    PGBouncerPort?: string;
    port?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConnectionStringResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceConnectionStringResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceConnectionStringResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceDelayedReplicationTimeRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    readSQLReplicationTime?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceDelayedReplicationTimeResponseBody extends $tea.Model {
    DBInstanceId?: string;
    readSQLReplicationTime?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceDelayedReplicationTimeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceDelayedReplicationTimeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceDeletionProtectionRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    deletionProtection?: boolean;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceDeletionProtectionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceDeletionProtectionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceDeletionProtectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceDescriptionRequest extends $tea.Model {
    DBInstanceDescription?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceDescriptionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceDescriptionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceDescriptionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceEndpointRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceEndpointDescription?: string;
    DBInstanceEndpointId?: string;
    DBInstanceId?: string;
    nodeItems?: ModifyDBInstanceEndpointRequestNodeItems[];
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceEndpointShrinkRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceEndpointDescription?: string;
    DBInstanceEndpointId?: string;
    DBInstanceId?: string;
    nodeItemsShrink?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceEndpointResponseBody extends $tea.Model {
    data?: ModifyDBInstanceEndpointResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceEndpointResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceEndpointResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceEndpointAddressRequest extends $tea.Model {
    clientToken?: string;
    connectionString?: string;
    connectionStringPrefix?: string;
    DBInstanceEndpointId?: string;
    DBInstanceId?: string;
    port?: string;
    privateIpAddress?: string;
    resourceOwnerId?: number;
    vSwitchId?: string;
    vpcId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceEndpointAddressResponseBody extends $tea.Model {
    data?: ModifyDBInstanceEndpointAddressResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceEndpointAddressResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceEndpointAddressResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceHAConfigRequest extends $tea.Model {
    dbInstanceId?: string;
    HAMode?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    syncMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceHAConfigResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceHAConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceHAConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceMaintainTimeRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    maintainTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceMaintainTimeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceMaintainTimeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceMaintainTimeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceMetricsRequest extends $tea.Model {
    DBInstanceName?: string;
    metricsConfig?: string;
    resourceOwnerId?: number;
    scope?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceMetricsResponseBody extends $tea.Model {
    DBInstanceId?: string;
    requestId?: string;
    scope?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceMetricsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceMetricsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceMonitorRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    period?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceMonitorResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceMonitorResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceMonitorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceNetworkExpireTimeRequest extends $tea.Model {
    classicExpiredDays?: number;
    connectionString?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceNetworkExpireTimeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceNetworkExpireTimeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceNetworkExpireTimeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceNetworkTypeRequest extends $tea.Model {
    classicExpiredDays?: string;
    DBInstanceId?: string;
    instanceNetworkType?: string;
    ownerAccount?: string;
    ownerId?: number;
    privateIpAddress?: string;
    readWriteSplittingClassicExpiredDays?: number;
    readWriteSplittingPrivateIpAddress?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    retainClassic?: string;
    VPCId?: string;
    vSwitchId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceNetworkTypeResponseBody extends $tea.Model {
    connectionString?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceNetworkTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceNetworkTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstancePayTypeRequest extends $tea.Model {
    DBInstanceId?: string;
    payType?: string;
    period?: string;
    resourceOwnerId?: number;
    usedTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstancePayTypeResponseBody extends $tea.Model {
    orderId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstancePayTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstancePayTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceProxyConfigurationRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    proxyConfigurationKey?: string;
    proxyConfigurationValue?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceProxyConfigurationResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceProxyConfigurationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceProxyConfigurationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceSSLRequest extends $tea.Model {
    ACL?: string;
    CAType?: string;
    clientCACert?: string;
    clientCAEnabled?: number;
    clientCertRevocationList?: string;
    clientCrlEnabled?: number;
    connectionString?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    replicationACL?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    SSLEnabled?: number;
    serverCert?: string;
    serverKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceSSLResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceSSLResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceSSLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceSpecRequest extends $tea.Model {
    autoUseCoupon?: boolean;
    burstingEnabled?: boolean;
    category?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    dedicatedHostGroupId?: string;
    direction?: string;
    effectiveTime?: string;
    engineVersion?: string;
    ownerAccount?: string;
    ownerId?: number;
    payType?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    serverlessConfiguration?: ModifyDBInstanceSpecRequestServerlessConfiguration;
    sourceBiz?: string;
    switchTime?: string;
    targetMinorVersion?: string;
    usedTime?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceSpecShrinkRequest extends $tea.Model {
    autoUseCoupon?: boolean;
    burstingEnabled?: boolean;
    category?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    dedicatedHostGroupId?: string;
    direction?: string;
    effectiveTime?: string;
    engineVersion?: string;
    ownerAccount?: string;
    ownerId?: number;
    payType?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    serverlessConfigurationShrink?: string;
    sourceBiz?: string;
    switchTime?: string;
    targetMinorVersion?: string;
    usedTime?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceSpecResponseBody extends $tea.Model {
    DBInstanceId?: string;
    orderId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceSpecResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceSpecResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceTDERequest extends $tea.Model {
    certificate?: string;
    DBInstanceId?: string;
    DBName?: string;
    encryptionKey?: string;
    isRotate?: boolean;
    ownerAccount?: string;
    ownerId?: number;
    passWord?: string;
    privateKey?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    roleArn?: string;
    TDEStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceTDEResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceTDEResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBInstanceTDEResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBNodeRequest extends $tea.Model {
    autoPay?: boolean;
    clientToken?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: string;
    DBInstanceStorageType?: string;
    DBNode?: ModifyDBNodeRequestDBNode[];
    dryRun?: boolean;
    effectiveTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    produceAsync?: boolean;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBNodeShrinkRequest extends $tea.Model {
    autoPay?: boolean;
    clientToken?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: string;
    DBInstanceStorageType?: string;
    DBNodeShrink?: string;
    dryRun?: boolean;
    effectiveTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    produceAsync?: boolean;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBNodeResponseBody extends $tea.Model {
    DBInstanceId?: string;
    orderId?: number;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBNodeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBNodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyRequest extends $tea.Model {
    configDBProxyService?: string;
    DBInstanceId?: string;
    DBProxyEngineType?: string;
    DBProxyInstanceNum?: string;
    DBProxyInstanceType?: string;
    instanceNetworkType?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    VPCId?: string;
    vSwitchId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBProxyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyEndpointRequest extends $tea.Model {
    configDBProxyFeatures?: string;
    DBInstanceId?: string;
    DBProxyEndpointId?: string;
    DBProxyEngineType?: string;
    dbEndpointAliases?: string;
    dbEndpointOperator?: string;
    dbEndpointReadWriteMode?: string;
    dbEndpointType?: string;
    ownerId?: number;
    readOnlyInstanceDistributionType?: string;
    readOnlyInstanceMaxDelayTime?: string;
    readOnlyInstanceWeight?: string;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyEndpointResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyEndpointResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBProxyEndpointResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyEndpointAddressRequest extends $tea.Model {
    DBInstanceId?: string;
    DBProxyConnectStringNetType?: string;
    DBProxyEndpointId?: string;
    DBProxyEngineType?: string;
    DBProxyNewConnectString?: string;
    DBProxyNewConnectStringPort?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyEndpointAddressResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyEndpointAddressResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBProxyEndpointAddressResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyInstanceRequest extends $tea.Model {
    DBInstanceId?: string;
    DBProxyEngineType?: string;
    DBProxyInstanceNum?: string;
    DBProxyInstanceType?: string;
    effectiveSpecificTime?: string;
    effectiveTime?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyInstanceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBProxyInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDBProxyInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDTCSecurityIpHostsForSQLServerRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityIpHosts?: string;
    securityToken?: string;
    whiteListGroupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDTCSecurityIpHostsForSQLServerResponseBody extends $tea.Model {
    DBInstanceId?: string;
    DTCSetResult?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDTCSecurityIpHostsForSQLServerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDTCSecurityIpHostsForSQLServerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDasInstanceConfigRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    storageAutoScale?: string;
    storageThreshold?: number;
    storageUpperBound?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDasInstanceConfigResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDasInstanceConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDasInstanceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDatabaseConfigRequest extends $tea.Model {
    DBInstanceId?: string;
    DBName?: string;
    databasePropertyName?: string;
    databasePropertyValue?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDatabaseConfigResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDatabaseConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDatabaseConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDbProxyInstanceSslRequest extends $tea.Model {
    DBProxyEngineType?: string;
    dbInstanceId?: string;
    dbProxyConnectString?: string;
    dbProxyEndpointId?: string;
    dbProxySslEnabled?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDbProxyInstanceSslResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDbProxyInstanceSslResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyDbProxyInstanceSslResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyEventInfoRequest extends $tea.Model {
    actionParams?: string;
    eventAction?: string;
    eventId?: string;
    regionId?: string;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyEventInfoResponseBody extends $tea.Model {
    errorCode?: string;
    errorEventId?: string;
    requestId?: string;
    successCount?: number;
    successEventId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyEventInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyEventInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyHADiagnoseConfigRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    tcpConnectionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyHADiagnoseConfigResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyHADiagnoseConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyHADiagnoseConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyHASwitchConfigRequest extends $tea.Model {
    DBInstanceId?: string;
    HAConfig?: string;
    manualHATime?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyHASwitchConfigResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyHASwitchConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyHASwitchConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceAutoRenewalAttributeRequest extends $tea.Model {
    autoRenew?: string;
    clientToken?: string;
    DBInstanceId?: string;
    duration?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceAutoRenewalAttributeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceAutoRenewalAttributeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyInstanceAutoRenewalAttributeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceCrossBackupPolicyRequest extends $tea.Model {
    backupEnabled?: string;
    crossBackupRegion?: string;
    crossBackupType?: string;
    DBInstanceId?: string;
    logBackupEnabled?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    retentType?: number;
    retention?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceCrossBackupPolicyResponseBody extends $tea.Model {
    backupEnabled?: string;
    crossBackupRegion?: string;
    crossBackupType?: string;
    DBInstanceId?: string;
    logBackupEnabled?: string;
    regionId?: string;
    requestId?: string;
    retentType?: number;
    retention?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyInstanceCrossBackupPolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyInstanceCrossBackupPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyPGHbaConfigRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    hbaItem?: ModifyPGHbaConfigRequestHbaItem[];
    opsType?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyPGHbaConfigResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyPGHbaConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyPGHbaConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyParameterRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    forcerestart?: boolean;
    ownerAccount?: string;
    ownerId?: number;
    parameterGroupId?: string;
    parameters?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    switchTime?: string;
    switchTimeMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyParameterResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyParameterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyParameterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyParameterGroupRequest extends $tea.Model {
    modifyMode?: string;
    ownerId?: number;
    parameterGroupDesc?: string;
    parameterGroupId?: string;
    parameterGroupName?: string;
    parameters?: string;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyParameterGroupResponseBody extends $tea.Model {
    parameterGroupId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyParameterGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyParameterGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyReadWriteSplittingConnectionRequest extends $tea.Model {
    connectionStringPrefix?: string;
    DBInstanceId?: string;
    distributionType?: string;
    maxDelayTime?: string;
    ownerAccount?: string;
    ownerId?: number;
    port?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    weight?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyReadWriteSplittingConnectionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyReadWriteSplittingConnectionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyReadWriteSplittingConnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyReadonlyInstanceDelayReplicationTimeRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    readSQLReplicationTime?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyReadonlyInstanceDelayReplicationTimeResponseBody extends $tea.Model {
    DBInstanceId?: string;
    readSQLReplicationTime?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyReadonlyInstanceDelayReplicationTimeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyReadonlyInstanceDelayReplicationTimeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyResourceGroupRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyResourceGroupResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyResourceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyResourceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySQLCollectorPolicyRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    SQLCollectorStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySQLCollectorPolicyResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySQLCollectorPolicyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifySQLCollectorPolicyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySQLCollectorRetentionRequest extends $tea.Model {
    configValue?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySQLCollectorRetentionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySQLCollectorRetentionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifySQLCollectorRetentionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityGroupConfigurationRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    securityGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityGroupConfigurationResponseBody extends $tea.Model {
    DBInstanceName?: string;
    items?: ModifySecurityGroupConfigurationResponseBodyItems;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityGroupConfigurationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifySecurityGroupConfigurationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityIpsRequest extends $tea.Model {
    DBInstanceIPArrayAttribute?: string;
    DBInstanceIPArrayName?: string;
    DBInstanceId?: string;
    freshWhiteListReadins?: string;
    modifyMode?: string;
    resourceOwnerId?: number;
    securityIPType?: string;
    securityIps?: string;
    whitelistNetworkType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityIpsResponseBody extends $tea.Model {
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityIpsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifySecurityIpsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyTaskInfoRequest extends $tea.Model {
    actionParams?: string;
    regionId?: string;
    resourceOwnerAccount?: number;
    resourceOwnerId?: number;
    securityToken?: string;
    stepName?: string;
    taskAction?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyTaskInfoResponseBody extends $tea.Model {
    errorCode?: string;
    errorTaskId?: string;
    requestId?: string;
    successCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyTaskInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyTaskInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWhitelistTemplateRequest extends $tea.Model {
    ipWhitelist?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateId?: number;
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWhitelistTemplateResponseBody extends $tea.Model {
    code?: string;
    data?: ModifyWhitelistTemplateResponseBodyData;
    httpStatusCode?: number;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWhitelistTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyWhitelistTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForCreateDBNodesRequest extends $tea.Model {
    autoPay?: boolean;
    businessInfo?: string;
    clientToken?: string;
    commodityCode?: string;
    DBInstanceId?: string;
    DBNode?: PreCheckCreateOrderForCreateDBNodesRequestDBNode[];
    engineVersion?: string;
    nodeType?: string;
    ownerId?: number;
    promotionCode?: string;
    regionId?: string;
    resource?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForCreateDBNodesShrinkRequest extends $tea.Model {
    autoPay?: boolean;
    businessInfo?: string;
    clientToken?: string;
    commodityCode?: string;
    DBInstanceId?: string;
    DBNodeShrink?: string;
    engineVersion?: string;
    nodeType?: string;
    ownerId?: number;
    promotionCode?: string;
    regionId?: string;
    resource?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForCreateDBNodesResponseBody extends $tea.Model {
    failures?: PreCheckCreateOrderForCreateDBNodesResponseBodyFailures;
    preCheckResult?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForCreateDBNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PreCheckCreateOrderForCreateDBNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForDeleteDBNodesRequest extends $tea.Model {
    autoPay?: boolean;
    businessInfo?: string;
    clientToken?: string;
    commodityCode?: string;
    DBInstanceId?: string;
    DBNodeId?: string[];
    engineVersion?: string;
    nodeType?: string;
    ownerId?: number;
    promotionCode?: string;
    regionId?: string;
    resource?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForDeleteDBNodesShrinkRequest extends $tea.Model {
    autoPay?: boolean;
    businessInfo?: string;
    clientToken?: string;
    commodityCode?: string;
    DBInstanceId?: string;
    DBNodeIdShrink?: string;
    engineVersion?: string;
    nodeType?: string;
    ownerId?: number;
    promotionCode?: string;
    regionId?: string;
    resource?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForDeleteDBNodesResponseBody extends $tea.Model {
    failures?: PreCheckCreateOrderForDeleteDBNodesResponseBodyFailures;
    preCheckResult?: boolean;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForDeleteDBNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PreCheckCreateOrderForDeleteDBNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PurgeDBInstanceLogRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PurgeDBInstanceLogResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PurgeDBInstanceLogResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PurgeDBInstanceLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryNotifyRequest extends $tea.Model {
    from?: string;
    pageNumber?: number;
    pageSize?: number;
    to?: string;
    withConfirmed?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryNotifyResponseBody extends $tea.Model {
    data?: QueryNotifyResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryNotifyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryNotifyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecommendByCodeRequest extends $tea.Model {
    code?: string;
    ownerId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecommendByCodeResponseBody extends $tea.Model {
    data?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecommendByCodeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryRecommendByCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RebuildDBInstanceRequest extends $tea.Model {
    DBInstanceId?: string;
    dedicatedHostGroupId?: string;
    dedicatedHostId?: string;
    ownerId?: number;
    rebuildNodeType?: string;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RebuildDBInstanceResponseBody extends $tea.Model {
    migrationId?: number;
    requestId?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RebuildDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RebuildDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReceiveDBInstanceRequest extends $tea.Model {
    DBInstanceId?: string;
    guardDBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReceiveDBInstanceResponseBody extends $tea.Model {
    guardDBInstanceId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReceiveDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ReceiveDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecoveryDBInstanceRequest extends $tea.Model {
    backupId?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    dbNames?: string;
    instanceNetworkType?: string;
    payType?: string;
    period?: string;
    privateIpAddress?: string;
    resourceOwnerId?: number;
    restoreTime?: string;
    targetDBInstanceId?: string;
    usedTime?: string;
    VPCId?: string;
    vSwitchId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecoveryDBInstanceResponseBody extends $tea.Model {
    DBInstanceId?: string;
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecoveryDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RecoveryDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstanceConnectionRequest extends $tea.Model {
    currentConnectionString?: string;
    DBInstanceId?: string;
    instanceNetworkType?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstanceConnectionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstanceConnectionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ReleaseInstanceConnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstancePublicConnectionRequest extends $tea.Model {
    currentConnectionString?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstancePublicConnectionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseInstancePublicConnectionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ReleaseInstancePublicConnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseReadWriteSplittingConnectionRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseReadWriteSplittingConnectionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseReadWriteSplittingConnectionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ReleaseReadWriteSplittingConnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTagsFromResourceRequest extends $tea.Model {
    tag?: RemoveTagsFromResourceRequestTag[];
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    tags?: string;
    proxyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTagsFromResourceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTagsFromResourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RemoveTagsFromResourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewInstanceRequest extends $tea.Model {
    autoPay?: string;
    autoRenew?: string;
    clientToken?: string;
    DBInstanceId?: string;
    ownerId?: number;
    period?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewInstanceResponseBody extends $tea.Model {
    orderId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RenewInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetAccountRequest extends $tea.Model {
    accountName?: string;
    accountPassword?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetAccountResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetAccountResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ResetAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetAccountPasswordRequest extends $tea.Model {
    accountName?: string;
    accountPassword?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetAccountPasswordResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetAccountPasswordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ResetAccountPasswordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestartDBInstanceRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestartDBInstanceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestartDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RestartDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreDdrTableRequest extends $tea.Model {
    backupId?: string;
    clientToken?: string;
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    restoreTime?: string;
    restoreType?: string;
    sourceDBInstanceName?: string;
    sourceRegion?: string;
    tableMeta?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreDdrTableResponseBody extends $tea.Model {
    DBInstanceId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreDdrTableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RestoreDdrTableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreTableRequest extends $tea.Model {
    backupId?: string;
    clientToken?: string;
    DBInstanceId?: string;
    instantRecovery?: boolean;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    restoreTime?: string;
    tableMeta?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreTableResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreTableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RestoreTableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevokeAccountPrivilegeRequest extends $tea.Model {
    accountName?: string;
    DBInstanceId?: string;
    DBName?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevokeAccountPrivilegeResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevokeAccountPrivilegeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RevokeAccountPrivilegeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevokeOperatorPermissionRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevokeOperatorPermissionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevokeOperatorPermissionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RevokeOperatorPermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartDBInstanceRequest extends $tea.Model {
    DBInstanceId?: string;
    DBInstanceTransType?: number;
    dedicatedHostGroupId?: string;
    effectiveTime?: string;
    engineVersion?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    specifiedTime?: string;
    storage?: number;
    targetDBInstanceClass?: string;
    targetDedicatedHostIdForLog?: string;
    targetDedicatedHostIdForMaster?: string;
    targetDedicatedHostIdForSlave?: string;
    vSwitchId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartDBInstanceResponseBody extends $tea.Model {
    migrationId?: number;
    requestId?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: StartDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopDBInstanceRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    regionId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopDBInstanceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopDBInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: StopDBInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDBInstanceHARequest extends $tea.Model {
    DBInstanceId?: string;
    effectiveTime?: string;
    force?: string;
    nodeId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDBInstanceHAResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDBInstanceHAResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SwitchDBInstanceHAResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDBInstanceNetTypeRequest extends $tea.Model {
    clientToken?: string;
    connectionStringPrefix?: string;
    connectionStringType?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    port?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDBInstanceNetTypeResponseBody extends $tea.Model {
    newConnectionString?: string;
    oldConnectionString?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDBInstanceNetTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SwitchDBInstanceNetTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDBInstanceVpcRequest extends $tea.Model {
    DBInstanceId?: string;
    privateIpAddress?: string;
    resourceOwnerId?: number;
    VPCId?: string;
    vSwitchId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDBInstanceVpcResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchDBInstanceVpcResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SwitchDBInstanceVpcResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchGuardToMasterInstanceRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchGuardToMasterInstanceResponseBody extends $tea.Model {
    DBInstanceId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SwitchGuardToMasterInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SwitchGuardToMasterInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesRequest extends $tea.Model {
    ownerId?: number;
    regionId?: string;
    resourceId?: string[];
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    resourceType?: string;
    tag?: TagResourcesRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TerminateMigrateTaskRequest extends $tea.Model {
    DBInstanceId?: string;
    migrateTaskId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TerminateMigrateTaskResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TerminateMigrateTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TerminateMigrateTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformDBInstancePayTypeRequest extends $tea.Model {
    autoRenew?: string;
    businessInfo?: string;
    clientToken?: string;
    DBInstanceId?: string;
    ownerAccount?: string;
    ownerId?: number;
    payType?: string;
    period?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    usedTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformDBInstancePayTypeResponseBody extends $tea.Model {
    chargeType?: string;
    DBInstanceId?: string;
    expiredTime?: string;
    orderId?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformDBInstancePayTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TransformDBInstancePayTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnlockAccountRequest extends $tea.Model {
    accountName?: string;
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnlockAccountResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnlockAccountResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UnlockAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesRequest extends $tea.Model {
    all?: boolean;
    ownerId?: number;
    regionId?: string;
    resourceId?: string[];
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    resourceType?: string;
    tagKey?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UntagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePostgresExtensionsRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    DBNames?: string;
    extensions?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePostgresExtensionsResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePostgresExtensionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdatePostgresExtensionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserBackupFileRequest extends $tea.Model {
    backupId?: string;
    comment?: string;
    ownerId?: number;
    regionId?: string;
    resourceGroupId?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    retention?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserBackupFileResponseBody extends $tea.Model {
    backupId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserBackupFileResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateUserBackupFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceEngineVersionRequest extends $tea.Model {
    clientToken?: string;
    DBInstanceId?: string;
    effectiveTime?: string;
    engineVersion?: string;
    ownerAccount?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceEngineVersionResponseBody extends $tea.Model {
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceEngineVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpgradeDBInstanceEngineVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceKernelVersionRequest extends $tea.Model {
    DBInstanceId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    switchTime?: string;
    targetMinorVersion?: string;
    upgradeTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceKernelVersionResponseBody extends $tea.Model {
    DBInstanceName?: string;
    requestId?: string;
    targetMinorVersion?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceKernelVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpgradeDBInstanceKernelVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceMajorVersionRequest extends $tea.Model {
    collectStatMode?: string;
    DBInstanceClass?: string;
    DBInstanceId?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    instanceNetworkType?: string;
    payType?: string;
    period?: string;
    privateIpAddress?: string;
    resourceOwnerId?: number;
    switchOver?: string;
    switchTime?: string;
    switchTimeMode?: string;
    targetMajorVersion?: string;
    usedTime?: string;
    VPCId?: string;
    vSwitchId?: string;
    zoneId?: string;
    zoneIdSlave1?: string;
    zoneIdSlave2?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceMajorVersionResponseBody extends $tea.Model {
    DBInstanceId?: string;
    orderId?: string;
    requestId?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceMajorVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpgradeDBInstanceMajorVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceMajorVersionPrecheckRequest extends $tea.Model {
    DBInstanceId?: string;
    resourceOwnerId?: number;
    targetMajorVersion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceMajorVersionPrecheckResponseBody extends $tea.Model {
    DBInstanceName?: string;
    requestId?: string;
    targetMajorVersion?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBInstanceMajorVersionPrecheckResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpgradeDBInstanceMajorVersionPrecheckResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBProxyInstanceKernelVersionRequest extends $tea.Model {
    DBInstanceId?: string;
    DBProxyEngineType?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    switchTime?: string;
    upgradeTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBProxyInstanceKernelVersionResponseBody extends $tea.Model {
    DBInstanceName?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDBProxyInstanceKernelVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpgradeDBProxyInstanceKernelVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTagsToResourceRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachWhitelistTemplateToInstanceResponseBodyData extends $tea.Model {
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight extends $tea.Model {
    DBInstanceId?: string;
    DBInstanceType?: string;
    readonlyInstanceSQLDelayedTime?: string;
    weight?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CalculateDBInstanceWeightResponseBodyItems extends $tea.Model {
    DBInstanceWeight?: CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloneDBInstanceRequestServerlessConfig extends $tea.Model {
    autoPause?: boolean;
    maxCapacity?: number;
    minCapacity?: number;
    switchForce?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceRequestServerlessConfig extends $tea.Model {
    autoPause?: boolean;
    maxCapacity?: number;
    minCapacity?: number;
    switchForce?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceShrinkRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceEndpointRequestNodeItems extends $tea.Model {
    DBInstanceId?: string;
    nodeId?: string;
    weight?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceEndpointResponseBodyData extends $tea.Model {
    connectionString?: string;
    DBInstanceEndpointId?: string;
    DBInstanceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBInstanceEndpointAddressResponseBodyData extends $tea.Model {
    connectionString?: string;
    DBInstanceEndpointId?: string;
    DBInstanceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDBNodesRequestDBNode extends $tea.Model {
    classCode?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGADInstanceRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGADInstanceRequestUnitNode extends $tea.Model {
    DBInstanceDescription?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    dbInstanceClass?: string;
    dtsConflict?: string;
    dtsInstanceClass?: string;
    engine?: string;
    engineVersion?: string;
    payType?: string;
    regionID?: string;
    securityIPList?: string;
    vSwitchID?: string;
    vpcID?: string;
    zoneID?: string;
    zoneIDSlave1?: string;
    zoneIDSlave2?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGADInstanceResponseBodyResult extends $tea.Model {
    createMemberCount?: string;
    gadInstanceName?: string;
    taskID?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGadInstanceMemberRequestUnitNode extends $tea.Model {
    DBInstanceDescription?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    dbInstanceClass?: string;
    dtsConflict?: string;
    dtsInstanceClass?: string;
    engine?: string;
    engineVersion?: string;
    regionID?: string;
    securityIPList?: string;
    vSwitchID?: string;
    vpcID?: string;
    zoneID?: string;
    zoneIDSlave1?: string;
    zoneIDSlave2?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGadInstanceMemberResponseBodyResult extends $tea.Model {
    createCount?: string;
    gadInstanceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderForCreateDBNodesRequestDBNode extends $tea.Model {
    classCode?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBackupFileResponseBodyDeletedBaksetIds extends $tea.Model {
    deletedBaksetIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBInstanceEndpointResponseBodyData extends $tea.Model {
    DBInstanceEndpointId?: string;
    DBInstanceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDBInstanceEndpointAddressResponseBodyData extends $tea.Model {
    DBInstanceEndpointId?: string;
    DBInstanceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB extends $tea.Model {
    importDataStatus?: string;
    importDataStatusDescription?: string;
    importDataType?: string;
    importId?: number;
    incrementalImportingTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescibeImportsFromDatabaseResponseBodyItems extends $tea.Model {
    importResultFromDB?: DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege extends $tea.Model {
    accountPrivilege?: string;
    accountPrivilegeDetail?: string;
    DBName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivileges extends $tea.Model {
    databasePrivilege?: DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponseBodyAccountsDBInstanceAccount extends $tea.Model {
    accountDescription?: string;
    accountName?: string;
    accountStatus?: string;
    accountType?: string;
    bypassRLS?: string;
    createDB?: string;
    createRole?: string;
    DBInstanceId?: string;
    databasePrivileges?: DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivileges;
    privExceeded?: string;
    replication?: string;
    validUntil?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAccountsResponseBodyAccounts extends $tea.Model {
    DBInstanceAccount?: DescribeAccountsResponseBodyAccountsDBInstanceAccount[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeActiveOperationTasksResponseBodyItems extends $tea.Model {
    allowCancel?: string;
    allowChange?: string;
    changeLevel?: string;
    changeLevelEn?: string;
    changeLevelZh?: string;
    createdTime?: string;
    currentAVZ?: string;
    dbType?: string;
    dbVersion?: string;
    deadline?: string;
    id?: number;
    impact?: string;
    impactEn?: string;
    impactZh?: string;
    insComment?: string;
    insName?: string;
    modifiedTime?: string;
    prepareInterval?: string;
    region?: string;
    resultInfo?: string;
    startTime?: string;
    status?: number;
    subInsNames?: string[];
    switchTime?: string;
    taskParams?: string;
    taskType?: string;
    taskTypeEn?: string;
    taskTypeZh?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAllWhitelistTemplateResponseBodyDataTemplates extends $tea.Model {
    id?: number;
    ips?: string;
    templateId?: number;
    templateName?: string;
    userId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAllWhitelistTemplateResponseBodyData extends $tea.Model {
    currPageNumbers?: number;
    hasNext?: boolean;
    hasPrev?: boolean;
    maxRecordsPerPage?: number;
    templates?: DescribeAllWhitelistTemplateResponseBodyDataTemplates[];
    totalPageNumbers?: number;
    totalRecords?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange extends $tea.Model {
    maxValue?: number;
    minValue?: number;
    step?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableClassesResponseBodyDBInstanceClasses extends $tea.Model {
    DBInstanceClass?: string;
    DBInstanceStorageRange?: DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableCrossRegionResponseBodyRegions extends $tea.Model {
    region?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableMetricsResponseBodyItems extends $tea.Model {
    description?: string;
    dimension?: string;
    groupKey?: string;
    groupKeyType?: string;
    method?: string;
    metricsKey?: string;
    metricsKeyAlias?: string;
    sortRule?: number;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes extends $tea.Model {
    storageType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys extends $tea.Model {
    category?: string;
    supportedStorageTypes?: DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersions extends $tea.Model {
    supportedCategorys?: DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys[];
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableZonesResponseBodyAvailableZonesSupportedEngines extends $tea.Model {
    engine?: string;
    supportedEngineVersions?: DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAvailableZonesResponseBodyAvailableZones extends $tea.Model {
    regionId?: string;
    supportedEngines?: DescribeAvailableZonesResponseBodyAvailableZonesSupportedEngines[];
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupTasksResponseBodyItemsBackupJob extends $tea.Model {
    backupId?: string;
    backupJobId?: string;
    backupProgressStatus?: string;
    backupStatus?: string;
    jobMode?: string;
    process?: string;
    taskAction?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupTasksResponseBodyItems extends $tea.Model {
    backupJob?: DescribeBackupTasksResponseBodyItemsBackupJob[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsResponseBodyItemsBackupBackupDownloadLinkByDBBackupDownloadLinkByDB extends $tea.Model {
    dataBase?: string;
    downloadLink?: string;
    intranetDownloadLink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsResponseBodyItemsBackupBackupDownloadLinkByDB extends $tea.Model {
    backupDownloadLinkByDB?: DescribeBackupsResponseBodyItemsBackupBackupDownloadLinkByDBBackupDownloadLinkByDB[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsResponseBodyItemsBackup extends $tea.Model {
    backupDownloadLinkByDB?: DescribeBackupsResponseBodyItemsBackupBackupDownloadLinkByDB;
    backupDownloadURL?: string;
    backupEndTime?: string;
    backupId?: string;
    backupInitiator?: string;
    backupIntranetDownloadURL?: string;
    backupMethod?: string;
    backupMode?: string;
    backupSize?: number;
    backupStartTime?: string;
    backupStatus?: string;
    backupType?: string;
    checksum?: string;
    consistentTime?: number;
    copyOnlyBackup?: string;
    DBInstanceId?: string;
    encryption?: string;
    hostInstanceID?: string;
    isAvail?: number;
    metaStatus?: string;
    resourceGroupId?: string;
    storageClass?: string;
    storeStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBackupsResponseBodyItems extends $tea.Model {
    backup?: DescribeBackupsResponseBodyItemsBackup[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBinlogFilesResponseBodyItemsBinLogFile extends $tea.Model {
    checksum?: string;
    downloadLink?: string;
    fileSize?: number;
    hostInstanceID?: string;
    intranetDownloadLink?: string;
    linkExpiredTime?: string;
    logBeginTime?: string;
    logEndTime?: string;
    logFileName?: string;
    remoteStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeBinlogFilesResponseBodyItems extends $tea.Model {
    binLogFile?: DescribeBinlogFilesResponseBodyItemsBinLogFile[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCharacterSetNameResponseBodyCharacterSetNameItems extends $tea.Model {
    characterSetName?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCloudMigrationPrecheckResultResponseBodyItems extends $tea.Model {
    detail?: string;
    gmtCreated?: string;
    gmtModified?: string;
    sourceAccount?: string;
    sourceCategory?: string;
    sourceIpAddress?: string;
    sourcePassword?: string;
    sourcePort?: number;
    targetEip?: string;
    targetInstanceName?: string;
    taskId?: number;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCloudMigrationResultResponseBodyItems extends $tea.Model {
    detail?: string;
    gmtCreated?: string;
    gmtModified?: string;
    migrateStage?: string;
    replicationInfo?: string;
    replicationState?: string;
    sourceAccount?: string;
    sourceCategory?: string;
    sourceIpAddress?: string;
    sourcePassword?: string;
    sourcePort?: number;
    switchTime?: string;
    targetEip?: string;
    targetInstanceName?: string;
    taskId?: number;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone extends $tea.Model {
    description?: string;
    standardTimeOffset?: string;
    timeZone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCollationTimeZonesResponseBodyCollationTimeZones extends $tea.Model {
    collationTimeZone?: DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossBackupMetaListResponseBodyItemsMeta extends $tea.Model {
    database?: string;
    size?: string;
    tables?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossBackupMetaListResponseBodyItems extends $tea.Model {
    meta?: DescribeCrossBackupMetaListResponseBodyItemsMeta[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem extends $tea.Model {
    backupEnabled?: string;
    backupEnabledTime?: string;
    crossBackupRegion?: string;
    crossBackupType?: string;
    DBInstanceDescription?: string;
    DBInstanceId?: string;
    DBInstanceStatus?: string;
    engine?: string;
    engineVersion?: string;
    lockMode?: string;
    logBackupEnabled?: string;
    logBackupEnabledTime?: string;
    retentType?: number;
    retention?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionBackupDBInstanceResponseBodyItems extends $tea.Model {
    item?: DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionBackupsResponseBodyItemsItemRestoreRegions extends $tea.Model {
    restoreRegion?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionBackupsResponseBodyItemsItem extends $tea.Model {
    backupEndTime?: string;
    backupMethod?: string;
    backupSetScale?: number;
    backupSetStatus?: number;
    backupStartTime?: string;
    backupType?: string;
    category?: string;
    consistentTime?: string;
    crossBackupDownloadLink?: string;
    crossBackupId?: number;
    crossBackupRegion?: string;
    crossBackupSetFile?: string;
    crossBackupSetLocation?: string;
    crossBackupSetSize?: number;
    DBInstanceStorageType?: string;
    engine?: string;
    engineVersion?: string;
    instanceId?: number;
    restoreRegions?: DescribeCrossRegionBackupsResponseBodyItemsItemRestoreRegions;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionBackupsResponseBodyItems extends $tea.Model {
    item?: DescribeCrossRegionBackupsResponseBodyItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionLogBackupFilesResponseBodyItemsItem extends $tea.Model {
    crossBackupRegion?: string;
    crossDownloadLink?: string;
    crossIntranetDownloadLink?: string;
    crossLogBackupId?: number;
    crossLogBackupSize?: number;
    instanceId?: number;
    linkExpiredTime?: string;
    logBeginTime?: string;
    logEndTime?: string;
    logFileName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrossRegionLogBackupFilesResponseBodyItems extends $tea.Model {
    item?: DescribeCrossRegionLogBackupFilesResponseBodyItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCurrentModifyOrderResponseBodyModifyOrder extends $tea.Model {
    classGroup?: string;
    cpu?: string;
    dbInstanceId?: string;
    effectiveTime?: string;
    mark?: string;
    memoryClass?: string;
    status?: string;
    storage?: string;
    targetDBInstanceClass?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCustinsResourceInfoResponseBodyData extends $tea.Model {
    cpuAdjustDeadline?: string;
    cpuAdjustableMaxRatio?: string;
    cpuAdjustableMaxValue?: string;
    cpuIncreaseRatio?: string;
    cpuIncreaseRatioValue?: string;
    DBInstanceId?: string;
    iopsAdjustableMaxValue?: string;
    maxConnAdjustDeadline?: string;
    maxConnAdjustableMaxValue?: string;
    maxConnIncreaseRatio?: string;
    maxConnIncreaseRatioValue?: string;
    maxIopsAdjustDeadline?: string;
    maxIopsIncreaseRatio?: string;
    maxIopsIncreaseRatioValue?: string;
    memAdjustableMaxRatio?: string;
    memAdjustableMaxValue?: string;
    memoryAdjustDeadline?: string;
    memoryIncreaseRatio?: string;
    memoryIncreaseRatioValue?: string;
    originCpu?: string;
    originMaxConn?: string;
    originMaxIops?: string;
    originMemory?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeBabelfishConfig extends $tea.Model {
    babelfishEnabled?: string;
    migrationMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeDBClusterNodesDBClusterNode extends $tea.Model {
    classCode?: string;
    classType?: string;
    cpu?: string;
    memory?: string;
    nodeId?: string;
    nodeRegionId?: string;
    nodeRole?: string;
    nodeZoneId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeDBClusterNodes extends $tea.Model {
    DBClusterNode?: DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeDBClusterNodesDBClusterNode[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtraDBInstanceIds extends $tea.Model {
    DBInstanceId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtra extends $tea.Model {
    DBInstanceIds?: DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtraDBInstanceIds;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId extends $tea.Model {
    DBInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIds extends $tea.Model {
    readOnlyDBInstanceId?: DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeServerlessConfig extends $tea.Model {
    autoPause?: boolean;
    scaleMax?: number;
    scaleMin?: number;
    switchForce?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZonesSlaveZone extends $tea.Model {
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZones extends $tea.Model {
    slaveZone?: DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZonesSlaveZone[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute extends $tea.Model {
    accountMaxQuantity?: number;
    advancedFeatures?: string;
    autoUpgradeMinorVersion?: string;
    availabilityValue?: string;
    babelfishConfig?: DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeBabelfishConfig;
    bpeEnabled?: string;
    burstingEnabled?: boolean;
    category?: string;
    collation?: string;
    connectionMode?: string;
    connectionString?: string;
    consoleVersion?: string;
    creationTime?: string;
    currentKernelVersion?: string;
    DBClusterNodes?: DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeDBClusterNodes;
    DBInstanceCPU?: string;
    DBInstanceClass?: string;
    DBInstanceClassType?: string;
    DBInstanceDescription?: string;
    DBInstanceDiskUsed?: string;
    DBInstanceId?: string;
    DBInstanceMemory?: number;
    DBInstanceNetType?: string;
    DBInstanceStatus?: string;
    DBInstanceStorage?: number;
    DBInstanceStorageType?: string;
    DBInstanceType?: string;
    DBMaxQuantity?: number;
    dedicatedHostGroupId?: string;
    deletionProtection?: boolean;
    engine?: string;
    engineVersion?: string;
    expireTime?: string;
    extra?: DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtra;
    generalGroupName?: string;
    guardDBInstanceId?: string;
    IPType?: string;
    incrementSourceDBInstanceId?: string;
    instanceNetworkType?: string;
    instructionSetArch?: string;
    latestKernelVersion?: string;
    lockMode?: string;
    lockReason?: string;
    maintainTime?: string;
    masterInstanceId?: string;
    masterZone?: string;
    maxConnections?: number;
    maxIOMBPS?: number;
    maxIOPS?: number;
    PGBouncerEnabled?: string;
    payType?: string;
    port?: string;
    proxyType?: number;
    readOnlyDBInstanceIds?: DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIds;
    readonlyInstanceSQLDelayedTime?: string;
    regionId?: string;
    resourceGroupId?: string;
    securityIPList?: string;
    securityIPMode?: string;
    serverlessConfig?: DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeServerlessConfig;
    slaveZones?: DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZones;
    superPermissionMode?: string;
    tempDBInstanceId?: string;
    timeZone?: string;
    tips?: string;
    tipsLevel?: number;
    vSwitchId?: string;
    vpcCloudInstanceId?: string;
    vpcId?: string;
    zoneId?: string;
    kindCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceAttributeResponseBodyItems extends $tea.Model {
    DBInstanceAttribute?: DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceByTagsResponseBodyItemsDBInstanceTagTagsTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceByTagsResponseBodyItemsDBInstanceTagTags extends $tea.Model {
    tag?: DescribeDBInstanceByTagsResponseBodyItemsDBInstanceTagTagsTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceByTagsResponseBodyItemsDBInstanceTag extends $tea.Model {
    DBInstanceId?: string;
    tags?: DescribeDBInstanceByTagsResponseBodyItemsDBInstanceTagTags;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceByTagsResponseBodyItems extends $tea.Model {
    DBInstanceTag?: DescribeDBInstanceByTagsResponseBodyItemsDBInstanceTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEncryptionKeyResponseBodyEncryptionKeyList extends $tea.Model {
    aliasName?: string;
    creator?: string;
    deleteDate?: string;
    description?: string;
    encryptionKey?: string;
    encryptionKeyStatus?: string;
    keyType?: string;
    keyUsage?: string;
    materialExpireTime?: string;
    origin?: string;
    usedBy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpointsDBInstanceEndpointAddressItemsAddressItem extends $tea.Model {
    connectionString?: string;
    ipAddress?: string;
    ipType?: string;
    port?: string;
    vSwitchId?: string;
    vpcId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpointsDBInstanceEndpointAddressItems extends $tea.Model {
    addressItem?: DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpointsDBInstanceEndpointAddressItemsAddressItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpointsDBInstanceEndpointNodeItemsNodeItem extends $tea.Model {
    DBInstanceId?: string;
    nodeId?: string;
    weight?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpointsDBInstanceEndpointNodeItems extends $tea.Model {
    nodeItem?: DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpointsDBInstanceEndpointNodeItemsNodeItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpointsDBInstanceEndpoint extends $tea.Model {
    addressItems?: DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpointsDBInstanceEndpointAddressItems;
    endpointDescription?: string;
    endpointId?: string;
    endpointType?: string;
    nodeItems?: DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpointsDBInstanceEndpointNodeItems;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpoints extends $tea.Model {
    DBInstanceEndpoint?: DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpointsDBInstanceEndpoint[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceEndpointsResponseBodyData extends $tea.Model {
    DBInstanceEndpoints?: DescribeDBInstanceEndpointsResponseBodyDataDBInstanceEndpoints;
    DBInstanceName?: string;
    ipVersion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo extends $tea.Model {
    dataSyncTime?: string;
    logSyncTime?: string;
    nodeId?: string;
    nodeType?: string;
    regionId?: string;
    syncStatus?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceHAConfigResponseBodyHostInstanceInfos extends $tea.Model {
    nodeInfo?: DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray extends $tea.Model {
    DBInstanceIPArrayAttribute?: string;
    DBInstanceIPArrayName?: string;
    securityIPList?: string;
    securityIPType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceIPArrayListResponseBodyItems extends $tea.Model {
    DBInstanceIPArray?: DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceMetricsResponseBodyItems extends $tea.Model {
    description?: string;
    dimension?: string;
    groupKey?: string;
    groupKeyType?: string;
    method?: string;
    metricsKey?: string;
    metricsKeyAlias?: string;
    sortRule?: number;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight extends $tea.Model {
    availability?: string;
    DBInstanceId?: string;
    DBInstanceType?: string;
    role?: string;
    weight?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights extends $tea.Model {
    DBInstanceWeight?: DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup extends $tea.Model {
    securityIPGroupName?: string;
    securityIPs?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups extends $tea.Model {
    securityIPGroup?: DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo extends $tea.Model {
    babelfishPort?: string;
    connectionString?: string;
    connectionStringType?: string;
    DBInstanceWeights?: DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights;
    distributionType?: string;
    expiredTime?: string;
    IPAddress?: string;
    IPType?: string;
    maxDelayTime?: string;
    PGBouncerPort?: string;
    port?: string;
    securityIPGroups?: DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups;
    upgradeable?: string;
    VPCId?: string;
    vSwitchId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos extends $tea.Model {
    DBInstanceNetInfo?: DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight extends $tea.Model {
    availability?: string;
    DBInstanceId?: string;
    DBInstanceType?: string;
    weight?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights extends $tea.Model {
    DBInstanceWeight?: DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup extends $tea.Model {
    securityIPGroupName?: string;
    securityIPs?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups extends $tea.Model {
    securityIPGroup?: DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfosDBInstanceNetInfo extends $tea.Model {
    availability?: string;
    connectionString?: string;
    connectionStringType?: string;
    DBInstanceWeights?: DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights;
    distributionType?: string;
    IPAddress?: string;
    IPType?: string;
    maxDelayTime?: string;
    port?: string;
    securityIPGroups?: DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups;
    upgradeable?: string;
    VPCId?: string;
    vSwitchId?: string;
    expiredTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfos extends $tea.Model {
    DBInstanceNetInfo?: DescribeDBInstanceNetInfoForChannelResponseBodyDBInstanceNetInfosDBInstanceNetInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue extends $tea.Model {
    date?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValues extends $tea.Model {
    performanceValue?: DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey extends $tea.Model {
    key?: string;
    unit?: string;
    valueFormat?: string;
    values?: DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValues;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancePerformanceResponseBodyPerformanceKeys extends $tea.Model {
    performanceKey?: DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceTDEResponseBodyDatabasesDatabase extends $tea.Model {
    DBName?: string;
    TDEStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstanceTDEResponseBodyDatabases extends $tea.Model {
    database?: DescribeDBInstanceTDEResponseBodyDatabasesDatabase[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId extends $tea.Model {
    DBInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIds extends $tea.Model {
    readOnlyDBInstanceId?: DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesResponseBodyItemsDBInstance extends $tea.Model {
    bpeEnabled?: string;
    burstingEnabled?: boolean;
    category?: string;
    connectionMode?: string;
    connectionString?: string;
    createTime?: string;
    DBInstanceClass?: string;
    DBInstanceDescription?: string;
    DBInstanceId?: string;
    DBInstanceNetType?: string;
    DBInstanceStatus?: string;
    DBInstanceStorageType?: string;
    DBInstanceType?: string;
    dedicatedHostGroupId?: string;
    dedicatedHostGroupName?: string;
    dedicatedHostIdForLog?: string;
    dedicatedHostIdForMaster?: string;
    dedicatedHostIdForSlave?: string;
    dedicatedHostNameForLog?: string;
    dedicatedHostNameForMaster?: string;
    dedicatedHostNameForSlave?: string;
    dedicatedHostZoneIdForLog?: string;
    dedicatedHostZoneIdForMaster?: string;
    dedicatedHostZoneIdForSlave?: string;
    deletionProtection?: boolean;
    destroyTime?: string;
    engine?: string;
    engineVersion?: string;
    expireTime?: string;
    generalGroupName?: string;
    guardDBInstanceId?: string;
    instanceNetworkType?: string;
    lockMode?: string;
    lockReason?: string;
    masterInstanceId?: string;
    mutriORsignle?: boolean;
    payType?: string;
    readOnlyDBInstanceIds?: DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIds;
    regionId?: string;
    resourceGroupId?: string;
    switchWeight?: number;
    tempDBInstanceId?: string;
    tips?: string;
    tipsLevel?: number;
    vSwitchId?: string;
    vpcCloudInstanceId?: string;
    vpcId?: string;
    vpcName?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesResponseBodyItems extends $tea.Model {
    DBInstance?: DescribeDBInstancesResponseBodyItemsDBInstance[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttributeSlaveZones extends $tea.Model {
    slaveRegion?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute extends $tea.Model {
    accountMaxQuantity?: number;
    accountType?: string;
    availabilityValue?: string;
    category?: string;
    connectionMode?: string;
    connectionString?: string;
    creationTime?: string;
    DBInstanceCPU?: string;
    DBInstanceClass?: string;
    DBInstanceClassType?: string;
    DBInstanceDescription?: string;
    DBInstanceId?: string;
    DBInstanceMemory?: number;
    DBInstanceNetType?: string;
    DBInstanceStatus?: string;
    DBInstanceStorage?: number;
    DBInstanceType?: string;
    DBMaxQuantity?: number;
    engine?: string;
    engineVersion?: string;
    expireTime?: string;
    exportKey?: string;
    guardDBInstanceId?: string;
    incrementSourceDBInstanceId?: string;
    instanceNetworkType?: string;
    lockMode?: string;
    lockReason?: string;
    maintainTime?: string;
    masterInstanceId?: string;
    maxConnections?: number;
    maxIOPS?: number;
    payType?: string;
    port?: string;
    readDelayTime?: string;
    regionId?: string;
    securityIPList?: string;
    slaveZones?: DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttributeSlaveZones;
    supportUpgradeAccountType?: string;
    tags?: string;
    tempDBInstanceId?: string;
    vSwitchId?: string;
    vpcId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesAsCsvResponseBodyItems extends $tea.Model {
    DBInstanceAttribute?: DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime extends $tea.Model {
    DBInstanceDescription?: string;
    DBInstanceId?: string;
    DBInstanceStatus?: string;
    expireTime?: string;
    lockMode?: string;
    payType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesByExpireTimeResponseBodyItems extends $tea.Model {
    DBInstanceExpireTime?: DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesByPerformanceRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance extends $tea.Model {
    CPUUsage?: string;
    DBInstanceDescription?: string;
    DBInstanceId?: string;
    diskUsage?: string;
    IOPSUsage?: string;
    sessionUsage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesByPerformanceResponseBodyItems extends $tea.Model {
    DBInstancePerformance?: DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId extends $tea.Model {
    DBInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIds extends $tea.Model {
    readOnlyDBInstanceId?: DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesForCloneResponseBodyItemsDBInstance extends $tea.Model {
    category?: string;
    connectionMode?: string;
    createTime?: string;
    DBInstanceClass?: string;
    DBInstanceDescription?: string;
    DBInstanceId?: string;
    DBInstanceNetType?: string;
    DBInstanceStatus?: string;
    DBInstanceStorageType?: string;
    DBInstanceType?: string;
    destroyTime?: string;
    engine?: string;
    engineVersion?: string;
    expireTime?: string;
    guardDBInstanceId?: string;
    insId?: number;
    instanceNetworkType?: string;
    lockMode?: string;
    lockReason?: string;
    masterInstanceId?: string;
    mutriORsignle?: boolean;
    payType?: string;
    readOnlyDBInstanceIds?: DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIds;
    regionId?: string;
    replicateId?: string;
    resourceGroupId?: string;
    tempDBInstanceId?: string;
    vSwitchId?: string;
    vpcCloudInstanceId?: string;
    vpcId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBInstancesForCloneResponseBodyItems extends $tea.Model {
    DBInstance?: DescribeDBInstancesForCloneResponseBodyItemsDBInstance[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBMiniEngineVersionsResponseBodyMinorVersionItems extends $tea.Model {
    communityMinorVersion?: string;
    engine?: string;
    engineVersion?: string;
    expireStatus?: string;
    isHotfixVersion?: boolean;
    minorVersion?: string;
    nodeType?: string;
    releaseNote?: string;
    releaseType?: string;
    statusDesc?: string;
    tag?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyResponseBodyDBProxyAVZones extends $tea.Model {
    DBProxyAVZones?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems extends $tea.Model {
    DBProxyConnectString?: string;
    DBProxyConnectStringNetType?: string;
    DBProxyConnectStringNetWorkType?: string;
    DBProxyConnectStringPort?: string;
    DBProxyEndpointId?: string;
    DBProxyEndpointName?: string;
    DBProxyVpcId?: string;
    DBProxyVpcInstanceId?: string;
    DBProxyVswitchId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyResponseBodyDBProxyConnectStringItems extends $tea.Model {
    DBProxyConnectStringItems?: DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems extends $tea.Model {
    dbProxyEndpointAliases?: string;
    dbProxyEndpointName?: string;
    dbProxyEndpointType?: string;
    dbProxyReadWriteMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyResponseBodyDbProxyEndpointItems extends $tea.Model {
    dbProxyEndpointItems?: DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems extends $tea.Model {
    dbProxyEndpointConnectString?: string;
    dbProxyEndpointNetType?: string;
    dbProxyEndpointPort?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyEndpointResponseBodyEndpointConnectItems extends $tea.Model {
    endpointConnectItems?: DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue extends $tea.Model {
    date?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValues extends $tea.Model {
    performanceValue?: DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey extends $tea.Model {
    key?: string;
    valueFormat?: string;
    values?: DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValues;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDBProxyPerformanceResponseBodyPerformanceKeys extends $tea.Model {
    performanceKey?: DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDTCSecurityIpHostsForSQLServerResponseBodyItemsWhiteListGroups extends $tea.Model {
    securityIpHosts?: string;
    whitelistGroupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDTCSecurityIpHostsForSQLServerResponseBodyItems extends $tea.Model {
    whiteListGroups?: DescribeDTCSecurityIpHostsForSQLServerResponseBodyItemsWhiteListGroups[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo extends $tea.Model {
    account?: string;
    accountPrivilege?: string;
    accountPrivilegeDetail?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDatabasesResponseBodyDatabasesDatabaseAccounts extends $tea.Model {
    accountPrivilegeInfo?: DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDatabasesResponseBodyDatabasesDatabaseAdvancedInfo extends $tea.Model {
    advancedDbProperty?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDatabasesResponseBodyDatabasesDatabaseBasicInfo extends $tea.Model {
    basicDbProperty?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDatabasesResponseBodyDatabasesDatabaseRuntimeInfo extends $tea.Model {
    runtimeDbProperty?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDatabasesResponseBodyDatabasesDatabase extends $tea.Model {
    accounts?: DescribeDatabasesResponseBodyDatabasesDatabaseAccounts;
    advancedInfo?: DescribeDatabasesResponseBodyDatabasesDatabaseAdvancedInfo;
    basicInfo?: DescribeDatabasesResponseBodyDatabasesDatabaseBasicInfo;
    characterSetName?: string;
    collate?: string;
    connLimit?: string;
    ctype?: string;
    DBDescription?: string;
    DBInstanceId?: string;
    DBName?: string;
    DBStatus?: string;
    engine?: string;
    pageNumber?: number;
    pageSize?: number;
    resourceGroupId?: string;
    runtimeInfo?: DescribeDatabasesResponseBodyDatabasesDatabaseRuntimeInfo;
    tablespace?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDatabasesResponseBodyDatabases extends $tea.Model {
    database?: DescribeDatabasesResponseBodyDatabasesDatabase[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroupsZoneIDList extends $tea.Model {
    zoneIDList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups extends $tea.Model {
    allocationPolicy?: string;
    bastionInstanceId?: string;
    cpuAllocateRation?: number;
    cpuAllocatedAmount?: number;
    cpuAllocationRatio?: number;
    createTime?: string;
    dedicatedHostCountGroupByHostType?: {
        [key: string]: any;
    };
    dedicatedHostGroupDesc?: string;
    dedicatedHostGroupId?: string;
    diskAllocateRation?: number;
    diskAllocatedAmount?: number;
    diskAllocationRatio?: number;
    diskUsedAmount?: number;
    diskUtility?: number;
    engine?: string;
    hostNumber?: number;
    hostReplacePolicy?: string;
    instanceNumber?: number;
    memAllocateRation?: number;
    memAllocatedAmount?: number;
    memAllocationRatio?: number;
    memUsedAmount?: number;
    memUtility?: number;
    openPermission?: string;
    text?: string;
    VPCId?: string;
    zoneIDList?: DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroupsZoneIDList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroups extends $tea.Model {
    dedicatedHostGroups?: DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts extends $tea.Model {
    accountName?: string;
    allocationStatus?: string;
    bastionInstanceId?: string;
    CPUAllocationRatio?: string;
    cpuUsed?: string;
    createdTime?: string;
    dedicatedHostGroupId?: string;
    dedicatedHostId?: string;
    diskAllocationRatio?: string;
    endTime?: string;
    engine?: string;
    hostCPU?: string;
    hostClass?: string;
    hostMem?: string;
    hostName?: string;
    hostStatus?: string;
    hostStorage?: string;
    hostType?: string;
    IPAddress?: string;
    imageCategory?: string;
    instanceNumber?: string;
    memAllocationRatio?: string;
    memoryUsed?: string;
    openPermission?: string;
    storageUsed?: string;
    VPCId?: string;
    vSwitchId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDedicatedHostsResponseBodyDedicatedHosts extends $tea.Model {
    dedicatedHosts?: DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDetachedBackupsResponseBodyItemsBackup extends $tea.Model {
    backupDownloadURL?: string;
    backupEndTime?: string;
    backupId?: string;
    backupIntranetDownloadURL?: string;
    backupMethod?: string;
    backupMode?: string;
    backupSize?: number;
    backupStartTime?: string;
    backupStatus?: string;
    backupType?: string;
    consistentTime?: number;
    DBInstanceComment?: string;
    DBInstanceId?: string;
    hostInstanceID?: string;
    isAvail?: number;
    metaStatus?: string;
    storeStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDetachedBackupsResponseBodyItems extends $tea.Model {
    backup?: DescribeDetachedBackupsResponseBodyItemsBackup[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeDiagnosticReportListResponseBodyReportList extends $tea.Model {
    diagnosticTime?: string;
    downloadURL?: string;
    endTime?: string;
    score?: number;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeErrorLogsResponseBodyItemsErrorLog extends $tea.Model {
    createTime?: string;
    errorInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeErrorLogsResponseBodyItems extends $tea.Model {
    errorLog?: DescribeErrorLogsResponseBodyItemsErrorLog[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEventsResponseBodyEventItemsEventItems extends $tea.Model {
    callerUid?: number;
    eventId?: number;
    eventName?: string;
    eventPayload?: string;
    eventReason?: string;
    eventRecordTime?: string;
    eventTime?: string;
    eventType?: string;
    eventUserType?: string;
    regionId?: string;
    resourceName?: string;
    resourceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEventsResponseBodyEventItems extends $tea.Model {
    eventItems?: DescribeEventsResponseBodyEventItemsEventItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGadInstancesResponseBodyGadInstancesGadInstanceMembers extends $tea.Model {
    DBInstanceID?: string;
    dtsInstance?: string;
    engine?: string;
    engineVersion?: string;
    regionId?: string;
    resourceGroupId?: string;
    role?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeGadInstancesResponseBodyGadInstances extends $tea.Model {
    creationTime?: string;
    description?: string;
    gadInstanceMembers?: DescribeGadInstancesResponseBodyGadInstancesGadInstanceMembers[];
    gadInstanceName?: string;
    modificationTime?: string;
    service?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryEventsResponseBodyItemsData extends $tea.Model {
    cmsProduct?: string;
    dbType?: string;
    detailImpact?: string;
    detailReason?: string;
    endTime?: string;
    eventCategory?: string;
    eventCode?: string;
    eventDetail?: string;
    eventId?: string;
    eventImpact?: string;
    eventLevel?: string;
    eventReason?: string;
    eventStatus?: string;
    eventType?: string;
    gmtCreated?: string;
    gmtModified?: string;
    handleStatus?: string;
    hasLifeCycle?: number;
    instanceId?: string;
    instanceName?: string;
    isClosed?: number;
    product?: string;
    regionId?: string;
    resourceType?: string;
    sourceType?: string;
    startTime?: string;
    uid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryEventsResponseBodyItems extends $tea.Model {
    data?: DescribeHistoryEventsResponseBodyItemsData;
    id?: string;
    region?: string;
    source?: string;
    specversion?: string;
    subject?: string;
    time?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryEventsStatResponseBodyItems extends $tea.Model {
    eventCategory?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksResponseBodyItems extends $tea.Model {
    actionInfo?: string;
    callerSource?: string;
    callerUid?: string;
    currentStepName?: string;
    dbType?: string;
    endTime?: string;
    instanceId?: string;
    instanceName?: string;
    instanceType?: string;
    product?: string;
    progress?: number;
    reasonCode?: string;
    regionId?: string;
    remainTime?: number;
    startTime?: string;
    status?: string;
    taskDetail?: string;
    taskId?: string;
    taskType?: string;
    uid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHistoryTasksStatResponseBodyItems extends $tea.Model {
    status?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem extends $tea.Model {
    autoRenew?: string;
    DBInstanceId?: string;
    duration?: number;
    regionId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceAutoRenewalAttributeResponseBodyItems extends $tea.Model {
    item?: DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceKeywordsResponseBodyWords extends $tea.Model {
    word?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceLinkedWhitelistTemplateResponseBodyDataTemplates extends $tea.Model {
    id?: number;
    ips?: string;
    templateId?: number;
    templateName?: string;
    userId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeInstanceLinkedWhitelistTemplateResponseBodyData extends $tea.Model {
    insName?: string;
    templates?: DescribeInstanceLinkedWhitelistTemplateResponseBodyDataTemplates[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogBackupFilesResponseBodyItemsBinLogFile extends $tea.Model {
    downloadLink?: string;
    fileSize?: number;
    intranetDownloadLink?: string;
    linkExpiredTime?: string;
    logBeginTime?: string;
    logEndTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeLogBackupFilesResponseBodyItems extends $tea.Model {
    binLogFile?: DescribeLogBackupFilesResponseBodyItemsBinLogFile[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMarketingActivityResponseBodyItems extends $tea.Model {
    category?: string;
    chargeType?: string;
    classCode?: string;
    classGroup?: string;
    cpu?: string;
    diskSize?: number;
    engine?: string;
    engineVersion?: string;
    instanceId?: string;
    instanceName?: string;
    maxConnections?: number;
    maxIombps?: number;
    maxIops?: number;
    memory?: number;
    storageType?: string;
    upgradeCategory?: string;
    upgradeClassCode?: string;
    upgradeClassGroup?: string;
    upgradeCpu?: string;
    upgradeDescContent?: string;
    upgradeDiskSize?: number;
    upgradeMaxConnections?: number;
    upgradeMaxIombps?: number;
    upgradeMaxIops?: number;
    upgradeMemory?: number;
    upgradeReferencePrice?: string;
    upgradeStorageType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMetaListResponseBodyItemsMeta extends $tea.Model {
    database?: string;
    size?: string;
    tables?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMetaListResponseBodyItems extends $tea.Model {
    meta?: DescribeMetaListResponseBodyItemsMeta[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMigrateTasksResponseBodyItemsMigrateTask extends $tea.Model {
    backupMode?: string;
    createTime?: string;
    DBName?: string;
    description?: string;
    endTime?: string;
    isDBReplaced?: string;
    migrateTaskId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeMigrateTasksResponseBodyItems extends $tea.Model {
    migrateTask?: DescribeMigrateTasksResponseBodyItemsMigrateTask[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyPGHbaConfigLogResponseBodyHbaLogItemsHbaLogItemAfterHbaItemsHbaItem extends $tea.Model {
    address?: string;
    database?: string;
    mask?: string;
    method?: string;
    option?: string;
    priorityId?: number;
    type?: string;
    user?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyPGHbaConfigLogResponseBodyHbaLogItemsHbaLogItemAfterHbaItems extends $tea.Model {
    hbaItem?: DescribeModifyPGHbaConfigLogResponseBodyHbaLogItemsHbaLogItemAfterHbaItemsHbaItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyPGHbaConfigLogResponseBodyHbaLogItemsHbaLogItemBeforeHbaItemsHbaItem extends $tea.Model {
    address?: string;
    database?: string;
    mask?: string;
    method?: string;
    option?: string;
    priorityId?: number;
    type?: string;
    user?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyPGHbaConfigLogResponseBodyHbaLogItemsHbaLogItemBeforeHbaItems extends $tea.Model {
    hbaItem?: DescribeModifyPGHbaConfigLogResponseBodyHbaLogItemsHbaLogItemBeforeHbaItemsHbaItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyPGHbaConfigLogResponseBodyHbaLogItemsHbaLogItem extends $tea.Model {
    afterHbaItems?: DescribeModifyPGHbaConfigLogResponseBodyHbaLogItemsHbaLogItemAfterHbaItems;
    beforeHbaItems?: DescribeModifyPGHbaConfigLogResponseBodyHbaLogItemsHbaLogItemBeforeHbaItems;
    modifyStatus?: string;
    modifyTime?: string;
    statusReason?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyPGHbaConfigLogResponseBodyHbaLogItems extends $tea.Model {
    hbaLogItem?: DescribeModifyPGHbaConfigLogResponseBodyHbaLogItemsHbaLogItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyParameterLogResponseBodyItemsParameterChangeLog extends $tea.Model {
    modifyTime?: string;
    newParameterValue?: string;
    oldParameterValue?: string;
    parameterName?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeModifyParameterLogResponseBodyItems extends $tea.Model {
    parameterChangeLog?: DescribeModifyParameterLogResponseBodyItemsParameterChangeLog[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeOssDownloadsResponseBodyItemsOssDownload extends $tea.Model {
    backupMode?: string;
    createTime?: string;
    description?: string;
    endTime?: string;
    fileName?: string;
    fileSize?: string;
    isAvailable?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeOssDownloadsResponseBodyItems extends $tea.Model {
    ossDownload?: DescribeOssDownloadsResponseBodyItemsOssDownload[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePGHbaConfigResponseBodyDefaultHbaItemsHbaItem extends $tea.Model {
    address?: string;
    database?: string;
    mask?: string;
    method?: string;
    option?: string;
    priorityId?: number;
    type?: string;
    user?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePGHbaConfigResponseBodyDefaultHbaItems extends $tea.Model {
    hbaItem?: DescribePGHbaConfigResponseBodyDefaultHbaItemsHbaItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePGHbaConfigResponseBodyRunningHbaItemsHbaItem extends $tea.Model {
    address?: string;
    database?: string;
    mask?: string;
    method?: string;
    option?: string;
    priorityId?: number;
    type?: string;
    user?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePGHbaConfigResponseBodyRunningHbaItems extends $tea.Model {
    hbaItem?: DescribePGHbaConfigResponseBodyRunningHbaItemsHbaItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetailParameterDetail extends $tea.Model {
    paramName?: string;
    paramValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetail extends $tea.Model {
    parameterDetail?: DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetailParameterDetail[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupResponseBodyParamGroupParameterGroup extends $tea.Model {
    createTime?: string;
    engine?: string;
    engineVersion?: string;
    forceRestart?: number;
    paramCounts?: number;
    paramDetail?: DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetail;
    parameterGroupDesc?: string;
    parameterGroupId?: string;
    parameterGroupName?: string;
    parameterGroupType?: number;
    updateTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupResponseBodyParamGroup extends $tea.Model {
    parameterGroup?: DescribeParameterGroupResponseBodyParamGroupParameterGroup[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupResponseBodyRelatedCustinsInfoRelatedCustinsInfo extends $tea.Model {
    appliedTime?: string;
    DBInstanceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupResponseBodyRelatedCustinsInfo extends $tea.Model {
    relatedCustinsInfo?: DescribeParameterGroupResponseBodyRelatedCustinsInfoRelatedCustinsInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup extends $tea.Model {
    createTime?: string;
    engine?: string;
    engineVersion?: string;
    forceRestart?: number;
    paramCounts?: number;
    parameterGroupDesc?: string;
    parameterGroupId?: string;
    parameterGroupName?: string;
    parameterGroupType?: number;
    updateTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterGroupsResponseBodyParameterGroups extends $tea.Model {
    parameterGroup?: DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterTemplatesResponseBodyParametersTemplateRecord extends $tea.Model {
    checkingCode?: string;
    forceModify?: string;
    forceRestart?: string;
    parameterDescription?: string;
    parameterName?: string;
    parameterValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParameterTemplatesResponseBodyParameters extends $tea.Model {
    templateRecord?: DescribeParameterTemplatesResponseBodyParametersTemplateRecord[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponseBodyConfigParametersDBInstanceParameter extends $tea.Model {
    parameterDescription?: string;
    parameterName?: string;
    parameterValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponseBodyConfigParameters extends $tea.Model {
    DBInstanceParameter?: DescribeParametersResponseBodyConfigParametersDBInstanceParameter[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponseBodyParamGroupInfo extends $tea.Model {
    paramGroupId?: string;
    parameterGroupDesc?: string;
    parameterGroupName?: string;
    parameterGroupType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponseBodyRunningParametersDBInstanceParameter extends $tea.Model {
    parameterDescription?: string;
    parameterName?: string;
    parameterValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeParametersResponseBodyRunningParameters extends $tea.Model {
    DBInstanceParameter?: DescribeParametersResponseBodyRunningParametersDBInstanceParameter[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePostgresExtensionsResponseBodyInstalledExtensions extends $tea.Model {
    category?: string;
    comment?: string;
    defaultVersion?: string;
    installedVersion?: string;
    name?: string;
    owner?: string;
    priority?: string;
    requires?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePostgresExtensionsResponseBodyUninstalledExtensions extends $tea.Model {
    category?: string;
    comment?: string;
    defaultVersion?: string;
    installedVersion?: string;
    name?: string;
    owner?: string;
    priority?: string;
    requires?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceRequestDBNode extends $tea.Model {
    classCode?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceRequestServerlessConfig extends $tea.Model {
    maxCapacity?: number;
    minCapacity?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyPriceInfoActivityInfo extends $tea.Model {
    checkErrMsg?: string;
    errorCode?: string;
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyPriceInfoCouponsCoupon extends $tea.Model {
    couponNo?: string;
    description?: string;
    isSelected?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyPriceInfoCoupons extends $tea.Model {
    coupon?: DescribePriceResponseBodyPriceInfoCouponsCoupon[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyPriceInfoRuleIds extends $tea.Model {
    ruleId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyPriceInfo extends $tea.Model {
    activityInfo?: DescribePriceResponseBodyPriceInfoActivityInfo;
    coupons?: DescribePriceResponseBodyPriceInfoCoupons;
    currency?: string;
    discountPrice?: number;
    originalPrice?: number;
    ruleIds?: DescribePriceResponseBodyPriceInfoRuleIds;
    tradePrice?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyRulesRule extends $tea.Model {
    description?: string;
    name?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePriceResponseBodyRules extends $tea.Model {
    rule?: DescribePriceResponseBodyRulesRule[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting extends $tea.Model {
    endDate?: string;
    isTop?: string;
    noticeBarContent?: string;
    poppedUpButtonText?: string;
    poppedUpButtonType?: string;
    poppedUpButtonUrl?: string;
    poppedUpContent?: string;
    resourceNiche?: string;
    startDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettings extends $tea.Model {
    rdsInstanceResourceSetting?: DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDBInstanceNames extends $tea.Model {
    readDBInstanceName?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDelayTimes extends $tea.Model {
    readDelayTime?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay extends $tea.Model {
    flushLag?: string;
    flushLatency?: string;
    readDBInstanceName?: string;
    replayLag?: string;
    replayLatency?: string;
    sendLatency?: string;
    writeLag?: string;
    writeLatency?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelay extends $tea.Model {
    readonlyInstanceDelay?: DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeReadDBInstanceDelayResponseBodyItemsItems extends $tea.Model {
    DBInstanceId?: string;
    readDBInstanceNames?: DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDBInstanceNames;
    readDelayTimes?: DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDelayTimes;
    readonlyInstanceDelay?: DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelay;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeReadDBInstanceDelayResponseBodyItems extends $tea.Model {
    items?: DescribeReadDBInstanceDelayResponseBodyItemsItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionInfosResponseBodyRegionsRDSRegion extends $tea.Model {
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionInfosResponseBodyRegions extends $tea.Model {
    RDSRegion?: DescribeRegionInfosResponseBodyRegionsRDSRegion[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponseBodyRegionsRDSRegion extends $tea.Model {
    localName?: string;
    regionEndpoint?: string;
    regionId?: string;
    zoneId?: string;
    zoneName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponseBodyRegions extends $tea.Model {
    RDSRegion?: DescribeRegionsResponseBodyRegionsRDSRegion[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRenewalPriceResponseBodyPriceInfoActivityInfo extends $tea.Model {
    checkErrMsg?: string;
    errorCode?: string;
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon extends $tea.Model {
    couponNo?: string;
    description?: string;
    isSelected?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRenewalPriceResponseBodyPriceInfoCoupons extends $tea.Model {
    coupon?: DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRenewalPriceResponseBodyPriceInfoRuleIds extends $tea.Model {
    ruleId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRenewalPriceResponseBodyPriceInfo extends $tea.Model {
    activityInfo?: DescribeRenewalPriceResponseBodyPriceInfoActivityInfo;
    coupons?: DescribeRenewalPriceResponseBodyPriceInfoCoupons;
    currency?: string;
    discountPrice?: number;
    originalPrice?: number;
    ruleIds?: DescribeRenewalPriceResponseBodyPriceInfoRuleIds;
    tradePrice?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRenewalPriceResponseBodyRulesRule extends $tea.Model {
    description?: string;
    name?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRenewalPriceResponseBodyRules extends $tea.Model {
    rule?: DescribeRenewalPriceResponseBodyRulesRule[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeResourceDetailsResponseBodyRdsEcsSecurityGroupRel extends $tea.Model {
    securityGroupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogFilesResponseBodyItemsLogFile extends $tea.Model {
    fileID?: string;
    logDownloadURL?: string;
    logEndTime?: string;
    logSize?: string;
    logStartTime?: string;
    logStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogFilesResponseBodyItems extends $tea.Model {
    logFile?: DescribeSQLLogFilesResponseBodyItemsLogFile[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogRecordsResponseBodyItemsSQLRecord extends $tea.Model {
    accountName?: string;
    DBName?: string;
    executeTime?: string;
    hostAddress?: string;
    returnRowCounts?: number;
    SQLText?: string;
    threadID?: string;
    totalExecutionTimes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogRecordsResponseBodyItems extends $tea.Model {
    SQLRecord?: DescribeSQLLogRecordsResponseBodyItemsSQLRecord[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem extends $tea.Model {
    avgLatency?: number;
    SQLExecuteTimes?: number;
    SQLText?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItems extends $tea.Model {
    latencyTopNItem?: DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItemsQPSTopNItem extends $tea.Model {
    SQLExecuteTimes?: number;
    SQLText?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItems extends $tea.Model {
    QPSTopNItem?: DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItemsQPSTopNItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogReportListResponseBodyItemsItem extends $tea.Model {
    latencyTopNItems?: DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItems;
    QPSTopNItems?: DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItems;
    reportTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSQLLogReportListResponseBodyItems extends $tea.Model {
    item?: DescribeSQLLogReportListResponseBodyItemsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecretsResponseBodySecrets extends $tea.Model {
    accountId?: string;
    description?: string;
    regionId?: string;
    secretArn?: string;
    secretName?: string;
    username?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation extends $tea.Model {
    networkType?: string;
    regionId?: string;
    securityGroupId?: string;
    securityGroupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSecurityGroupConfigurationResponseBodyItems extends $tea.Model {
    ecsSecurityGroupRelation?: DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlotsResponseBodySlots extends $tea.Model {
    database?: string;
    plugin?: string;
    slotName?: string;
    slotStatus?: string;
    slotType?: string;
    subReplayLag?: string;
    temporary?: string;
    walDelay?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord extends $tea.Model {
    applicationName?: string;
    clientHostName?: string;
    cpuTime?: number;
    DBName?: string;
    executionStartTime?: string;
    hostAddress?: string;
    lastRowsAffectedCount?: number;
    lockTimes?: number;
    logicalIORead?: number;
    parseRowCounts?: number;
    physicalIORead?: number;
    queryTimeMS?: number;
    queryTimes?: number;
    returnRowCounts?: number;
    rowsAffectedCount?: number;
    SQLHash?: string;
    SQLText?: string;
    userName?: string;
    writeIOCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogRecordsResponseBodyItems extends $tea.Model {
    SQLSlowRecord?: DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogsResponseBodyItemsSQLSlowLog extends $tea.Model {
    avgExecutionTime?: number;
    avgIOWriteCounts?: number;
    avgLastRowsAffectedCounts?: number;
    avgLogicalReadCounts?: number;
    avgPhysicalReadCounts?: number;
    avgRowsAffectedCounts?: number;
    createTime?: string;
    DBName?: string;
    maxExecutionTime?: number;
    maxExecutionTimeMS?: number;
    maxIOWriteCounts?: number;
    maxLastRowsAffectedCounts?: number;
    maxLockTime?: number;
    maxLockTimeMS?: number;
    maxLogicalReadCounts?: number;
    maxPhysicalReadCounts?: number;
    maxRowsAffectedCounts?: number;
    minIOWriteCounts?: number;
    minLastRowsAffectedCounts?: number;
    minLogicalReadCounts?: number;
    minPhysicalReadCounts?: number;
    minRowsAffectedCounts?: number;
    mySQLTotalExecutionCounts?: number;
    mySQLTotalExecutionTimes?: number;
    parseMaxRowCount?: number;
    parseTotalRowCounts?: number;
    reportTime?: string;
    returnMaxRowCount?: number;
    returnTotalRowCounts?: number;
    SQLHASH?: string;
    SQLIdStr?: string;
    SQLServerAvgCpuTime?: number;
    SQLServerAvgExecutionTime?: number;
    SQLServerMaxCpuTime?: number;
    SQLServerMinCpuTime?: number;
    SQLServerMinExecutionTime?: number;
    SQLServerTotalCpuTime?: number;
    SQLServerTotalExecutionCounts?: number;
    SQLServerTotalExecutionTimes?: number;
    SQLText?: string;
    slowLogId?: number;
    totalIOWriteCounts?: number;
    totalLastRowsAffectedCounts?: number;
    totalLockTimes?: number;
    totalLogicalReadCounts?: number;
    totalPhysicalReadCounts?: number;
    totalRowsAffectedCounts?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeSlowLogsResponseBodyItems extends $tea.Model {
    SQLSlowLog?: DescribeSlowLogsResponseBodyItemsSQLSlowLog[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTagsResponseBodyItemsTagInfosDBInstanceIds extends $tea.Model {
    DBInstanceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTagsResponseBodyItemsTagInfos extends $tea.Model {
    DBInstanceIds?: DescribeTagsResponseBodyItemsTagInfosDBInstanceIds;
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTagsResponseBodyItems extends $tea.Model {
    tagInfos?: DescribeTagsResponseBodyItemsTagInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTasksResponseBodyItemsTaskProgressInfo extends $tea.Model {
    beginTime?: string;
    currentStepName?: string;
    DBName?: string;
    expectedFinishTime?: string;
    finishTime?: string;
    progress?: string;
    progressInfo?: string;
    remain?: number;
    status?: string;
    stepProgressInfo?: string;
    stepsInfo?: string;
    taskAction?: string;
    taskErrorCode?: string;
    taskErrorMessage?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTasksResponseBodyItems extends $tea.Model {
    taskProgressInfo?: DescribeTasksResponseBodyItemsTaskProgressInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUpgradeMajorVersionPrecheckTaskResponseBodyItems extends $tea.Model {
    checkTime?: string;
    detail?: string;
    effectiveTime?: string;
    result?: string;
    sourceMajorVersion?: string;
    targetMajorVersion?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUpgradeMajorVersionTasksResponseBodyItems extends $tea.Model {
    collectStatMode?: string;
    detail?: string;
    endTime?: string;
    result?: string;
    sourceInsName?: string;
    sourceMajorVersion?: string;
    startTime?: string;
    switchTime?: string;
    targetInsName?: string;
    targetMajorVersion?: string;
    taskId?: number;
    upgradeMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeVSwitchesResponseBodyVSwitchs extends $tea.Model {
    availableIpAddressCount?: string;
    cidrBlock?: string;
    description?: string;
    isDefault?: boolean;
    izNo?: string;
    status?: string;
    vSwitchId?: string;
    vSwitchName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWhitelistTemplateResponseBodyDataTemplate extends $tea.Model {
    id?: number;
    ips?: string;
    templateId?: number;
    templateName?: string;
    userId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWhitelistTemplateResponseBodyData extends $tea.Model {
    template?: DescribeWhitelistTemplateResponseBodyDataTemplate;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWhitelistTemplateLinkedInstanceResponseBodyData extends $tea.Model {
    insName?: string[];
    templateId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachWhitelistTemplateToInstanceResponseBodyData extends $tea.Model {
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDBInstanceTopologyResponseBodyDataConnections extends $tea.Model {
    connectionString?: string;
    DBInstanceName?: string;
    netType?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDBInstanceTopologyResponseBodyDataNodes extends $tea.Model {
    DBInstanceName?: string;
    dedicatedHostGroupId?: string;
    dedicatedHostId?: string;
    nodeId?: string;
    role?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDBInstanceTopologyResponseBodyData extends $tea.Model {
    connections?: GetDBInstanceTopologyResponseBodyDataConnections[];
    DBInstanceName?: string;
    nodes?: GetDBInstanceTopologyResponseBodyDataNodes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems extends $tea.Model {
    certCommonName?: string;
    dbInstanceName?: string;
    endpointName?: string;
    endpointType?: string;
    sslExpiredTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDbProxyInstanceSslResponseBodyDbProxyCertListItems extends $tea.Model {
    dbProxyCertListItems?: GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClassesResponseBodyItems extends $tea.Model {
    classCode?: string;
    classGroup?: string;
    cpu?: string;
    encryptedMemory?: string;
    instructionSetArch?: string;
    maxConnections?: string;
    maxIOMBPS?: string;
    maxIOPS?: string;
    memoryClass?: string;
    referencePrice?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBodyTagResourcesTagResource extends $tea.Model {
    resourceId?: string;
    resourceType?: string;
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBodyTagResources extends $tea.Model {
    tagResource?: ListTagResourcesResponseBodyTagResourcesTagResource[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserBackupFilesResponseBodyRecords extends $tea.Model {
    backupId?: string;
    binlogInfo?: string;
    comment?: string;
    creationTime?: string;
    engine?: string;
    engineVersion?: string;
    finishTime?: string;
    modificationTime?: string;
    ossBucket?: string;
    ossFileMetaData?: string;
    ossFileName?: string;
    ossFilePath?: string;
    ossFileSize?: number;
    ossUrl?: string;
    reason?: string;
    restoreSize?: string;
    retention?: number;
    status?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceEndpointRequestNodeItems extends $tea.Model {
    DBInstanceId?: string;
    nodeId?: string;
    weight?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceEndpointResponseBodyData extends $tea.Model {
    DBInstanceEndpointId?: string;
    DBInstanceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceEndpointAddressResponseBodyData extends $tea.Model {
    DBInstanceEndpointId?: string;
    DBInstanceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBInstanceSpecRequestServerlessConfiguration extends $tea.Model {
    autoPause?: boolean;
    maxCapacity?: number;
    minCapacity?: number;
    switchForce?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyDBNodeRequestDBNode extends $tea.Model {
    classCode?: string;
    nodeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyPGHbaConfigRequestHbaItem extends $tea.Model {
    address?: string;
    database?: string;
    mask?: string;
    method?: string;
    option?: string;
    priorityId?: number;
    type?: string;
    user?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation extends $tea.Model {
    networkType?: string;
    regionId?: string;
    securityGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySecurityGroupConfigurationResponseBodyItems extends $tea.Model {
    ecsSecurityGroupRelation?: ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWhitelistTemplateResponseBodyData extends $tea.Model {
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForCreateDBNodesRequestDBNode extends $tea.Model {
    classCode?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForCreateDBNodesResponseBodyFailuresFailures extends $tea.Model {
    code?: string;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForCreateDBNodesResponseBodyFailures extends $tea.Model {
    failures?: PreCheckCreateOrderForCreateDBNodesResponseBodyFailuresFailures[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForDeleteDBNodesResponseBodyFailuresFailures extends $tea.Model {
    code?: string;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckCreateOrderForDeleteDBNodesResponseBodyFailures extends $tea.Model {
    failures?: PreCheckCreateOrderForDeleteDBNodesResponseBodyFailuresFailures[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryNotifyResponseBodyDataNotifyItemList extends $tea.Model {
    aliUid?: number;
    confirmFlag?: boolean;
    confirmor?: number;
    gmtCreated?: string;
    gmtModified?: string;
    id?: number;
    idempotentCount?: string;
    idempotentId?: string;
    level?: string;
    notifyElement?: string;
    templateName?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryNotifyResponseBodyData extends $tea.Model {
    notifyItemList?: QueryNotifyResponseBodyDataNotifyItemList[];
    pageNumber?: number;
    pageSize?: number;
    totalRecordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTagsFromResourceRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Use the cloud migration feature](~~365562~~)
      *
      * @param request ActivateMigrationTargetInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ActivateMigrationTargetInstanceResponse
     */
    activateMigrationTargetInstanceWithOptions(request: ActivateMigrationTargetInstanceRequest, runtime: $Util.RuntimeOptions): Promise<ActivateMigrationTargetInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Use the cloud migration feature](~~365562~~)
      *
      * @param request ActivateMigrationTargetInstanceRequest
      * @return ActivateMigrationTargetInstanceResponse
     */
    activateMigrationTargetInstance(request: ActivateMigrationTargetInstanceRequest): Promise<ActivateMigrationTargetInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)Usage notes
      * *   Each tag consists of a tag key and a tag value. The tag key is required, and the tag value is optional.
      * *   The tag key and tag value cannot start with aliyun.
      * *   The tag key and tag value are not case-sensitive.
      * *   The maximum length of a tag key is 64 characters, and the maximum length of a tag value is 128 characters.
      * *   A maximum of 10 tags can be added to each instance. Each tag that is added to the same instance must have a unique tag key. If you add a new tag to the instance and the key of the new tag is the same as that of an existing tag, the new tag overwrites the existing tag.
      *
      * @param request AddTagsToResourceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return AddTagsToResourceResponse
     */
    addTagsToResourceWithOptions(request: AddTagsToResourceRequest, runtime: $Util.RuntimeOptions): Promise<AddTagsToResourceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)Usage notes
      * *   Each tag consists of a tag key and a tag value. The tag key is required, and the tag value is optional.
      * *   The tag key and tag value cannot start with aliyun.
      * *   The tag key and tag value are not case-sensitive.
      * *   The maximum length of a tag key is 64 characters, and the maximum length of a tag value is 128 characters.
      * *   A maximum of 10 tags can be added to each instance. Each tag that is added to the same instance must have a unique tag key. If you add a new tag to the instance and the key of the new tag is the same as that of an existing tag, the new tag overwrites the existing tag.
      *
      * @param request AddTagsToResourceRequest
      * @return AddTagsToResourceResponse
     */
    addTagsToResource(request: AddTagsToResourceRequest): Promise<AddTagsToResourceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Apply for a public endpoint for an ApsaraDB RDS for MySQL instance](~~26128~~)
      * *   [Apply for a public endpoint for an ApsaraDB RDS for PostgreSQL instance](~~97738~~)
      * *   [Apply for a public endpoint for an ApsaraDB RDS for SQL Server instance](~~97736~~)
      * *   [Apply for a public endpoint for an ApsaraDB RDS for MariaDB instance](~~97740~~)
      *
      * @param request AllocateInstancePublicConnectionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return AllocateInstancePublicConnectionResponse
     */
    allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: $Util.RuntimeOptions): Promise<AllocateInstancePublicConnectionResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Apply for a public endpoint for an ApsaraDB RDS for MySQL instance](~~26128~~)
      * *   [Apply for a public endpoint for an ApsaraDB RDS for PostgreSQL instance](~~97738~~)
      * *   [Apply for a public endpoint for an ApsaraDB RDS for SQL Server instance](~~97736~~)
      * *   [Apply for a public endpoint for an ApsaraDB RDS for MariaDB instance](~~97740~~)
      *
      * @param request AllocateInstancePublicConnectionRequest
      * @return AllocateInstancePublicConnectionResponse
     */
    allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): Promise<AllocateInstancePublicConnectionResponse>;
    /**
      * If read-only instances are attached to a primary ApsaraDB RDS for SQL Server instance, you can call this operation to apply for a unified read-only routing endpoint for the primary instance. After you apply for a read-only routing endpoint for a primary instance, the existing endpoints of the primary instance and its read-only instances remain valid. In addition, you can still apply for internal and public endpoints.
      * Before you call this operation, make sure that the following requirements are met:
      * *   If the instance runs MySQL, the instance uses a shared proxy.
      * *   The instance is in the Running state.
      * *   Read-only instances are attached to the primary instance.
      * *   The instance does not have an ongoing Data Transmission Service (DTS) migration task.
      * *   The instance runs one of the following database versions and RDS editions:
      *     *   SQL Server (cluster edition)
      *     *   MySQL 5.7 on RDS High-availability Edition with local SSDs
      *     *   MySQL 5.6
      *
      * @param request AllocateReadWriteSplittingConnectionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return AllocateReadWriteSplittingConnectionResponse
     */
    allocateReadWriteSplittingConnectionWithOptions(request: AllocateReadWriteSplittingConnectionRequest, runtime: $Util.RuntimeOptions): Promise<AllocateReadWriteSplittingConnectionResponse>;
    /**
      * If read-only instances are attached to a primary ApsaraDB RDS for SQL Server instance, you can call this operation to apply for a unified read-only routing endpoint for the primary instance. After you apply for a read-only routing endpoint for a primary instance, the existing endpoints of the primary instance and its read-only instances remain valid. In addition, you can still apply for internal and public endpoints.
      * Before you call this operation, make sure that the following requirements are met:
      * *   If the instance runs MySQL, the instance uses a shared proxy.
      * *   The instance is in the Running state.
      * *   Read-only instances are attached to the primary instance.
      * *   The instance does not have an ongoing Data Transmission Service (DTS) migration task.
      * *   The instance runs one of the following database versions and RDS editions:
      *     *   SQL Server (cluster edition)
      *     *   MySQL 5.7 on RDS High-availability Edition with local SSDs
      *     *   MySQL 5.6
      *
      * @param request AllocateReadWriteSplittingConnectionRequest
      * @return AllocateReadWriteSplittingConnectionResponse
     */
    allocateReadWriteSplittingConnection(request: AllocateReadWriteSplittingConnectionRequest): Promise<AllocateReadWriteSplittingConnectionResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      *
      * @param request AttachWhitelistTemplateToInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return AttachWhitelistTemplateToInstanceResponse
     */
    attachWhitelistTemplateToInstanceWithOptions(request: AttachWhitelistTemplateToInstanceRequest, runtime: $Util.RuntimeOptions): Promise<AttachWhitelistTemplateToInstanceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      *
      * @param request AttachWhitelistTemplateToInstanceRequest
      * @return AttachWhitelistTemplateToInstanceResponse
     */
    attachWhitelistTemplateToInstance(request: AttachWhitelistTemplateToInstanceRequest): Promise<AttachWhitelistTemplateToInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### [](#)Feature description
      * When the [read/write splitting](~~51073~~) feature is enabled, this operation is used to calculate system-assigned read weights. For more information about custom read weights, see [DescribeDBInstanceNetInfo](~~610423~~).
      * ### [](#)Prerequisites
      * Before you call this operation, make sure that the following requirements are met:
      * *   If the instance runs MySQL, the instance uses a shared proxy.
      * *   The instance runs one of the following MySQL versions and RDS editions:
      *     *   MySQL 5.7 on RDS High-availability Edition (with local disks)
      *     *   MySQL 5.6
      *     *   SQL Server on RDS Cluster Edition
      *
      * @param request CalculateDBInstanceWeightRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CalculateDBInstanceWeightResponse
     */
    calculateDBInstanceWeightWithOptions(request: CalculateDBInstanceWeightRequest, runtime: $Util.RuntimeOptions): Promise<CalculateDBInstanceWeightResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### [](#)Feature description
      * When the [read/write splitting](~~51073~~) feature is enabled, this operation is used to calculate system-assigned read weights. For more information about custom read weights, see [DescribeDBInstanceNetInfo](~~610423~~).
      * ### [](#)Prerequisites
      * Before you call this operation, make sure that the following requirements are met:
      * *   If the instance runs MySQL, the instance uses a shared proxy.
      * *   The instance runs one of the following MySQL versions and RDS editions:
      *     *   MySQL 5.7 on RDS High-availability Edition (with local disks)
      *     *   MySQL 5.6
      *     *   SQL Server on RDS Cluster Edition
      *
      * @param request CalculateDBInstanceWeightRequest
      * @return CalculateDBInstanceWeightResponse
     */
    calculateDBInstanceWeight(request: CalculateDBInstanceWeightRequest): Promise<CalculateDBInstanceWeightResponse>;
    /**
      * ### [](#)Supported database engine
      * *   SQL Server
      * ### [](#)Usage notes
      * This operation is supported for instances that run SQL Server and belong to the dedicated or dedicated host instance family. For more information about how to start a migration task, see [ImportDatabaseBetweenInstances](~~610592~~).
      * ### [](#)Precautions
      * This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
      *
      * @param request CancelImportRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CancelImportResponse
     */
    cancelImportWithOptions(request: CancelImportRequest, runtime: $Util.RuntimeOptions): Promise<CancelImportResponse>;
    /**
      * ### [](#)Supported database engine
      * *   SQL Server
      * ### [](#)Usage notes
      * This operation is supported for instances that run SQL Server and belong to the dedicated or dedicated host instance family. For more information about how to start a migration task, see [ImportDatabaseBetweenInstances](~~610592~~).
      * ### [](#)Precautions
      * This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
      *
      * @param request CancelImportRequest
      * @return CancelImportResponse
     */
    cancelImport(request: CancelImportRequest): Promise<CancelImportResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request CheckAccountNameAvailableRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CheckAccountNameAvailableResponse
     */
    checkAccountNameAvailableWithOptions(request: CheckAccountNameAvailableRequest, runtime: $Util.RuntimeOptions): Promise<CheckAccountNameAvailableResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request CheckAccountNameAvailableRequest
      * @return CheckAccountNameAvailableResponse
     */
    checkAccountNameAvailable(request: CheckAccountNameAvailableRequest): Promise<CheckAccountNameAvailableResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request CheckCloudResourceAuthorizedRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CheckCloudResourceAuthorizedResponse
     */
    checkCloudResourceAuthorizedWithOptions(request: CheckCloudResourceAuthorizedRequest, runtime: $Util.RuntimeOptions): Promise<CheckCloudResourceAuthorizedResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request CheckCloudResourceAuthorizedRequest
      * @return CheckCloudResourceAuthorizedResponse
     */
    checkCloudResourceAuthorized(request: CheckCloudResourceAuthorizedRequest): Promise<CheckCloudResourceAuthorizedResponse>;
    /**
      * Before you call this operation, make sure that the instance runs one of the following database engines:
      * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
      * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
      * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](~~206671~~).
      * > : If your RDS instance uses the new architecture and is created after October 10, 2022, this feature is not supported for the RDS instance. For more information, see [\\[Notice\\] SLR authorization is required to create an ApsaraDB RDS for PostgreSQL instance from October 10, 2022](~~452313~~).
      *
      * @param request CheckCreateDdrDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CheckCreateDdrDBInstanceResponse
     */
    checkCreateDdrDBInstanceWithOptions(request: CheckCreateDdrDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CheckCreateDdrDBInstanceResponse>;
    /**
      * Before you call this operation, make sure that the instance runs one of the following database engines:
      * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
      * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
      * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](~~206671~~).
      * > : If your RDS instance uses the new architecture and is created after October 10, 2022, this feature is not supported for the RDS instance. For more information, see [\\[Notice\\] SLR authorization is required to create an ApsaraDB RDS for PostgreSQL instance from October 10, 2022](~~452313~~).
      *
      * @param request CheckCreateDdrDBInstanceRequest
      * @return CheckCreateDdrDBInstanceResponse
     */
    checkCreateDdrDBInstance(request: CheckCreateDdrDBInstanceRequest): Promise<CheckCreateDdrDBInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request CheckDBNameAvailableRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CheckDBNameAvailableResponse
     */
    checkDBNameAvailableWithOptions(request: CheckDBNameAvailableRequest, runtime: $Util.RuntimeOptions): Promise<CheckDBNameAvailableResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request CheckDBNameAvailableRequest
      * @return CheckDBNameAvailableResponse
     */
    checkDBNameAvailable(request: CheckDBNameAvailableRequest): Promise<CheckDBNameAvailableResponse>;
    checkInstanceExistWithOptions(request: CheckInstanceExistRequest, runtime: $Util.RuntimeOptions): Promise<CheckInstanceExistResponse>;
    checkInstanceExist(request: CheckInstanceExistRequest): Promise<CheckInstanceExistResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      *
      * @param request CheckServiceLinkedRoleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CheckServiceLinkedRoleResponse
     */
    checkServiceLinkedRoleWithOptions(request: CheckServiceLinkedRoleRequest, runtime: $Util.RuntimeOptions): Promise<CheckServiceLinkedRoleResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      *
      * @param request CheckServiceLinkedRoleRequest
      * @return CheckServiceLinkedRoleResponse
     */
    checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): Promise<CheckServiceLinkedRoleResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Restore data of an ApsaraDB RDS for MySQL instance](~~96147~~)
      * *   [Restore data of an ApsaraDB RDS for PostgreSQL instance](~~96776~~)
      * *   [Restore data of an ApsaraDB RDS for SQL Server instance](~~95722~~)
      * *   [Restore data of an ApsaraDB RDS for MariaDB instance](~~97151~~)
      *
      * @param tmpReq CloneDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CloneDBInstanceResponse
     */
    cloneDBInstanceWithOptions(tmpReq: CloneDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CloneDBInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Restore data of an ApsaraDB RDS for MySQL instance](~~96147~~)
      * *   [Restore data of an ApsaraDB RDS for PostgreSQL instance](~~96776~~)
      * *   [Restore data of an ApsaraDB RDS for SQL Server instance](~~95722~~)
      * *   [Restore data of an ApsaraDB RDS for MariaDB instance](~~97151~~)
      *
      * @param request CloneDBInstanceRequest
      * @return CloneDBInstanceResponse
     */
    cloneDBInstance(request: CloneDBInstanceRequest): Promise<CloneDBInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~)
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~)
      *
      * @param request CloneParameterGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CloneParameterGroupResponse
     */
    cloneParameterGroupWithOptions(request: CloneParameterGroupRequest, runtime: $Util.RuntimeOptions): Promise<CloneParameterGroupResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~)
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~)
      *
      * @param request CloneParameterGroupRequest
      * @return CloneParameterGroupResponse
     */
    cloneParameterGroup(request: CloneParameterGroupRequest): Promise<CloneParameterGroupResponse>;
    /**
      * After you call the QueryNotify operation to query notifications for an instance, you can call this operation to mark the notifications as confirmed. For more information, see [Query notifications for an ApsaraDB RDS instance](~~427959~~).
      *
      * @param tmpReq ConfirmNotifyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ConfirmNotifyResponse
     */
    confirmNotifyWithOptions(tmpReq: ConfirmNotifyRequest, runtime: $Util.RuntimeOptions): Promise<ConfirmNotifyResponse>;
    /**
      * After you call the QueryNotify operation to query notifications for an instance, you can call this operation to mark the notifications as confirmed. For more information, see [Query notifications for an ApsaraDB RDS instance](~~427959~~).
      *
      * @param request ConfirmNotifyRequest
      * @return ConfirmNotifyResponse
     */
    confirmNotify(request: ConfirmNotifyRequest): Promise<ConfirmNotifyResponse>;
    /**
      * This operation is phased out.
      *
      * @param request CopyDatabaseRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CopyDatabaseResponse
     */
    copyDatabaseWithOptions(request: CopyDatabaseRequest, runtime: $Util.RuntimeOptions): Promise<CopyDatabaseResponse>;
    /**
      * This operation is phased out.
      *
      * @param request CopyDatabaseRequest
      * @return CopyDatabaseResponse
     */
    copyDatabase(request: CopyDatabaseRequest): Promise<CopyDatabaseResponse>;
    /**
      * ### Supported database engines
      * RDS SQL Server
      * ### References
      * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Replicate databases between ApsaraDB RDS for SQL Server instances](~~95702~~)
      *
      * @param request CopyDatabaseBetweenInstancesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CopyDatabaseBetweenInstancesResponse
     */
    copyDatabaseBetweenInstancesWithOptions(request: CopyDatabaseBetweenInstancesRequest, runtime: $Util.RuntimeOptions): Promise<CopyDatabaseBetweenInstancesResponse>;
    /**
      * ### Supported database engines
      * RDS SQL Server
      * ### References
      * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Replicate databases between ApsaraDB RDS for SQL Server instances](~~95702~~)
      *
      * @param request CopyDatabaseBetweenInstancesRequest
      * @return CopyDatabaseBetweenInstancesResponse
     */
    copyDatabaseBetweenInstances(request: CopyDatabaseBetweenInstancesRequest): Promise<CopyDatabaseBetweenInstancesResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      * ### References
      * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Create an account on an ApsaraDB RDS for MySQL instance](~~96089~~)
      * *   [Create an account on an ApsaraDB RDS for PostgreSQL instance](~~96753~~)
      * *   [Create an account on an ApsaraDB RDS for SQL Server instance](~~95810~~)
      * *   [Create an account on an ApsaraDB RDS for MariaDB instance](~~97132~~)
      *
      * @param request CreateAccountRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateAccountResponse
     */
    createAccountWithOptions(request: CreateAccountRequest, runtime: $Util.RuntimeOptions): Promise<CreateAccountResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      * ### References
      * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Create an account on an ApsaraDB RDS for MySQL instance](~~96089~~)
      * *   [Create an account on an ApsaraDB RDS for PostgreSQL instance](~~96753~~)
      * *   [Create an account on an ApsaraDB RDS for SQL Server instance](~~95810~~)
      * *   [Create an account on an ApsaraDB RDS for MariaDB instance](~~97132~~)
      *
      * @param request CreateAccountRequest
      * @return CreateAccountResponse
     */
    createAccount(request: CreateAccountRequest): Promise<CreateAccountResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)Usage notes
      * This operation uses the backup feature of ApsaraDB RDS to create a backup set. You can also use an operation of Database Backup (DBS) to create a backup set. For more information, see [List of operations by function of DBS](~~437245~~).
      * ### [](#)Precautions
      * Before you call this operation, make sure that the following requirements are met:
      * *   The instance is in the Running state.
      * *   The instance does not have ongoing backup tasks.
      * *   The number of backup files that are created per day for an instance cannot exceed 20.
      * ### [](#)References
      * *   [Use the data backup feature for an ApsaraDB RDS for MySQL instance](~~378074~~)
      * *   [Use the data backup feature for an ApsaraDB RDS for PostgreSQL instance](~~96772~~)
      * *   [Use the data backup feature for an ApsaraDB RDS for SQL Server instance](~~95717~~)
      * *   [Use the data backup feature for an ApsaraDB RDS for MariaDB instance](~~97147~~)
      *
      * @param request CreateBackupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateBackupResponse
     */
    createBackupWithOptions(request: CreateBackupRequest, runtime: $Util.RuntimeOptions): Promise<CreateBackupResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)Usage notes
      * This operation uses the backup feature of ApsaraDB RDS to create a backup set. You can also use an operation of Database Backup (DBS) to create a backup set. For more information, see [List of operations by function of DBS](~~437245~~).
      * ### [](#)Precautions
      * Before you call this operation, make sure that the following requirements are met:
      * *   The instance is in the Running state.
      * *   The instance does not have ongoing backup tasks.
      * *   The number of backup files that are created per day for an instance cannot exceed 20.
      * ### [](#)References
      * *   [Use the data backup feature for an ApsaraDB RDS for MySQL instance](~~378074~~)
      * *   [Use the data backup feature for an ApsaraDB RDS for PostgreSQL instance](~~96772~~)
      * *   [Use the data backup feature for an ApsaraDB RDS for SQL Server instance](~~95717~~)
      * *   [Use the data backup feature for an ApsaraDB RDS for MariaDB instance](~~97147~~)
      *
      * @param request CreateBackupRequest
      * @return CreateBackupResponse
     */
    createBackup(request: CreateBackupRequest): Promise<CreateBackupResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Use the cloud migration feature](~~365562~~)
      *
      * @param request CreateCloudMigrationPrecheckTaskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateCloudMigrationPrecheckTaskResponse
     */
    createCloudMigrationPrecheckTaskWithOptions(request: CreateCloudMigrationPrecheckTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateCloudMigrationPrecheckTaskResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Use the cloud migration feature](~~365562~~)
      *
      * @param request CreateCloudMigrationPrecheckTaskRequest
      * @return CreateCloudMigrationPrecheckTaskResponse
     */
    createCloudMigrationPrecheckTask(request: CreateCloudMigrationPrecheckTaskRequest): Promise<CreateCloudMigrationPrecheckTaskResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Use the cloud migration feature](~~365562~~)
      *
      * @param request CreateCloudMigrationTaskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateCloudMigrationTaskResponse
     */
    createCloudMigrationTaskWithOptions(request: CreateCloudMigrationTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateCloudMigrationTaskResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Use the cloud migration feature](~~365562~~)
      *
      * @param request CreateCloudMigrationTaskRequest
      * @return CreateCloudMigrationTaskResponse
     */
    createCloudMigrationTask(request: CreateCloudMigrationTaskRequest): Promise<CreateCloudMigrationTaskResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      * ### References
      * > : Fees are generated if the call is successful. Before you call this operation, carefully read the following documentation:
      * *   [Create an ApsaraDB RDS for MySQL instance](~~148036~~)
      * *   [Create a serverless ApsaraDB RDS for MySQL instance](~~412231~~)
      * *   [Create an ApsaraDB RDS for PostgreSQL instance](~~148038~~)
      * *   [Create a serverless ApsaraDB RDS for PostgreSQL instance](~~607753~~)
      * *   [Enable Babelfish for an ApsaraDB RDS for PostgreSQL instance](~~428615~~)
      * *   [Create an ApsaraDB RDS for SQL Server instance](~~148037~~)
      * *   [Create a serverless ApsaraDB RDS for SQL Server instance](~~603465~~)
      * *   [Create an ApsaraDB RDS for MariaDB instance](~~148040~~)
      *
      * @param tmpReq CreateDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateDBInstanceResponse
     */
    createDBInstanceWithOptions(tmpReq: CreateDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateDBInstanceResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      * ### References
      * > : Fees are generated if the call is successful. Before you call this operation, carefully read the following documentation:
      * *   [Create an ApsaraDB RDS for MySQL instance](~~148036~~)
      * *   [Create a serverless ApsaraDB RDS for MySQL instance](~~412231~~)
      * *   [Create an ApsaraDB RDS for PostgreSQL instance](~~148038~~)
      * *   [Create a serverless ApsaraDB RDS for PostgreSQL instance](~~607753~~)
      * *   [Enable Babelfish for an ApsaraDB RDS for PostgreSQL instance](~~428615~~)
      * *   [Create an ApsaraDB RDS for SQL Server instance](~~148037~~)
      * *   [Create a serverless ApsaraDB RDS for SQL Server instance](~~603465~~)
      * *   [Create an ApsaraDB RDS for MariaDB instance](~~148040~~)
      *
      * @param request CreateDBInstanceRequest
      * @return CreateDBInstanceResponse
     */
    createDBInstance(request: CreateDBInstanceRequest): Promise<CreateDBInstanceResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
      * [Add a read-only endpoint for a cluster](~~464132~~)
      *
      * @param tmpReq CreateDBInstanceEndpointRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateDBInstanceEndpointResponse
     */
    createDBInstanceEndpointWithOptions(tmpReq: CreateDBInstanceEndpointRequest, runtime: $Util.RuntimeOptions): Promise<CreateDBInstanceEndpointResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
      * [Add a read-only endpoint for a cluster](~~464132~~)
      *
      * @param request CreateDBInstanceEndpointRequest
      * @return CreateDBInstanceEndpointResponse
     */
    createDBInstanceEndpoint(request: CreateDBInstanceEndpointRequest): Promise<CreateDBInstanceEndpointResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### Precautions
      * *   You can create a public endpoint of an endpoint type only when no public endpoint is created for this endpoint type.
      * *   The node weights and other configurations are the same as those of the internal endpoint of this endpoint type. Only one public endpoint and one internal endpoint can be created for each endpoint type.
      *
      * @param request CreateDBInstanceEndpointAddressRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateDBInstanceEndpointAddressResponse
     */
    createDBInstanceEndpointAddressWithOptions(request: CreateDBInstanceEndpointAddressRequest, runtime: $Util.RuntimeOptions): Promise<CreateDBInstanceEndpointAddressResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### Precautions
      * *   You can create a public endpoint of an endpoint type only when no public endpoint is created for this endpoint type.
      * *   The node weights and other configurations are the same as those of the internal endpoint of this endpoint type. Only one public endpoint and one internal endpoint can be created for each endpoint type.
      *
      * @param request CreateDBInstanceEndpointAddressRequest
      * @return CreateDBInstanceEndpointAddressResponse
     */
    createDBInstanceEndpointAddress(request: CreateDBInstanceEndpointAddressRequest): Promise<CreateDBInstanceEndpointAddressResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      * ### References
      * > : Fees are generated if the call is successful. Before you call this operation, carefully read the following documentation:
      * *   [Manage ApsaraDB RDS for MySQL instances in the recycle bin](~~96065~~)
      * *   [Manage ApsaraDB RDS for PostgreSQL instances in the recycle bin](~~96752~~)
      * *   [Manage ApsaraDB RDS for SQL Server instances in the recycle bin](~~95669~~)
      * *   [Manage ApsaraDB RDS for MariaDB instances in the recycle bin](~~97131~~)
      *
      * @param request CreateDBInstanceForRebuildRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateDBInstanceForRebuildResponse
     */
    createDBInstanceForRebuildWithOptions(request: CreateDBInstanceForRebuildRequest, runtime: $Util.RuntimeOptions): Promise<CreateDBInstanceForRebuildResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      * ### References
      * > : Fees are generated if the call is successful. Before you call this operation, carefully read the following documentation:
      * *   [Manage ApsaraDB RDS for MySQL instances in the recycle bin](~~96065~~)
      * *   [Manage ApsaraDB RDS for PostgreSQL instances in the recycle bin](~~96752~~)
      * *   [Manage ApsaraDB RDS for SQL Server instances in the recycle bin](~~95669~~)
      * *   [Manage ApsaraDB RDS for MariaDB instances in the recycle bin](~~97131~~)
      *
      * @param request CreateDBInstanceForRebuildRequest
      * @return CreateDBInstanceForRebuildResponse
     */
    createDBInstanceForRebuild(request: CreateDBInstanceForRebuildRequest): Promise<CreateDBInstanceForRebuildResponse>;
    /**
      * ### Supported database engines
      * MySQL
      * ### References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Add a node to an ApsaraDB RDS for MySQL cluster](~~464129~~)
      *
      * @param tmpReq CreateDBNodesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateDBNodesResponse
     */
    createDBNodesWithOptions(tmpReq: CreateDBNodesRequest, runtime: $Util.RuntimeOptions): Promise<CreateDBNodesResponse>;
    /**
      * ### Supported database engines
      * MySQL
      * ### References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Add a node to an ApsaraDB RDS for MySQL cluster](~~464129~~)
      *
      * @param request CreateDBNodesRequest
      * @return CreateDBNodesResponse
     */
    createDBNodes(request: CreateDBNodesRequest): Promise<CreateDBNodesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance](~~184921~~)
      * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for PostgreSQL instance](~~418274~~)
      *
      * @param request CreateDBProxyEndpointAddressRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateDBProxyEndpointAddressResponse
     */
    createDBProxyEndpointAddressWithOptions(request: CreateDBProxyEndpointAddressRequest, runtime: $Util.RuntimeOptions): Promise<CreateDBProxyEndpointAddressResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance](~~184921~~)
      * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for PostgreSQL instance](~~418274~~)
      *
      * @param request CreateDBProxyEndpointAddressRequest
      * @return CreateDBProxyEndpointAddressResponse
     */
    createDBProxyEndpointAddress(request: CreateDBProxyEndpointAddressRequest): Promise<CreateDBProxyEndpointAddressResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Create a database in an ApsaraDB RDS for MySQL instance](~~96105~~)
      * *   [Create a database in an ApsaraDB RDS for PostgreSQL instance](~~96758~~)
      * *   [Create a database in an ApsaraDB RDS for SQL Server instance](~~95698~~)
      * *   [Create a database in an ApsaraDB RDS for MariaDB instance](~~97136~~)
      *
      * @param request CreateDatabaseRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateDatabaseResponse
     */
    createDatabaseWithOptions(request: CreateDatabaseRequest, runtime: $Util.RuntimeOptions): Promise<CreateDatabaseResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Create a database in an ApsaraDB RDS for MySQL instance](~~96105~~)
      * *   [Create a database in an ApsaraDB RDS for PostgreSQL instance](~~96758~~)
      * *   [Create a database in an ApsaraDB RDS for SQL Server instance](~~95698~~)
      * *   [Create a database in an ApsaraDB RDS for MariaDB instance](~~97136~~)
      *
      * @param request CreateDatabaseRequest
      * @return CreateDatabaseResponse
     */
    createDatabase(request: CreateDatabaseRequest): Promise<CreateDatabaseResponse>;
    /**
      * >  Before restoration, you can call the [CheckCreateDdrDBInstance](~~121721~~) operation to check whether a cross-region backup set can be used for cross-region restoration.
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      *
      * @param request CreateDdrInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateDdrInstanceResponse
     */
    createDdrInstanceWithOptions(request: CreateDdrInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateDdrInstanceResponse>;
    /**
      * >  Before restoration, you can call the [CheckCreateDdrDBInstance](~~121721~~) operation to check whether a cross-region backup set can be used for cross-region restoration.
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      *
      * @param request CreateDdrInstanceRequest
      * @return CreateDdrInstanceResponse
     */
    createDdrInstance(request: CreateDdrInstanceRequest): Promise<CreateDdrInstanceResponse>;
    /**
      * >  This operation is no longer maintained. You can use the CreateDiagnosticReport operation of Database Autonomy Service (DAS) to create a diagnostic report.
      * After you call this operation to create a diagnostic report, you can call the DescribeDiagnosticReportList operation to download the diagnostic report.
      *
      * @param request CreateDiagnosticReportRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateDiagnosticReportResponse
     */
    createDiagnosticReportWithOptions(request: CreateDiagnosticReportRequest, runtime: $Util.RuntimeOptions): Promise<CreateDiagnosticReportResponse>;
    /**
      * >  This operation is no longer maintained. You can use the CreateDiagnosticReport operation of Database Autonomy Service (DAS) to create a diagnostic report.
      * After you call this operation to create a diagnostic report, you can call the DescribeDiagnosticReportList operation to download the diagnostic report.
      *
      * @param request CreateDiagnosticReportRequest
      * @return CreateDiagnosticReportResponse
     */
    createDiagnosticReport(request: CreateDiagnosticReportRequest): Promise<CreateDiagnosticReportResponse>;
    /**
      * ### [](#)Supported database engine
      * *   MySQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Create and release an ApsaraDB RDS global active database cluster](~~328592~~)
      *
      * @param request CreateGADInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateGADInstanceResponse
     */
    createGADInstanceWithOptions(request: CreateGADInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateGADInstanceResponse>;
    /**
      * ### [](#)Supported database engine
      * *   MySQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Create and release an ApsaraDB RDS global active database cluster](~~328592~~)
      *
      * @param request CreateGADInstanceRequest
      * @return CreateGADInstanceResponse
     */
    createGADInstance(request: CreateGADInstanceRequest): Promise<CreateGADInstanceResponse>;
    /**
      * ## [](#)Prerequisites
      * An ApsaraDB RDS global active database cluster is created. You can call the [CreateGADInstance](~~336893~~) operation to create a global active database cluster.
      * For more information, see [Add unit nodes to or move unit nodes from an ApsaraDB RDS global active database cluster](~~331851~~).
      *
      * @param request CreateGadInstanceMemberRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateGadInstanceMemberResponse
     */
    createGadInstanceMemberWithOptions(request: CreateGadInstanceMemberRequest, runtime: $Util.RuntimeOptions): Promise<CreateGadInstanceMemberResponse>;
    /**
      * ## [](#)Prerequisites
      * An ApsaraDB RDS global active database cluster is created. You can call the [CreateGADInstance](~~336893~~) operation to create a global active database cluster.
      * For more information, see [Add unit nodes to or move unit nodes from an ApsaraDB RDS global active database cluster](~~331851~~).
      *
      * @param request CreateGadInstanceMemberRequest
      * @return CreateGadInstanceMemberResponse
     */
    createGadInstanceMember(request: CreateGadInstanceMemberRequest): Promise<CreateGadInstanceMemberResponse>;
    /**
      * ### [](#)Supported database engines
      * SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Migrate data from a self-managed SQL Server instance to an ApsaraDB RDS for SQL Server instance](~~100019~~)
      *
      * @param request CreateMigrateTaskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateMigrateTaskResponse
     */
    createMigrateTaskWithOptions(request: CreateMigrateTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateMigrateTaskResponse>;
    /**
      * ### [](#)Supported database engines
      * SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Migrate data from a self-managed SQL Server instance to an ApsaraDB RDS for SQL Server instance](~~100019~~)
      *
      * @param request CreateMigrateTaskRequest
      * @return CreateMigrateTaskResponse
     */
    createMigrateTask(request: CreateMigrateTaskRequest): Promise<CreateMigrateTaskResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * This operation is used to migrate backup data to the cloud. Before you call this operation, make sure that you understand the descriptions in the following topics:
      * *   [Migrate the full backup data of a self-managed SQL Server database to an ApsaraDB RDS instance that runs SQL Server 2008 R2](~~95737~~)
      * *   [Migrate full backup data of SQL Server 2012, 2014, 2016, 2017, or 2019 databases](~~95738~~)
      * *   [Migrate incremental backup data to ApsaraDB RDS for SQL Server 2012, 2014, 2016, 2017, or 2019](~~95736~~)
      *
      * @param request CreateOnlineDatabaseTaskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateOnlineDatabaseTaskResponse
     */
    createOnlineDatabaseTaskWithOptions(request: CreateOnlineDatabaseTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateOnlineDatabaseTaskResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * This operation is used to migrate backup data to the cloud. Before you call this operation, make sure that you understand the descriptions in the following topics:
      * *   [Migrate the full backup data of a self-managed SQL Server database to an ApsaraDB RDS instance that runs SQL Server 2008 R2](~~95737~~)
      * *   [Migrate full backup data of SQL Server 2012, 2014, 2016, 2017, or 2019 databases](~~95738~~)
      * *   [Migrate incremental backup data to ApsaraDB RDS for SQL Server 2012, 2014, 2016, 2017, or 2019](~~95736~~)
      *
      * @param request CreateOnlineDatabaseTaskRequest
      * @return CreateOnlineDatabaseTaskResponse
     */
    createOnlineDatabaseTask(request: CreateOnlineDatabaseTaskRequest): Promise<CreateOnlineDatabaseTaskResponse>;
    /**
      * ### [](#)Supported database engines
      * MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Add a node to an ApsaraDB RDS for MySQL cluster](~~464129~~)
      *
      * @param tmpReq CreateOrderForCreateDBNodesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateOrderForCreateDBNodesResponse
     */
    createOrderForCreateDBNodesWithOptions(tmpReq: CreateOrderForCreateDBNodesRequest, runtime: $Util.RuntimeOptions): Promise<CreateOrderForCreateDBNodesResponse>;
    /**
      * ### [](#)Supported database engines
      * MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Add a node to an ApsaraDB RDS for MySQL cluster](~~464129~~)
      *
      * @param request CreateOrderForCreateDBNodesRequest
      * @return CreateOrderForCreateDBNodesResponse
     */
    createOrderForCreateDBNodes(request: CreateOrderForCreateDBNodesRequest): Promise<CreateOrderForCreateDBNodesResponse>;
    /**
      * ### [](#)Supported database engines
      * MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Delete a node from an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition](~~464130~~)
      *
      * @param tmpReq CreateOrderForDeleteDBNodesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateOrderForDeleteDBNodesResponse
     */
    createOrderForDeleteDBNodesWithOptions(tmpReq: CreateOrderForDeleteDBNodesRequest, runtime: $Util.RuntimeOptions): Promise<CreateOrderForDeleteDBNodesResponse>;
    /**
      * ### [](#)Supported database engines
      * MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Delete a node from an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition](~~464130~~)
      *
      * @param request CreateOrderForDeleteDBNodesRequest
      * @return CreateOrderForDeleteDBNodesResponse
     */
    createOrderForDeleteDBNodes(request: CreateOrderForDeleteDBNodesRequest): Promise<CreateOrderForDeleteDBNodesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~)
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~)
      *
      * @param request CreateParameterGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateParameterGroupResponse
     */
    createParameterGroupWithOptions(request: CreateParameterGroupRequest, runtime: $Util.RuntimeOptions): Promise<CreateParameterGroupResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~)
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~)
      *
      * @param request CreateParameterGroupRequest
      * @return CreateParameterGroupResponse
     */
    createParameterGroup(request: CreateParameterGroupRequest): Promise<CreateParameterGroupResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Manage extensions](~~2402409~~)
      * ### [](#)Precautions
      * Install only the plug-ins that are supported by the major engine version of the instance. Otherwise, the installation fails.
      * *   For more information, see [Extensions supported by ApsaraDB RDS for PostgreSQL](~~142340~~).
      * *   You can call the [DescribeDBInstanceAttribute](~~610394~~) operation to query the major engine version of an instance.
      *
      * @param request CreatePostgresExtensionsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreatePostgresExtensionsResponse
     */
    createPostgresExtensionsWithOptions(request: CreatePostgresExtensionsRequest, runtime: $Util.RuntimeOptions): Promise<CreatePostgresExtensionsResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Manage extensions](~~2402409~~)
      * ### [](#)Precautions
      * Install only the plug-ins that are supported by the major engine version of the instance. Otherwise, the installation fails.
      * *   For more information, see [Extensions supported by ApsaraDB RDS for PostgreSQL](~~142340~~).
      * *   You can call the [DescribeDBInstanceAttribute](~~610394~~) operation to query the major engine version of an instance.
      *
      * @param request CreatePostgresExtensionsRequest
      * @return CreatePostgresExtensionsResponse
     */
    createPostgresExtensions(request: CreatePostgresExtensionsRequest): Promise<CreatePostgresExtensionsResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Create a read-only ApsaraDB RDS for MySQL instance](~~56991~~)
      * *   [Create a read-only ApsaraDB RDS for PostgreSQL instance](~~108959~~)
      * *   [Create a read-only ApsaraDB RDS for SQL Server instance](~~99005~~)
      *
      * @param request CreateReadOnlyDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateReadOnlyDBInstanceResponse
     */
    createReadOnlyDBInstanceWithOptions(request: CreateReadOnlyDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateReadOnlyDBInstanceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Create a read-only ApsaraDB RDS for MySQL instance](~~56991~~)
      * *   [Create a read-only ApsaraDB RDS for PostgreSQL instance](~~108959~~)
      * *   [Create a read-only ApsaraDB RDS for SQL Server instance](~~99005~~)
      *
      * @param request CreateReadOnlyDBInstanceRequest
      * @return CreateReadOnlyDBInstanceResponse
     */
    createReadOnlyDBInstance(request: CreateReadOnlyDBInstanceRequest): Promise<CreateReadOnlyDBInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      *
      * @param request CreateSecretRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateSecretResponse
     */
    createSecretWithOptions(request: CreateSecretRequest, runtime: $Util.RuntimeOptions): Promise<CreateSecretResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      *
      * @param request CreateSecretRequest
      * @return CreateSecretResponse
     */
    createSecret(request: CreateSecretRequest): Promise<CreateSecretResponse>;
    /**
      * ### Supported database engine
      * PostgreSQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Service-linked roles](~~342840~~)
      *
      * @param request CreateServiceLinkedRoleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateServiceLinkedRoleResponse
     */
    createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: $Util.RuntimeOptions): Promise<CreateServiceLinkedRoleResponse>;
    /**
      * ### Supported database engine
      * PostgreSQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Service-linked roles](~~342840~~)
      *
      * @param request CreateServiceLinkedRoleRequest
      * @return CreateServiceLinkedRoleResponse
     */
    createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): Promise<CreateServiceLinkedRoleResponse>;
    /**
      * ### [](#)Supported database engines
      * Your RDS instance runs SQL Server 2008 R2 with local disks.
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Restore the data of an ApsaraDB RDS for SQL Server instance by using a temporary RDS instance](~~95724~~)
      *
      * @param request CreateTempDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateTempDBInstanceResponse
     */
    createTempDBInstanceWithOptions(request: CreateTempDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateTempDBInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * Your RDS instance runs SQL Server 2008 R2 with local disks.
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Restore the data of an ApsaraDB RDS for SQL Server instance by using a temporary RDS instance](~~95724~~)
      *
      * @param request CreateTempDBInstanceRequest
      * @return CreateTempDBInstanceResponse
     */
    createTempDBInstance(request: CreateTempDBInstanceRequest): Promise<CreateTempDBInstanceResponse>;
    createYouhuiForOrderWithOptions(request: CreateYouhuiForOrderRequest, runtime: $Util.RuntimeOptions): Promise<CreateYouhuiForOrderResponse>;
    createYouhuiForOrder(request: CreateYouhuiForOrderRequest): Promise<CreateYouhuiForOrderResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      *
      * @param request DeleteADSettingRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteADSettingResponse
     */
    deleteADSettingWithOptions(request: DeleteADSettingRequest, runtime: $Util.RuntimeOptions): Promise<DeleteADSettingResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      *
      * @param request DeleteADSettingRequest
      * @return DeleteADSettingResponse
     */
    deleteADSetting(request: DeleteADSettingRequest): Promise<DeleteADSettingResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Delete a database account from an ApsaraDB RDS for MySQL instance](~~96104~~)
      * *   [Delete a database account from an ApsaraDB RDS for PostgreSQL instance](~~147649~~)
      * *   [Delete a database account from an ApsaraDB RDS for SQL Server instance](~~95694~~)
      * *   [Delete a database account from an ApsaraDB RDS for MariaDB instance](~~97135~~)
      *
      * @param request DeleteAccountRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteAccountResponse
     */
    deleteAccountWithOptions(request: DeleteAccountRequest, runtime: $Util.RuntimeOptions): Promise<DeleteAccountResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Delete a database account from an ApsaraDB RDS for MySQL instance](~~96104~~)
      * *   [Delete a database account from an ApsaraDB RDS for PostgreSQL instance](~~147649~~)
      * *   [Delete a database account from an ApsaraDB RDS for SQL Server instance](~~95694~~)
      * *   [Delete a database account from an ApsaraDB RDS for MariaDB instance](~~97135~~)
      *
      * @param request DeleteAccountRequest
      * @return DeleteAccountResponse
     */
    deleteAccount(request: DeleteAccountRequest): Promise<DeleteAccountResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * > Only instances that run RDS High-availability Edition are supported.
      * ### Description
      * You can call this operation to delete backup sets of the instance itself. Backup sets of the associated instances such as read-only, disaster recovery, and cloned instances are not deleted.
      * ### Precautions
      * Before you call this operation, make sure that the following requirements are met:
      * *   The instance is in the Running state.
      * *   If the log backup feature is disabled, instances cannot be restored by point in time. You can delete data backup sets that are retained for more than seven days.
      * *   If the log backup feature is enabled and the log backup retention period is shorter than the data backup retention period, you can delete the data backup files that are retained for a period longer than the log backup retention period.
      *
      * @param request DeleteBackupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteBackupResponse
     */
    deleteBackupWithOptions(request: DeleteBackupRequest, runtime: $Util.RuntimeOptions): Promise<DeleteBackupResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * > Only instances that run RDS High-availability Edition are supported.
      * ### Description
      * You can call this operation to delete backup sets of the instance itself. Backup sets of the associated instances such as read-only, disaster recovery, and cloned instances are not deleted.
      * ### Precautions
      * Before you call this operation, make sure that the following requirements are met:
      * *   The instance is in the Running state.
      * *   If the log backup feature is disabled, instances cannot be restored by point in time. You can delete data backup sets that are retained for more than seven days.
      * *   If the log backup feature is enabled and the log backup retention period is shorter than the data backup retention period, you can delete the data backup files that are retained for a period longer than the log backup retention period.
      *
      * @param request DeleteBackupRequest
      * @return DeleteBackupResponse
     */
    deleteBackup(request: DeleteBackupRequest): Promise<DeleteBackupResponse>;
    /**
      * ### Supported database engine
      * SQL Server
      * ### Usage notes
      * This operation is available for users whose accounts are added to the whitelist. If your account is not added to the whitelist, you can join the Database Backup (DBS) DingTalk group whose ID is 35585947 and contact the on-duty engineer to add your account to the whitelist.
      *
      * @param request DeleteBackupFileRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteBackupFileResponse
     */
    deleteBackupFileWithOptions(request: DeleteBackupFileRequest, runtime: $Util.RuntimeOptions): Promise<DeleteBackupFileResponse>;
    /**
      * ### Supported database engine
      * SQL Server
      * ### Usage notes
      * This operation is available for users whose accounts are added to the whitelist. If your account is not added to the whitelist, you can join the Database Backup (DBS) DingTalk group whose ID is 35585947 and contact the on-duty engineer to add your account to the whitelist.
      *
      * @param request DeleteBackupFileRequest
      * @return DeleteBackupFileResponse
     */
    deleteBackupFile(request: DeleteBackupFileRequest): Promise<DeleteBackupFileResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Note Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Release an ApsaraDB RDS for MySQL instance](~~96057~~)
      * *   [Release an ApsaraDB RDS for PostgreSQL instance](~~96749~~)
      * *   [Release an ApsaraDB RDS for SQL Server instance](~~95662~~)
      * *   [Release an ApsaraDB RDS for MariaDB instance](~~97128~~)
      *
      * @param request DeleteDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteDBInstanceResponse
     */
    deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDBInstanceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Note Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Release an ApsaraDB RDS for MySQL instance](~~96057~~)
      * *   [Release an ApsaraDB RDS for PostgreSQL instance](~~96749~~)
      * *   [Release an ApsaraDB RDS for SQL Server instance](~~95662~~)
      * *   [Release an ApsaraDB RDS for MariaDB instance](~~97128~~)
      *
      * @param request DeleteDBInstanceRequest
      * @return DeleteDBInstanceResponse
     */
    deleteDBInstance(request: DeleteDBInstanceRequest): Promise<DeleteDBInstanceResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Delete the read-only endpoint of an ApsaraDB RDS for MySQL cluster](~~464133~~)
      *
      * @param request DeleteDBInstanceEndpointRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteDBInstanceEndpointResponse
     */
    deleteDBInstanceEndpointWithOptions(request: DeleteDBInstanceEndpointRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDBInstanceEndpointResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Delete the read-only endpoint of an ApsaraDB RDS for MySQL cluster](~~464133~~)
      *
      * @param request DeleteDBInstanceEndpointRequest
      * @return DeleteDBInstanceEndpointResponse
     */
    deleteDBInstanceEndpoint(request: DeleteDBInstanceEndpointRequest): Promise<DeleteDBInstanceEndpointResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### Precautions
      * You can delete only the public endpoint of each endpoint type from the instance. If you want to delete an internal endpoint of any endpoint type, you can delete the type of endpoint.
      *
      * @param request DeleteDBInstanceEndpointAddressRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteDBInstanceEndpointAddressResponse
     */
    deleteDBInstanceEndpointAddressWithOptions(request: DeleteDBInstanceEndpointAddressRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDBInstanceEndpointAddressResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### Precautions
      * You can delete only the public endpoint of each endpoint type from the instance. If you want to delete an internal endpoint of any endpoint type, you can delete the type of endpoint.
      *
      * @param request DeleteDBInstanceEndpointAddressRequest
      * @return DeleteDBInstanceEndpointAddressResponse
     */
    deleteDBInstanceEndpointAddress(request: DeleteDBInstanceEndpointAddressRequest): Promise<DeleteDBInstanceEndpointAddressResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Delete a node from an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition](~~464130~~)
      *
      * @param tmpReq DeleteDBNodesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteDBNodesResponse
     */
    deleteDBNodesWithOptions(tmpReq: DeleteDBNodesRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDBNodesResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Delete a node from an ApsaraDB RDS for MySQL instance that runs RDS Cluster Edition](~~464130~~)
      *
      * @param request DeleteDBNodesRequest
      * @return DeleteDBNodesResponse
     */
    deleteDBNodes(request: DeleteDBNodesRequest): Promise<DeleteDBNodesResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance](~~184921~~)
      * *   [Configure the dedicated proxy endpoint for an ApsaraDB RDS for PostgreSQL instance](~~418274~~)
      *
      * @param request DeleteDBProxyEndpointAddressRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteDBProxyEndpointAddressResponse
     */
    deleteDBProxyEndpointAddressWithOptions(request: DeleteDBProxyEndpointAddressRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDBProxyEndpointAddressResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance](~~184921~~)
      * *   [Configure the dedicated proxy endpoint for an ApsaraDB RDS for PostgreSQL instance](~~418274~~)
      *
      * @param request DeleteDBProxyEndpointAddressRequest
      * @return DeleteDBProxyEndpointAddressResponse
     */
    deleteDBProxyEndpointAddress(request: DeleteDBProxyEndpointAddressRequest): Promise<DeleteDBProxyEndpointAddressResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      * ### [](#)References
      * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Delete a database from an ApsaraDB RDS for MySQL instance](~~96106~~)
      * *   [Delete a database from an ApsaraDB RDS for PostgreSQL instance](~~96759~~)
      * *   [Delete a database from an ApsaraDB RDS for SQL Server instance](~~95699~~)
      * *   [Delete a database from an ApsaraDB RDS for MariaDB instance](~~97137~~)
      *
      * @param request DeleteDatabaseRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteDatabaseResponse
     */
    deleteDatabaseWithOptions(request: DeleteDatabaseRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDatabaseResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      * ### [](#)References
      * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Delete a database from an ApsaraDB RDS for MySQL instance](~~96106~~)
      * *   [Delete a database from an ApsaraDB RDS for PostgreSQL instance](~~96759~~)
      * *   [Delete a database from an ApsaraDB RDS for SQL Server instance](~~95699~~)
      * *   [Delete a database from an ApsaraDB RDS for MariaDB instance](~~97137~~)
      *
      * @param request DeleteDatabaseRequest
      * @return DeleteDatabaseResponse
     */
    deleteDatabase(request: DeleteDatabaseRequest): Promise<DeleteDatabaseResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [Usage notes](#)
      * *   A global active database cluster cannot be restored after it is deleted. Proceed with caution.
      * *   If you delete a global active database cluster, the system removes all nodes and Data Transmission Service (DTS) synchronization tasks from the cluster. However, the system does not release the ApsaraDB RDS for MySQL instances that run as nodes in the cluster. If you no longer need the ApsaraDB RDS for MySQL instances, you can call the [DeleteDBInstance](~~26229~~) to release the instances one after another.
      *
      * @param request DeleteGadInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteGadInstanceResponse
     */
    deleteGadInstanceWithOptions(request: DeleteGadInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DeleteGadInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [Usage notes](#)
      * *   A global active database cluster cannot be restored after it is deleted. Proceed with caution.
      * *   If you delete a global active database cluster, the system removes all nodes and Data Transmission Service (DTS) synchronization tasks from the cluster. However, the system does not release the ApsaraDB RDS for MySQL instances that run as nodes in the cluster. If you no longer need the ApsaraDB RDS for MySQL instances, you can call the [DeleteDBInstance](~~26229~~) to release the instances one after another.
      *
      * @param request DeleteGadInstanceRequest
      * @return DeleteGadInstanceResponse
     */
    deleteGadInstance(request: DeleteGadInstanceRequest): Promise<DeleteGadInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~)
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~)
      *
      * @param request DeleteParameterGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteParameterGroupResponse
     */
    deleteParameterGroupWithOptions(request: DeleteParameterGroupRequest, runtime: $Util.RuntimeOptions): Promise<DeleteParameterGroupResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~)
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~)
      *
      * @param request DeleteParameterGroupRequest
      * @return DeleteParameterGroupResponse
     */
    deleteParameterGroup(request: DeleteParameterGroupRequest): Promise<DeleteParameterGroupResponse>;
    /**
      * ### Supported database engines
      * RDS PostgreSQL
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Manage extensions](~~2402409~~)
      *
      * @param request DeletePostgresExtensionsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeletePostgresExtensionsResponse
     */
    deletePostgresExtensionsWithOptions(request: DeletePostgresExtensionsRequest, runtime: $Util.RuntimeOptions): Promise<DeletePostgresExtensionsResponse>;
    /**
      * ### Supported database engines
      * RDS PostgreSQL
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Manage extensions](~~2402409~~)
      *
      * @param request DeletePostgresExtensionsRequest
      * @return DeletePostgresExtensionsResponse
     */
    deletePostgresExtensions(request: DeletePostgresExtensionsRequest): Promise<DeletePostgresExtensionsResponse>;
    deleteSecretWithOptions(request: DeleteSecretRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSecretResponse>;
    deleteSecret(request: DeleteSecretRequest): Promise<DeleteSecretResponse>;
    /**
      * ### [](#)Supported database engine
      * *   PostgreSQL
      * ### [](#)Precautions
      * You can delete a replication slot only when the status of the slot is **INACTIVE**. You can call the DescribeSlots operation to query the status of a replication slot.
      *
      * @param request DeleteSlotRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteSlotResponse
     */
    deleteSlotWithOptions(request: DeleteSlotRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSlotResponse>;
    /**
      * ### [](#)Supported database engine
      * *   PostgreSQL
      * ### [](#)Precautions
      * You can delete a replication slot only when the status of the slot is **INACTIVE**. You can call the DescribeSlots operation to query the status of a replication slot.
      *
      * @param request DeleteSlotRequest
      * @return DeleteSlotResponse
     */
    deleteSlot(request: DeleteSlotRequest): Promise<DeleteSlotResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [](#)Description
      * *   A full backup file contains the data of a self-managed MySQL instance. You can restore the data of a self-managed MySQL instance from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
      * *   This operation deletes full backup files only from the ApsaraDB RDS console. This operation does not affect the full backup files that are stored as objects in Object Storage Service (OSS) buckets. After you call this operation to delete a full backup file, you can call the [ImportUserBackupFile](~~260266~~) operation to import the full backup file again.
      *
      * @param request DeleteUserBackupFileRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteUserBackupFileResponse
     */
    deleteUserBackupFileWithOptions(request: DeleteUserBackupFileRequest, runtime: $Util.RuntimeOptions): Promise<DeleteUserBackupFileResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [](#)Description
      * *   A full backup file contains the data of a self-managed MySQL instance. You can restore the data of a self-managed MySQL instance from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
      * *   This operation deletes full backup files only from the ApsaraDB RDS console. This operation does not affect the full backup files that are stored as objects in Object Storage Service (OSS) buckets. After you call this operation to delete a full backup file, you can call the [ImportUserBackupFile](~~260266~~) operation to import the full backup file again.
      *
      * @param request DeleteUserBackupFileRequest
      * @return DeleteUserBackupFileResponse
     */
    deleteUserBackupFile(request: DeleteUserBackupFileRequest): Promise<DeleteUserBackupFileResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      *
      * @param request DescibeImportsFromDatabaseRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescibeImportsFromDatabaseResponse
     */
    descibeImportsFromDatabaseWithOptions(request: DescibeImportsFromDatabaseRequest, runtime: $Util.RuntimeOptions): Promise<DescibeImportsFromDatabaseResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      *
      * @param request DescibeImportsFromDatabaseRequest
      * @return DescibeImportsFromDatabaseResponse
     */
    descibeImportsFromDatabase(request: DescibeImportsFromDatabaseRequest): Promise<DescibeImportsFromDatabaseResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      *
      * @param request DescribeADInfoRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeADInfoResponse
     */
    describeADInfoWithOptions(request: DescribeADInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeADInfoResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      *
      * @param request DescribeADInfoRequest
      * @return DescribeADInfoResponse
     */
    describeADInfo(request: DescribeADInfoRequest): Promise<DescribeADInfoResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeAccountsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeAccountsResponse
     */
    describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAccountsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeAccountsRequest
      * @return DescribeAccountsResponse
     */
    describeAccounts(request: DescribeAccountsRequest): Promise<DescribeAccountsResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeActionEventPolicyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeActionEventPolicyResponse
     */
    describeActionEventPolicyWithOptions(request: DescribeActionEventPolicyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeActionEventPolicyResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeActionEventPolicyRequest
      * @return DescribeActionEventPolicyResponse
     */
    describeActionEventPolicy(request: DescribeActionEventPolicyRequest): Promise<DescribeActionEventPolicyResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeActiveOperationTasksRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeActiveOperationTasksResponse
     */
    describeActiveOperationTasksWithOptions(request: DescribeActiveOperationTasksRequest, runtime: $Util.RuntimeOptions): Promise<DescribeActiveOperationTasksResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeActiveOperationTasksRequest
      * @return DescribeActiveOperationTasksResponse
     */
    describeActiveOperationTasks(request: DescribeActiveOperationTasksRequest): Promise<DescribeActiveOperationTasksResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DescribeAllWhitelistTemplateRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeAllWhitelistTemplateResponse
     */
    describeAllWhitelistTemplateWithOptions(request: DescribeAllWhitelistTemplateRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAllWhitelistTemplateResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DescribeAllWhitelistTemplateRequest
      * @return DescribeAllWhitelistTemplateResponse
     */
    describeAllWhitelistTemplate(request: DescribeAllWhitelistTemplateRequest): Promise<DescribeAllWhitelistTemplateResponse>;
    /**
      * ### [](#)Supported database engines
      * MySQL
      * ### [](#)References
      * [Create and view an analytic instance](~~155180~~)
      *
      * @param request DescribeAnalyticdbByPrimaryDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeAnalyticdbByPrimaryDBInstanceResponse
     */
    describeAnalyticdbByPrimaryDBInstanceWithOptions(request: DescribeAnalyticdbByPrimaryDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAnalyticdbByPrimaryDBInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * MySQL
      * ### [](#)References
      * [Create and view an analytic instance](~~155180~~)
      *
      * @param request DescribeAnalyticdbByPrimaryDBInstanceRequest
      * @return DescribeAnalyticdbByPrimaryDBInstanceResponse
     */
    describeAnalyticdbByPrimaryDBInstance(request: DescribeAnalyticdbByPrimaryDBInstanceRequest): Promise<DescribeAnalyticdbByPrimaryDBInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeAvailableClassesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeAvailableClassesResponse
     */
    describeAvailableClassesWithOptions(request: DescribeAvailableClassesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAvailableClassesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeAvailableClassesRequest
      * @return DescribeAvailableClassesResponse
     */
    describeAvailableClasses(request: DescribeAvailableClassesRequest): Promise<DescribeAvailableClassesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      *
      * @param request DescribeAvailableCrossRegionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeAvailableCrossRegionResponse
     */
    describeAvailableCrossRegionWithOptions(request: DescribeAvailableCrossRegionRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAvailableCrossRegionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      *
      * @param request DescribeAvailableCrossRegionRequest
      * @return DescribeAvailableCrossRegionResponse
     */
    describeAvailableCrossRegion(request: DescribeAvailableCrossRegionRequest): Promise<DescribeAvailableCrossRegionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [View the Enhanced Monitoring metrics](~~299200~~)
      *
      * @param request DescribeAvailableMetricsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeAvailableMetricsResponse
     */
    describeAvailableMetricsWithOptions(request: DescribeAvailableMetricsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAvailableMetricsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [View the Enhanced Monitoring metrics](~~299200~~)
      *
      * @param request DescribeAvailableMetricsRequest
      * @return DescribeAvailableMetricsResponse
     */
    describeAvailableMetrics(request: DescribeAvailableMetricsRequest): Promise<DescribeAvailableMetricsResponse>;
    /**
      * >  To view the time range within which you can restore data from a standard backup set, see [DescribeBackups](~~26273~~)
      * ### [](#)Supported database engines
      * MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](~~120824~~)
      *
      * @param request DescribeAvailableRecoveryTimeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeAvailableRecoveryTimeResponse
     */
    describeAvailableRecoveryTimeWithOptions(request: DescribeAvailableRecoveryTimeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAvailableRecoveryTimeResponse>;
    /**
      * >  To view the time range within which you can restore data from a standard backup set, see [DescribeBackups](~~26273~~)
      * ### [](#)Supported database engines
      * MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](~~120824~~)
      *
      * @param request DescribeAvailableRecoveryTimeRequest
      * @return DescribeAvailableRecoveryTimeResponse
     */
    describeAvailableRecoveryTime(request: DescribeAvailableRecoveryTimeRequest): Promise<DescribeAvailableRecoveryTimeResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeAvailableZonesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeAvailableZonesResponse
     */
    describeAvailableZonesWithOptions(request: DescribeAvailableZonesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeAvailableZonesResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeAvailableZonesRequest
      * @return DescribeAvailableZonesResponse
     */
    describeAvailableZones(request: DescribeAvailableZonesRequest): Promise<DescribeAvailableZonesResponse>;
    /**
      * > This operation is phased out.
      *
      * @param request DescribeBackupDatabaseRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeBackupDatabaseResponse
     */
    describeBackupDatabaseWithOptions(request: DescribeBackupDatabaseRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBackupDatabaseResponse>;
    /**
      * > This operation is phased out.
      *
      * @param request DescribeBackupDatabaseRequest
      * @return DescribeBackupDatabaseResponse
     */
    describeBackupDatabase(request: DescribeBackupDatabaseRequest): Promise<DescribeBackupDatabaseResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeBackupPolicyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeBackupPolicyResponse
     */
    describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBackupPolicyResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeBackupPolicyRequest
      * @return DescribeBackupPolicyResponse
     */
    describeBackupPolicy(request: DescribeBackupPolicyRequest): Promise<DescribeBackupPolicyResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeBackupTasksRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeBackupTasksResponse
     */
    describeBackupTasksWithOptions(request: DescribeBackupTasksRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBackupTasksResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeBackupTasksRequest
      * @return DescribeBackupTasksResponse
     */
    describeBackupTasks(request: DescribeBackupTasksRequest): Promise<DescribeBackupTasksResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeBackupsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeBackupsResponse
     */
    describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBackupsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeBackupsRequest
      * @return DescribeBackupsResponse
     */
    describeBackups(request: DescribeBackupsRequest): Promise<DescribeBackupsResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   MariaDB
      * ### Usage notes
      * *   If the return value of the **DownloadLink** parameter is NULL, ApsaraDB RDS does not provide a download URL.
      * *   If the return value of the **DownloadLink** parameter is not NULL, ApsaraDB RDS provides a URL for you to download backup files. The expiration time of the URL is specified by the **LinkExpiredTime** parameter. You must download the backup files before the expiration time.
      * *   If you use a RAM user to download backup files, you must grant permissions to the RAM user. For more information, see [Grant backup file download permissions to a RAM user with read-only permissions](~~100043~~).
      * *   Each log file that is returned by this operation contains the log entries that are generated over the time range that is specified by the StartTime and EndTime parameters.
      *
      * @param request DescribeBinlogFilesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeBinlogFilesResponse
     */
    describeBinlogFilesWithOptions(request: DescribeBinlogFilesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeBinlogFilesResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   MariaDB
      * ### Usage notes
      * *   If the return value of the **DownloadLink** parameter is NULL, ApsaraDB RDS does not provide a download URL.
      * *   If the return value of the **DownloadLink** parameter is not NULL, ApsaraDB RDS provides a URL for you to download backup files. The expiration time of the URL is specified by the **LinkExpiredTime** parameter. You must download the backup files before the expiration time.
      * *   If you use a RAM user to download backup files, you must grant permissions to the RAM user. For more information, see [Grant backup file download permissions to a RAM user with read-only permissions](~~100043~~).
      * *   Each log file that is returned by this operation contains the log entries that are generated over the time range that is specified by the StartTime and EndTime parameters.
      *
      * @param request DescribeBinlogFilesRequest
      * @return DescribeBinlogFilesResponse
     */
    describeBinlogFiles(request: DescribeBinlogFilesRequest): Promise<DescribeBinlogFilesResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeCharacterSetNameRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeCharacterSetNameResponse
     */
    describeCharacterSetNameWithOptions(request: DescribeCharacterSetNameRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCharacterSetNameResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeCharacterSetNameRequest
      * @return DescribeCharacterSetNameResponse
     */
    describeCharacterSetName(request: DescribeCharacterSetNameRequest): Promise<DescribeCharacterSetNameResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeClassDetailsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeClassDetailsResponse
     */
    describeClassDetailsWithOptions(request: DescribeClassDetailsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeClassDetailsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeClassDetailsRequest
      * @return DescribeClassDetailsResponse
     */
    describeClassDetails(request: DescribeClassDetailsRequest): Promise<DescribeClassDetailsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      *
      * @param request DescribeCloudMigrationPrecheckResultRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeCloudMigrationPrecheckResultResponse
     */
    describeCloudMigrationPrecheckResultWithOptions(request: DescribeCloudMigrationPrecheckResultRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCloudMigrationPrecheckResultResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      *
      * @param request DescribeCloudMigrationPrecheckResultRequest
      * @return DescribeCloudMigrationPrecheckResultResponse
     */
    describeCloudMigrationPrecheckResult(request: DescribeCloudMigrationPrecheckResultRequest): Promise<DescribeCloudMigrationPrecheckResultResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      *
      * @param request DescribeCloudMigrationResultRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeCloudMigrationResultResponse
     */
    describeCloudMigrationResultWithOptions(request: DescribeCloudMigrationResultRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCloudMigrationResultResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      *
      * @param request DescribeCloudMigrationResultRequest
      * @return DescribeCloudMigrationResultResponse
     */
    describeCloudMigrationResult(request: DescribeCloudMigrationResultRequest): Promise<DescribeCloudMigrationResultResponse>;
    /**
      * ### Supported database engine
      * SQL Server
      *
      * @param request DescribeCollationTimeZonesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeCollationTimeZonesResponse
     */
    describeCollationTimeZonesWithOptions(request: DescribeCollationTimeZonesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCollationTimeZonesResponse>;
    /**
      * ### Supported database engine
      * SQL Server
      *
      * @param request DescribeCollationTimeZonesRequest
      * @return DescribeCollationTimeZonesResponse
     */
    describeCollationTimeZones(request: DescribeCollationTimeZonesRequest): Promise<DescribeCollationTimeZonesResponse>;
    /**
      * ApsaraDB RDS for MySQL instances support cross-region backup and restoration. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~) and [Restore the data of an ApsaraDB RDS for MySQL instance across regions](~~120875~~).
      * Before you call this operation, make sure that the instance runs one of the following database engines:
      * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
      * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
      * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](~~206671~~).
      *
      * @param request DescribeCrossBackupMetaListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeCrossBackupMetaListResponse
     */
    describeCrossBackupMetaListWithOptions(request: DescribeCrossBackupMetaListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCrossBackupMetaListResponse>;
    /**
      * ApsaraDB RDS for MySQL instances support cross-region backup and restoration. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~) and [Restore the data of an ApsaraDB RDS for MySQL instance across regions](~~120875~~).
      * Before you call this operation, make sure that the instance runs one of the following database engines:
      * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
      * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
      * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](~~206671~~).
      *
      * @param request DescribeCrossBackupMetaListRequest
      * @return DescribeCrossBackupMetaListResponse
     */
    describeCrossBackupMetaList(request: DescribeCrossBackupMetaListRequest): Promise<DescribeCrossBackupMetaListResponse>;
    /**
      * Before you call this operation, make sure that the instance runs one of the following database engines:
      * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
      * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
      * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](~~206671~~).
      *
      * @param request DescribeCrossRegionBackupDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeCrossRegionBackupDBInstanceResponse
     */
    describeCrossRegionBackupDBInstanceWithOptions(request: DescribeCrossRegionBackupDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCrossRegionBackupDBInstanceResponse>;
    /**
      * Before you call this operation, make sure that the instance runs one of the following database engines:
      * *   MySQL. For more information, see [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~).
      * *   SQL Server. For more information, see [Back up an ApsaraDB RDS for SQL Server instance across regions](~~187923~~).
      * *   PostgreSQL. For more information, see [Enable cross-region backups for an ApsaraDB RDS for PostgreSQL instance](~~206671~~).
      *
      * @param request DescribeCrossRegionBackupDBInstanceRequest
      * @return DescribeCrossRegionBackupDBInstanceResponse
     */
    describeCrossRegionBackupDBInstance(request: DescribeCrossRegionBackupDBInstanceRequest): Promise<DescribeCrossRegionBackupDBInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * >  For more information about how to query cross-region log backup files, see [DescribeCrossRegionLogBackupFiles](~~121734~~).
      *
      * @param request DescribeCrossRegionBackupsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeCrossRegionBackupsResponse
     */
    describeCrossRegionBackupsWithOptions(request: DescribeCrossRegionBackupsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCrossRegionBackupsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * >  For more information about how to query cross-region log backup files, see [DescribeCrossRegionLogBackupFiles](~~121734~~).
      *
      * @param request DescribeCrossRegionBackupsRequest
      * @return DescribeCrossRegionBackupsResponse
     */
    describeCrossRegionBackups(request: DescribeCrossRegionBackupsRequest): Promise<DescribeCrossRegionBackupsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * >  For more information about how to query cross-region data backup files, see [DescribeCrossRegionBackups](~~121733~~).
      *
      * @param request DescribeCrossRegionLogBackupFilesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeCrossRegionLogBackupFilesResponse
     */
    describeCrossRegionLogBackupFilesWithOptions(request: DescribeCrossRegionLogBackupFilesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCrossRegionLogBackupFilesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * >  For more information about how to query cross-region data backup files, see [DescribeCrossRegionBackups](~~121733~~).
      *
      * @param request DescribeCrossRegionLogBackupFilesRequest
      * @return DescribeCrossRegionLogBackupFilesResponse
     */
    describeCrossRegionLogBackupFiles(request: DescribeCrossRegionLogBackupFilesRequest): Promise<DescribeCrossRegionLogBackupFilesResponse>;
    describeCurrentModifyOrderWithOptions(request: DescribeCurrentModifyOrderRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCurrentModifyOrderResponse>;
    describeCurrentModifyOrder(request: DescribeCurrentModifyOrderRequest): Promise<DescribeCurrentModifyOrderResponse>;
    describeCustinsResourceInfoWithOptions(request: DescribeCustinsResourceInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeCustinsResourceInfoResponse>;
    describeCustinsResourceInfo(request: DescribeCustinsResourceInfoRequest): Promise<DescribeCustinsResourceInfoResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeDBInstanceAttributeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceAttributeResponse
     */
    describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceAttributeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeDBInstanceAttributeRequest
      * @return DescribeDBInstanceAttributeResponse
     */
    describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): Promise<DescribeDBInstanceAttributeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstanceByTagsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceByTagsResponse
     */
    describeDBInstanceByTagsWithOptions(request: DescribeDBInstanceByTagsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceByTagsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstanceByTagsRequest
      * @return DescribeDBInstanceByTagsResponse
     */
    describeDBInstanceByTags(request: DescribeDBInstanceByTagsRequest): Promise<DescribeDBInstanceByTagsResponse>;
    describeDBInstanceConnectivityWithOptions(request: DescribeDBInstanceConnectivityRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceConnectivityResponse>;
    describeDBInstanceConnectivity(request: DescribeDBInstanceConnectivityRequest): Promise<DescribeDBInstanceConnectivityResponse>;
    /**
      * This operation is phased out.
      *
      * @param request DescribeDBInstanceDetailRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceDetailResponse
     */
    describeDBInstanceDetailWithOptions(request: DescribeDBInstanceDetailRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceDetailResponse>;
    /**
      * This operation is phased out.
      *
      * @param request DescribeDBInstanceDetailRequest
      * @return DescribeDBInstanceDetailResponse
     */
    describeDBInstanceDetail(request: DescribeDBInstanceDetailRequest): Promise<DescribeDBInstanceDetailResponse>;
    describeDBInstanceEncryptionKeyWithOptions(request: DescribeDBInstanceEncryptionKeyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceEncryptionKeyResponse>;
    describeDBInstanceEncryptionKey(request: DescribeDBInstanceEncryptionKeyRequest): Promise<DescribeDBInstanceEncryptionKeyResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS MySQL
      *
      * @param request DescribeDBInstanceEndpointsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceEndpointsResponse
     */
    describeDBInstanceEndpointsWithOptions(request: DescribeDBInstanceEndpointsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceEndpointsResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS MySQL
      *
      * @param request DescribeDBInstanceEndpointsRequest
      * @return DescribeDBInstanceEndpointsResponse
     */
    describeDBInstanceEndpoints(request: DescribeDBInstanceEndpointsRequest): Promise<DescribeDBInstanceEndpointsResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Query the data replication mode of an ApsaraDB RDS for MySQL instance](~~96055~~)
      * *   [Query the data replication mode of an ApsaraDB RDS for PostgreSQL instance](~~151265~~)
      * *   [Query the data replication mode of an ApsaraDB RDS for SQL Server instance](~~415433~~)
      *
      * @param request DescribeDBInstanceHAConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceHAConfigResponse
     */
    describeDBInstanceHAConfigWithOptions(request: DescribeDBInstanceHAConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceHAConfigResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Query the data replication mode of an ApsaraDB RDS for MySQL instance](~~96055~~)
      * *   [Query the data replication mode of an ApsaraDB RDS for PostgreSQL instance](~~151265~~)
      * *   [Query the data replication mode of an ApsaraDB RDS for SQL Server instance](~~415433~~)
      *
      * @param request DescribeDBInstanceHAConfigRequest
      * @return DescribeDBInstanceHAConfigResponse
     */
    describeDBInstanceHAConfig(request: DescribeDBInstanceHAConfigRequest): Promise<DescribeDBInstanceHAConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeDBInstanceIPArrayListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceIPArrayListResponse
     */
    describeDBInstanceIPArrayListWithOptions(request: DescribeDBInstanceIPArrayListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceIPArrayListResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeDBInstanceIPArrayListRequest
      * @return DescribeDBInstanceIPArrayListResponse
     */
    describeDBInstanceIPArrayList(request: DescribeDBInstanceIPArrayListRequest): Promise<DescribeDBInstanceIPArrayListResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS SQL Server
      * ### [](#)Prerequisites
      * *   The RDS instance runs RDS Basic Edition, RDS High-availability Edition, or RDS Cluster Edition. If your RDS instance runs RDS High-availability Edition, make sure that the instance runs SQL Server 2012 or later.
      * *   The RDS instance belongs to a general-purpose or dedicated instance family. The shared instance family is not supported.
      * *   If the RDS instance runs RDS Basic Edition, the instance is created on or after September 02, 2022. You can view the Creation Time
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Configure a distributed transaction whitelist](~~124321~~)
      *
      * @param request DescribeDBInstanceIpHostnameRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceIpHostnameResponse
     */
    describeDBInstanceIpHostnameWithOptions(request: DescribeDBInstanceIpHostnameRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceIpHostnameResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS SQL Server
      * ### [](#)Prerequisites
      * *   The RDS instance runs RDS Basic Edition, RDS High-availability Edition, or RDS Cluster Edition. If your RDS instance runs RDS High-availability Edition, make sure that the instance runs SQL Server 2012 or later.
      * *   The RDS instance belongs to a general-purpose or dedicated instance family. The shared instance family is not supported.
      * *   If the RDS instance runs RDS Basic Edition, the instance is created on or after September 02, 2022. You can view the Creation Time
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Configure a distributed transaction whitelist](~~124321~~)
      *
      * @param request DescribeDBInstanceIpHostnameRequest
      * @return DescribeDBInstanceIpHostnameResponse
     */
    describeDBInstanceIpHostname(request: DescribeDBInstanceIpHostnameRequest): Promise<DescribeDBInstanceIpHostnameResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [View the Enhanced Monitoring metrics](~~299200~~)
      *
      * @param request DescribeDBInstanceMetricsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceMetricsResponse
     */
    describeDBInstanceMetricsWithOptions(request: DescribeDBInstanceMetricsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceMetricsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [View the Enhanced Monitoring metrics](~~299200~~)
      *
      * @param request DescribeDBInstanceMetricsRequest
      * @return DescribeDBInstanceMetricsResponse
     */
    describeDBInstanceMetrics(request: DescribeDBInstanceMetricsRequest): Promise<DescribeDBInstanceMetricsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstanceMonitorRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceMonitorResponse
     */
    describeDBInstanceMonitorWithOptions(request: DescribeDBInstanceMonitorRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceMonitorResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstanceMonitorRequest
      * @return DescribeDBInstanceMonitorResponse
     */
    describeDBInstanceMonitor(request: DescribeDBInstanceMonitorRequest): Promise<DescribeDBInstanceMonitorResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstanceNetInfoRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceNetInfoResponse
     */
    describeDBInstanceNetInfoWithOptions(request: DescribeDBInstanceNetInfoRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceNetInfoResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstanceNetInfoRequest
      * @return DescribeDBInstanceNetInfoResponse
     */
    describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): Promise<DescribeDBInstanceNetInfoResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstanceNetInfoForChannelRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceNetInfoForChannelResponse
     */
    describeDBInstanceNetInfoForChannelWithOptions(request: DescribeDBInstanceNetInfoForChannelRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceNetInfoForChannelResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstanceNetInfoForChannelRequest
      * @return DescribeDBInstanceNetInfoForChannelResponse
     */
    describeDBInstanceNetInfoForChannel(request: DescribeDBInstanceNetInfoForChannelRequest): Promise<DescribeDBInstanceNetInfoForChannelResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstancePerformanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstancePerformanceResponse
     */
    describeDBInstancePerformanceWithOptions(request: DescribeDBInstancePerformanceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstancePerformanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstancePerformanceRequest
      * @return DescribeDBInstancePerformanceResponse
     */
    describeDBInstancePerformance(request: DescribeDBInstancePerformanceRequest): Promise<DescribeDBInstancePerformanceResponse>;
    /**
      * @deprecated
      *
      * @param request DescribeDBInstancePromoteActivityRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstancePromoteActivityResponse
     */
    describeDBInstancePromoteActivityWithOptions(request: DescribeDBInstancePromoteActivityRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstancePromoteActivityResponse>;
    /**
      * @deprecated
      *
      * @param request DescribeDBInstancePromoteActivityRequest
      * @return DescribeDBInstancePromoteActivityResponse
     */
    describeDBInstancePromoteActivity(request: DescribeDBInstancePromoteActivityRequest): Promise<DescribeDBInstancePromoteActivityResponse>;
    /**
      * This operation is used to query the original settings of shared proxies rather than the latest settings of dedicated proxies. For more information about how to query the settings of dedicated proxies, see [DescribeDBProxy](~~141055~~).
      * Before you call this operation, make sure that the following requirements are met:
      * *   The shared proxy feature must be enabled for the primary instance.
      * *   The read/write splitting feature must be enabled for the primary instance.
      *
      * @param request DescribeDBInstanceProxyConfigurationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceProxyConfigurationResponse
     */
    describeDBInstanceProxyConfigurationWithOptions(request: DescribeDBInstanceProxyConfigurationRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceProxyConfigurationResponse>;
    /**
      * This operation is used to query the original settings of shared proxies rather than the latest settings of dedicated proxies. For more information about how to query the settings of dedicated proxies, see [DescribeDBProxy](~~141055~~).
      * Before you call this operation, make sure that the following requirements are met:
      * *   The shared proxy feature must be enabled for the primary instance.
      * *   The read/write splitting feature must be enabled for the primary instance.
      *
      * @param request DescribeDBInstanceProxyConfigurationRequest
      * @return DescribeDBInstanceProxyConfigurationResponse
     */
    describeDBInstanceProxyConfiguration(request: DescribeDBInstanceProxyConfigurationRequest): Promise<DescribeDBInstanceProxyConfigurationResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DescribeDBInstanceSSLRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceSSLResponse
     */
    describeDBInstanceSSLWithOptions(request: DescribeDBInstanceSSLRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceSSLResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DescribeDBInstanceSSLRequest
      * @return DescribeDBInstanceSSLResponse
     */
    describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): Promise<DescribeDBInstanceSSLResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      *
      * @param request DescribeDBInstanceTDERequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstanceTDEResponse
     */
    describeDBInstanceTDEWithOptions(request: DescribeDBInstanceTDERequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstanceTDEResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      *
      * @param request DescribeDBInstanceTDERequest
      * @return DescribeDBInstanceTDEResponse
     */
    describeDBInstanceTDE(request: DescribeDBInstanceTDERequest): Promise<DescribeDBInstanceTDEResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstancesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstancesResponse
     */
    describeDBInstancesWithOptions(request: DescribeDBInstancesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstancesResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDBInstancesRequest
      * @return DescribeDBInstancesResponse
     */
    describeDBInstances(request: DescribeDBInstancesRequest): Promise<DescribeDBInstancesResponse>;
    /**
      * @deprecated : DescribeDBInstancesAsCsv is deprecated, please use Rds::2014-08-15::DescribeDBInstances instead.
      * **
      * **Description:** This operation is phased out. Use the [DescribeDBInstances](~~610396~~) operation instead.
      *
      * @param request DescribeDBInstancesAsCsvRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstancesAsCsvResponse
     */
    describeDBInstancesAsCsvWithOptions(request: DescribeDBInstancesAsCsvRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstancesAsCsvResponse>;
    /**
      * @deprecated : DescribeDBInstancesAsCsv is deprecated, please use Rds::2014-08-15::DescribeDBInstances instead.
      * **
      * **Description:** This operation is phased out. Use the [DescribeDBInstances](~~610396~~) operation instead.
      *
      * @param request DescribeDBInstancesAsCsvRequest
      * @return DescribeDBInstancesAsCsvResponse
     */
    describeDBInstancesAsCsv(request: DescribeDBInstancesAsCsvRequest): Promise<DescribeDBInstancesAsCsvResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeDBInstancesByExpireTimeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstancesByExpireTimeResponse
     */
    describeDBInstancesByExpireTimeWithOptions(request: DescribeDBInstancesByExpireTimeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstancesByExpireTimeResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request DescribeDBInstancesByExpireTimeRequest
      * @return DescribeDBInstancesByExpireTimeResponse
     */
    describeDBInstancesByExpireTime(request: DescribeDBInstancesByExpireTimeRequest): Promise<DescribeDBInstancesByExpireTimeResponse>;
    /**
      * This operation is phased out.
      *
      * @param request DescribeDBInstancesByPerformanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstancesByPerformanceResponse
     */
    describeDBInstancesByPerformanceWithOptions(request: DescribeDBInstancesByPerformanceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstancesByPerformanceResponse>;
    /**
      * This operation is phased out.
      *
      * @param request DescribeDBInstancesByPerformanceRequest
      * @return DescribeDBInstancesByPerformanceResponse
     */
    describeDBInstancesByPerformance(request: DescribeDBInstancesByPerformanceRequest): Promise<DescribeDBInstancesByPerformanceResponse>;
    /**
      * This operation is phased out.
      *
      * @param request DescribeDBInstancesForCloneRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBInstancesForCloneResponse
     */
    describeDBInstancesForCloneWithOptions(request: DescribeDBInstancesForCloneRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBInstancesForCloneResponse>;
    /**
      * This operation is phased out.
      *
      * @param request DescribeDBInstancesForCloneRequest
      * @return DescribeDBInstancesForCloneResponse
     */
    describeDBInstancesForClone(request: DescribeDBInstancesForCloneRequest): Promise<DescribeDBInstancesForCloneResponse>;
    /**
      * Before you purchase or upgrade an instance that runs MySQL or PostgreSQL, you can call the DescribeDBMiniEngineVersions operation to query the minor engine versions that are available for the instance.
      *
      * @param request DescribeDBMiniEngineVersionsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBMiniEngineVersionsResponse
     */
    describeDBMiniEngineVersionsWithOptions(request: DescribeDBMiniEngineVersionsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBMiniEngineVersionsResponse>;
    /**
      * Before you purchase or upgrade an instance that runs MySQL or PostgreSQL, you can call the DescribeDBMiniEngineVersions operation to query the minor engine versions that are available for the instance.
      *
      * @param request DescribeDBMiniEngineVersionsRequest
      * @return DescribeDBMiniEngineVersionsResponse
     */
    describeDBMiniEngineVersions(request: DescribeDBMiniEngineVersionsRequest): Promise<DescribeDBMiniEngineVersionsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      *
      * @param request DescribeDBProxyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBProxyResponse
     */
    describeDBProxyWithOptions(request: DescribeDBProxyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBProxyResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      *
      * @param request DescribeDBProxyRequest
      * @return DescribeDBProxyResponse
     */
    describeDBProxy(request: DescribeDBProxyRequest): Promise<DescribeDBProxyResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      *
      * @param request DescribeDBProxyEndpointRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBProxyEndpointResponse
     */
    describeDBProxyEndpointWithOptions(request: DescribeDBProxyEndpointRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBProxyEndpointResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      *
      * @param request DescribeDBProxyEndpointRequest
      * @return DescribeDBProxyEndpointResponse
     */
    describeDBProxyEndpoint(request: DescribeDBProxyEndpointRequest): Promise<DescribeDBProxyEndpointResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * >  Starting October 17, 2023, ApsaraDB RDS provides a dedicated proxy free of charge for each ApsaraDB RDS for MySQL instance on RDS Cluster Edition. For more information, see [\\[Special offers/Price changes\\] One proxy is provided free of charge for ApsaraDB RDS for MySQL instances on RDS Cluster Edition](~~2555466~~).
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [View the monitoring data of an ApsaraDB RDS for MySQL instance](~~194241~~)
      * *   [View the monitoring data of an ApsaraDB RDS for PostgreSQL instance](~~418275~~)
      *
      * @param request DescribeDBProxyPerformanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDBProxyPerformanceResponse
     */
    describeDBProxyPerformanceWithOptions(request: DescribeDBProxyPerformanceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDBProxyPerformanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * >  Starting October 17, 2023, ApsaraDB RDS provides a dedicated proxy free of charge for each ApsaraDB RDS for MySQL instance on RDS Cluster Edition. For more information, see [\\[Special offers/Price changes\\] One proxy is provided free of charge for ApsaraDB RDS for MySQL instances on RDS Cluster Edition](~~2555466~~).
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [View the monitoring data of an ApsaraDB RDS for MySQL instance](~~194241~~)
      * *   [View the monitoring data of an ApsaraDB RDS for PostgreSQL instance](~~418275~~)
      *
      * @param request DescribeDBProxyPerformanceRequest
      * @return DescribeDBProxyPerformanceResponse
     */
    describeDBProxyPerformance(request: DescribeDBProxyPerformanceRequest): Promise<DescribeDBProxyPerformanceResponse>;
    /**
      * ### [](#)Supported database engines
      * SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Configures a distributed transaction whitelist for an ApsaraDB RDS for SQL Server instance](~~124321~~)
      *
      * @param request DescribeDTCSecurityIpHostsForSQLServerRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDTCSecurityIpHostsForSQLServerResponse
     */
    describeDTCSecurityIpHostsForSQLServerWithOptions(request: DescribeDTCSecurityIpHostsForSQLServerRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDTCSecurityIpHostsForSQLServerResponse>;
    /**
      * ### [](#)Supported database engines
      * SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Configures a distributed transaction whitelist for an ApsaraDB RDS for SQL Server instance](~~124321~~)
      *
      * @param request DescribeDTCSecurityIpHostsForSQLServerRequest
      * @return DescribeDTCSecurityIpHostsForSQLServerResponse
     */
    describeDTCSecurityIpHostsForSQLServer(request: DescribeDTCSecurityIpHostsForSQLServerRequest): Promise<DescribeDTCSecurityIpHostsForSQLServerResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDatabasesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDatabasesResponse
     */
    describeDatabasesWithOptions(request: DescribeDatabasesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDatabasesResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeDatabasesRequest
      * @return DescribeDatabasesResponse
     */
    describeDatabases(request: DescribeDatabasesRequest): Promise<DescribeDatabasesResponse>;
    /**
      * Dedicated clusters allow you to manage a number of instances in a cluster at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
      *
      * @param request DescribeDedicatedHostGroupsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDedicatedHostGroupsResponse
     */
    describeDedicatedHostGroupsWithOptions(request: DescribeDedicatedHostGroupsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDedicatedHostGroupsResponse>;
    /**
      * Dedicated clusters allow you to manage a number of instances in a cluster at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
      *
      * @param request DescribeDedicatedHostGroupsRequest
      * @return DescribeDedicatedHostGroupsResponse
     */
    describeDedicatedHostGroups(request: DescribeDedicatedHostGroupsRequest): Promise<DescribeDedicatedHostGroupsResponse>;
    /**
      * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
      *
      * @param request DescribeDedicatedHostsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDedicatedHostsResponse
     */
    describeDedicatedHostsWithOptions(request: DescribeDedicatedHostsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDedicatedHostsResponse>;
    /**
      * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
      *
      * @param request DescribeDedicatedHostsRequest
      * @return DescribeDedicatedHostsResponse
     */
    describeDedicatedHosts(request: DescribeDedicatedHostsRequest): Promise<DescribeDedicatedHostsResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * > This operation is available only for instances that use local disks.
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * For more information about how to retain the data backup files of an instance after the instance is released, see [Configure automatic backup](~~98818~~).
      *
      * @param request DescribeDetachedBackupsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDetachedBackupsResponse
     */
    describeDetachedBackupsWithOptions(request: DescribeDetachedBackupsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDetachedBackupsResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * > This operation is available only for instances that use local disks.
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * For more information about how to retain the data backup files of an instance after the instance is released, see [Configure automatic backup](~~98818~~).
      *
      * @param request DescribeDetachedBackupsRequest
      * @return DescribeDetachedBackupsResponse
     */
    describeDetachedBackups(request: DescribeDetachedBackupsRequest): Promise<DescribeDetachedBackupsResponse>;
    /**
      * @deprecated
      * >  This operation is phased out.
      *
      * @param request DescribeDiagnosticReportListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeDiagnosticReportListResponse
     */
    describeDiagnosticReportListWithOptions(request: DescribeDiagnosticReportListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeDiagnosticReportListResponse>;
    /**
      * @deprecated
      * >  This operation is phased out.
      *
      * @param request DescribeDiagnosticReportListRequest
      * @return DescribeDiagnosticReportListResponse
     */
    describeDiagnosticReportList(request: DescribeDiagnosticReportListRequest): Promise<DescribeDiagnosticReportListResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeErrorLogsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeErrorLogsResponse
     */
    describeErrorLogsWithOptions(request: DescribeErrorLogsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeErrorLogsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeErrorLogsRequest
      * @return DescribeErrorLogsResponse
     */
    describeErrorLogs(request: DescribeErrorLogsRequest): Promise<DescribeErrorLogsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Historical events of an ApsaraDB RDS for MySQL instance](~~129759~~)
      * *   [Historical events of an ApsaraDB RDS for PostgreSQL instance](~~131008~~)
      * *   [Historical events of an ApsaraDB RDS for SQL Server instance](~~131013~~)
      * *   [Historical events of an ApsaraDB RDS for MariaDB instance](~~131010~~)
      *
      * @param request DescribeEventsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeEventsResponse
     */
    describeEventsWithOptions(request: DescribeEventsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeEventsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Historical events of an ApsaraDB RDS for MySQL instance](~~129759~~)
      * *   [Historical events of an ApsaraDB RDS for PostgreSQL instance](~~131008~~)
      * *   [Historical events of an ApsaraDB RDS for SQL Server instance](~~131013~~)
      * *   [Historical events of an ApsaraDB RDS for MariaDB instance](~~131010~~)
      *
      * @param request DescribeEventsRequest
      * @return DescribeEventsResponse
     */
    describeEvents(request: DescribeEventsRequest): Promise<DescribeEventsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      *
      * @param request DescribeGadInstancesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeGadInstancesResponse
     */
    describeGadInstancesWithOptions(request: DescribeGadInstancesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeGadInstancesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      *
      * @param request DescribeGadInstancesRequest
      * @return DescribeGadInstancesResponse
     */
    describeGadInstances(request: DescribeGadInstancesRequest): Promise<DescribeGadInstancesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * [What is availability detection?](~~207467~~)
      *
      * @param request DescribeHADiagnoseConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeHADiagnoseConfigResponse
     */
    describeHADiagnoseConfigWithOptions(request: DescribeHADiagnoseConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHADiagnoseConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * [What is availability detection?](~~207467~~)
      *
      * @param request DescribeHADiagnoseConfigRequest
      * @return DescribeHADiagnoseConfigResponse
     */
    describeHADiagnoseConfig(request: DescribeHADiagnoseConfigRequest): Promise<DescribeHADiagnoseConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeHASwitchConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeHASwitchConfigResponse
     */
    describeHASwitchConfigWithOptions(request: DescribeHASwitchConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHASwitchConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeHASwitchConfigRequest
      * @return DescribeHASwitchConfigResponse
     */
    describeHASwitchConfig(request: DescribeHASwitchConfigRequest): Promise<DescribeHASwitchConfigResponse>;
    describeHistoryEventsWithOptions(request: DescribeHistoryEventsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHistoryEventsResponse>;
    describeHistoryEvents(request: DescribeHistoryEventsRequest): Promise<DescribeHistoryEventsResponse>;
    describeHistoryEventsStatWithOptions(request: DescribeHistoryEventsStatRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHistoryEventsStatResponse>;
    describeHistoryEventsStat(request: DescribeHistoryEventsStatRequest): Promise<DescribeHistoryEventsStatResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Tasks of an ApsaraDB RDS for MySQL instance](~~474275~~)
      * *   [Tasks of an ApsaraDB RDS for PostrgreSQL instance](~~474537~~)
      * *   [Tasks of an ApsaraDB RDS for SQL Server instance](~~614826~~)
      *
      * @param request DescribeHistoryTasksRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeHistoryTasksResponse
     */
    describeHistoryTasksWithOptions(request: DescribeHistoryTasksRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHistoryTasksResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Tasks of an ApsaraDB RDS for MySQL instance](~~474275~~)
      * *   [Tasks of an ApsaraDB RDS for PostrgreSQL instance](~~474537~~)
      * *   [Tasks of an ApsaraDB RDS for SQL Server instance](~~614826~~)
      *
      * @param request DescribeHistoryTasksRequest
      * @return DescribeHistoryTasksResponse
     */
    describeHistoryTasks(request: DescribeHistoryTasksRequest): Promise<DescribeHistoryTasksResponse>;
    describeHistoryTasksStatWithOptions(request: DescribeHistoryTasksStatRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHistoryTasksStatResponse>;
    describeHistoryTasksStat(request: DescribeHistoryTasksStatRequest): Promise<DescribeHistoryTasksStatResponse>;
    describeHostGroupElasticStrategyParametersWithOptions(request: DescribeHostGroupElasticStrategyParametersRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHostGroupElasticStrategyParametersResponse>;
    describeHostGroupElasticStrategyParameters(request: DescribeHostGroupElasticStrategyParametersRequest): Promise<DescribeHostGroupElasticStrategyParametersResponse>;
    /**
      * >  This operation is available only for instances that run SQL Server. If you require this operation, contact **Alibaba Cloud technical support**.
      * ### [](#)Prerequisites
      * The instance meets the following requirements:
      * *   The instance resides in a region other than the China (Zhangjiakou) region.
      * *   The instance runs RDS Basic Edition, RDS Cluster Edition, or RDS High-availability Edition. If your instance runs RDS High-availability Edition, make sure that the instance runs SQL Server 2012 or later.
      * *   The instance belongs to the general-purpose or dedicated instance family. The shared instance family is not supported.
      * *   The instance resides in a virtual private cloud (VPC). For more information about how to change the network type of an RDS instance, see [Change the network type](~~95707~~).
      * *   If the instance runs RDS High-availability Edition or RDS Cluster Edition, the instance is created on or after January 1, 2021. If the instance runs RDS Basic Edition, the instance is created on or after September 02, 2022. You can view the **Creation Time** parameter of an instance in the **Status** section of the **Basic Information** page in the ApsaraDB RDS console.
      * Your **Alibaba Cloud account** is used for logons.
      *
      * @param request DescribeHostWebShellRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeHostWebShellResponse
     */
    describeHostWebShellWithOptions(request: DescribeHostWebShellRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHostWebShellResponse>;
    /**
      * >  This operation is available only for instances that run SQL Server. If you require this operation, contact **Alibaba Cloud technical support**.
      * ### [](#)Prerequisites
      * The instance meets the following requirements:
      * *   The instance resides in a region other than the China (Zhangjiakou) region.
      * *   The instance runs RDS Basic Edition, RDS Cluster Edition, or RDS High-availability Edition. If your instance runs RDS High-availability Edition, make sure that the instance runs SQL Server 2012 or later.
      * *   The instance belongs to the general-purpose or dedicated instance family. The shared instance family is not supported.
      * *   The instance resides in a virtual private cloud (VPC). For more information about how to change the network type of an RDS instance, see [Change the network type](~~95707~~).
      * *   If the instance runs RDS High-availability Edition or RDS Cluster Edition, the instance is created on or after January 1, 2021. If the instance runs RDS Basic Edition, the instance is created on or after September 02, 2022. You can view the **Creation Time** parameter of an instance in the **Status** section of the **Basic Information** page in the ApsaraDB RDS console.
      * Your **Alibaba Cloud account** is used for logons.
      *
      * @param request DescribeHostWebShellRequest
      * @return DescribeHostWebShellResponse
     */
    describeHostWebShell(request: DescribeHostWebShellRequest): Promise<DescribeHostWebShellResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeInstanceAutoRenewalAttributeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeInstanceAutoRenewalAttributeResponse
     */
    describeInstanceAutoRenewalAttributeWithOptions(request: DescribeInstanceAutoRenewalAttributeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceAutoRenewalAttributeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeInstanceAutoRenewalAttributeRequest
      * @return DescribeInstanceAutoRenewalAttributeResponse
     */
    describeInstanceAutoRenewalAttribute(request: DescribeInstanceAutoRenewalAttributeRequest): Promise<DescribeInstanceAutoRenewalAttributeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      *
      * @param request DescribeInstanceCrossBackupPolicyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeInstanceCrossBackupPolicyResponse
     */
    describeInstanceCrossBackupPolicyWithOptions(request: DescribeInstanceCrossBackupPolicyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceCrossBackupPolicyResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      *
      * @param request DescribeInstanceCrossBackupPolicyRequest
      * @return DescribeInstanceCrossBackupPolicyResponse
     */
    describeInstanceCrossBackupPolicy(request: DescribeInstanceCrossBackupPolicyRequest): Promise<DescribeInstanceCrossBackupPolicyResponse>;
    describeInstanceKeywordsWithOptions(request: DescribeInstanceKeywordsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceKeywordsResponse>;
    describeInstanceKeywords(request: DescribeInstanceKeywordsRequest): Promise<DescribeInstanceKeywordsResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DescribeInstanceLinkedWhitelistTemplateRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeInstanceLinkedWhitelistTemplateResponse
     */
    describeInstanceLinkedWhitelistTemplateWithOptions(request: DescribeInstanceLinkedWhitelistTemplateRequest, runtime: $Util.RuntimeOptions): Promise<DescribeInstanceLinkedWhitelistTemplateResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DescribeInstanceLinkedWhitelistTemplateRequest
      * @return DescribeInstanceLinkedWhitelistTemplateResponse
     */
    describeInstanceLinkedWhitelistTemplate(request: DescribeInstanceLinkedWhitelistTemplateRequest): Promise<DescribeInstanceLinkedWhitelistTemplateResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   MariaDB
      *
      * @param request DescribeLocalAvailableRecoveryTimeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeLocalAvailableRecoveryTimeResponse
     */
    describeLocalAvailableRecoveryTimeWithOptions(request: DescribeLocalAvailableRecoveryTimeRequest, runtime: $Util.RuntimeOptions): Promise<DescribeLocalAvailableRecoveryTimeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   MariaDB
      *
      * @param request DescribeLocalAvailableRecoveryTimeRequest
      * @return DescribeLocalAvailableRecoveryTimeResponse
     */
    describeLocalAvailableRecoveryTime(request: DescribeLocalAvailableRecoveryTimeRequest): Promise<DescribeLocalAvailableRecoveryTimeResponse>;
    /**
      * ### [](#)Supported database engines
      * SQL Server
      * >  You can call the DescribeBinlogFiles operation to query the log files of instances that run different database engines.
      *
      * @param request DescribeLogBackupFilesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeLogBackupFilesResponse
     */
    describeLogBackupFilesWithOptions(request: DescribeLogBackupFilesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeLogBackupFilesResponse>;
    /**
      * ### [](#)Supported database engines
      * SQL Server
      * >  You can call the DescribeBinlogFiles operation to query the log files of instances that run different database engines.
      *
      * @param request DescribeLogBackupFilesRequest
      * @return DescribeLogBackupFilesResponse
     */
    describeLogBackupFiles(request: DescribeLogBackupFilesRequest): Promise<DescribeLogBackupFilesResponse>;
    describeMarketingActivityWithOptions(request: DescribeMarketingActivityRequest, runtime: $Util.RuntimeOptions): Promise<DescribeMarketingActivityResponse>;
    describeMarketingActivity(request: DescribeMarketingActivityRequest): Promise<DescribeMarketingActivityResponse>;
    /**
      * ### [](#)Supported database engines
      * MySQL
      * > This operation is available for RDS instances that run MySQL 8.0, MySQL 5.7, and MySQL 5.6 on RDS High-availability Edition with local disks.
      * ### [](#)Description
      * Before you call the [RestoreTable](~~131510~~) operation to restore individual databases or tables of an ApsaraDB RDS for MySQL instance, you can call this operation to query the information about the databases and tables that can be restored. For more information, see [Restore individual databases and tables of an ApsaraDB RDS for MySQL instance](~~103175~~).
      *
      * @param request DescribeMetaListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeMetaListResponse
     */
    describeMetaListWithOptions(request: DescribeMetaListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeMetaListResponse>;
    /**
      * ### [](#)Supported database engines
      * MySQL
      * > This operation is available for RDS instances that run MySQL 8.0, MySQL 5.7, and MySQL 5.6 on RDS High-availability Edition with local disks.
      * ### [](#)Description
      * Before you call the [RestoreTable](~~131510~~) operation to restore individual databases or tables of an ApsaraDB RDS for MySQL instance, you can call this operation to query the information about the databases and tables that can be restored. For more information, see [Restore individual databases and tables of an ApsaraDB RDS for MySQL instance](~~103175~~).
      *
      * @param request DescribeMetaListRequest
      * @return DescribeMetaListResponse
     */
    describeMetaList(request: DescribeMetaListRequest): Promise<DescribeMetaListResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      *
      * @param request DescribeMigrateTaskByIdRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeMigrateTaskByIdResponse
     */
    describeMigrateTaskByIdWithOptions(request: DescribeMigrateTaskByIdRequest, runtime: $Util.RuntimeOptions): Promise<DescribeMigrateTaskByIdResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      *
      * @param request DescribeMigrateTaskByIdRequest
      * @return DescribeMigrateTaskByIdResponse
     */
    describeMigrateTaskById(request: DescribeMigrateTaskByIdRequest): Promise<DescribeMigrateTaskByIdResponse>;
    /**
      * ### [](#)Supported database engine
      * *   SQL Server
      * ### [](#)Usage notes
      * This operation allows you to query the migration tasks that are created for the instance over the last week.
      * ### [](#)Precautions
      * *   This operation is supported only for migration tasks that are created to migrate full backup files.
      * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
      *
      * @param request DescribeMigrateTasksRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeMigrateTasksResponse
     */
    describeMigrateTasksWithOptions(request: DescribeMigrateTasksRequest, runtime: $Util.RuntimeOptions): Promise<DescribeMigrateTasksResponse>;
    /**
      * ### [](#)Supported database engine
      * *   SQL Server
      * ### [](#)Usage notes
      * This operation allows you to query the migration tasks that are created for the instance over the last week.
      * ### [](#)Precautions
      * *   This operation is supported only for migration tasks that are created to migrate full backup files.
      * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
      *
      * @param request DescribeMigrateTasksRequest
      * @return DescribeMigrateTasksResponse
     */
    describeMigrateTasks(request: DescribeMigrateTasksRequest): Promise<DescribeMigrateTasksResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS PostgreSQL
      *
      * @param request DescribeModifyPGHbaConfigLogRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeModifyPGHbaConfigLogResponse
     */
    describeModifyPGHbaConfigLogWithOptions(request: DescribeModifyPGHbaConfigLogRequest, runtime: $Util.RuntimeOptions): Promise<DescribeModifyPGHbaConfigLogResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS PostgreSQL
      *
      * @param request DescribeModifyPGHbaConfigLogRequest
      * @return DescribeModifyPGHbaConfigLogResponse
     */
    describeModifyPGHbaConfigLog(request: DescribeModifyPGHbaConfigLogRequest): Promise<DescribeModifyPGHbaConfigLogResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeModifyParameterLogRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeModifyParameterLogResponse
     */
    describeModifyParameterLogWithOptions(request: DescribeModifyParameterLogRequest, runtime: $Util.RuntimeOptions): Promise<DescribeModifyParameterLogResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeModifyParameterLogRequest
      * @return DescribeModifyParameterLogResponse
     */
    describeModifyParameterLog(request: DescribeModifyParameterLogRequest): Promise<DescribeModifyParameterLogResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      * ### [Usage notes](#)
      * This operation is not supported for instances that run SQL Server 2017 EE or SQL Server 2019 EE.
      *
      * @param request DescribeOssDownloadsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeOssDownloadsResponse
     */
    describeOssDownloadsWithOptions(request: DescribeOssDownloadsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeOssDownloadsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      * ### [Usage notes](#)
      * This operation is not supported for instances that run SQL Server 2017 EE or SQL Server 2019 EE.
      *
      * @param request DescribeOssDownloadsRequest
      * @return DescribeOssDownloadsResponse
     */
    describeOssDownloads(request: DescribeOssDownloadsRequest): Promise<DescribeOssDownloadsResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS PostgreSQL
      *
      * @param request DescribePGHbaConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribePGHbaConfigResponse
     */
    describePGHbaConfigWithOptions(request: DescribePGHbaConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribePGHbaConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS PostgreSQL
      *
      * @param request DescribePGHbaConfigRequest
      * @return DescribePGHbaConfigResponse
     */
    describePGHbaConfig(request: DescribePGHbaConfigRequest): Promise<DescribePGHbaConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template for an ApsaraDB RDS for MySQL instance](~~130565~~)
      * *   [Use a parameter template for an ApsaraDB RDS for PostgreSQL instance](~~457176~~)
      *
      * @param request DescribeParameterGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeParameterGroupResponse
     */
    describeParameterGroupWithOptions(request: DescribeParameterGroupRequest, runtime: $Util.RuntimeOptions): Promise<DescribeParameterGroupResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template for an ApsaraDB RDS for MySQL instance](~~130565~~)
      * *   [Use a parameter template for an ApsaraDB RDS for PostgreSQL instance](~~457176~~)
      *
      * @param request DescribeParameterGroupRequest
      * @return DescribeParameterGroupResponse
     */
    describeParameterGroup(request: DescribeParameterGroupRequest): Promise<DescribeParameterGroupResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~)
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~)
      *
      * @param request DescribeParameterGroupsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeParameterGroupsResponse
     */
    describeParameterGroupsWithOptions(request: DescribeParameterGroupsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeParameterGroupsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~)
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~)
      *
      * @param request DescribeParameterGroupsRequest
      * @return DescribeParameterGroupsResponse
     */
    describeParameterGroups(request: DescribeParameterGroupsRequest): Promise<DescribeParameterGroupsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeParameterTemplatesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeParameterTemplatesResponse
     */
    describeParameterTemplatesWithOptions(request: DescribeParameterTemplatesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeParameterTemplatesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeParameterTemplatesRequest
      * @return DescribeParameterTemplatesResponse
     */
    describeParameterTemplates(request: DescribeParameterTemplatesRequest): Promise<DescribeParameterTemplatesResponse>;
    /**
      * ### Applicable engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeParametersRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeParametersResponse
     */
    describeParametersWithOptions(request: DescribeParametersRequest, runtime: $Util.RuntimeOptions): Promise<DescribeParametersResponse>;
    /**
      * ### Applicable engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeParametersRequest
      * @return DescribeParametersResponse
     */
    describeParameters(request: DescribeParametersRequest): Promise<DescribeParametersResponse>;
    /**
      * ### Supported database engines
      * RDS PostgreSQL
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Manage extensions](~~2402409~~)
      *
      * @param request DescribePostgresExtensionsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribePostgresExtensionsResponse
     */
    describePostgresExtensionsWithOptions(request: DescribePostgresExtensionsRequest, runtime: $Util.RuntimeOptions): Promise<DescribePostgresExtensionsResponse>;
    /**
      * ### Supported database engines
      * RDS PostgreSQL
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Manage extensions](~~2402409~~)
      *
      * @param request DescribePostgresExtensionsRequest
      * @return DescribePostgresExtensionsResponse
     */
    describePostgresExtensions(request: DescribePostgresExtensionsRequest): Promise<DescribePostgresExtensionsResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param tmpReq DescribePriceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribePriceResponse
     */
    describePriceWithOptions(tmpReq: DescribePriceRequest, runtime: $Util.RuntimeOptions): Promise<DescribePriceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribePriceRequest
      * @return DescribePriceResponse
     */
    describePrice(request: DescribePriceRequest): Promise<DescribePriceResponse>;
    describeQuickSaleConfigWithOptions(request: DescribeQuickSaleConfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeQuickSaleConfigResponse>;
    describeQuickSaleConfig(request: DescribeQuickSaleConfigRequest): Promise<DescribeQuickSaleConfigResponse>;
    /**
      * @deprecated
      *
      * @param request DescribeRdsResourceSettingsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeRdsResourceSettingsResponse
     */
    describeRdsResourceSettingsWithOptions(request: DescribeRdsResourceSettingsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRdsResourceSettingsResponse>;
    /**
      * @deprecated
      *
      * @param request DescribeRdsResourceSettingsRequest
      * @return DescribeRdsResourceSettingsResponse
     */
    describeRdsResourceSettings(request: DescribeRdsResourceSettingsRequest): Promise<DescribeRdsResourceSettingsResponse>;
    /**
      * Before you call this operation, make sure that the following requirements are met:
      * *   The primary instance must run the MySQL or PostgreSQL database engine.
      * *   The primary instance must be attached with a read-only instance.
      *
      * @param request DescribeReadDBInstanceDelayRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeReadDBInstanceDelayResponse
     */
    describeReadDBInstanceDelayWithOptions(request: DescribeReadDBInstanceDelayRequest, runtime: $Util.RuntimeOptions): Promise<DescribeReadDBInstanceDelayResponse>;
    /**
      * Before you call this operation, make sure that the following requirements are met:
      * *   The primary instance must run the MySQL or PostgreSQL database engine.
      * *   The primary instance must be attached with a read-only instance.
      *
      * @param request DescribeReadDBInstanceDelayRequest
      * @return DescribeReadDBInstanceDelayResponse
     */
    describeReadDBInstanceDelay(request: DescribeReadDBInstanceDelayRequest): Promise<DescribeReadDBInstanceDelayResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeRegionInfosRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeRegionInfosResponse
     */
    describeRegionInfosWithOptions(request: DescribeRegionInfosRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRegionInfosResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeRegionInfosRequest
      * @return DescribeRegionInfosResponse
     */
    describeRegionInfos(request: DescribeRegionInfosRequest): Promise<DescribeRegionInfosResponse>;
    /**
      * Before you call the [CreateDBInstance](~~26228~~) operation to create an RDS instance, you can call the DescribeRegions operation to query the available regions and zones.
      * >  If a zone supports the multi-zone deployment method, the value of the ZoneId parameter for the zone contains an MAZ part. Examples: cn-hangzhou-MAZ6(b,f) and cn-hangzhou-MAZ5(b,e,f).
      *
      * @param request DescribeRegionsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeRegionsResponse
     */
    describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRegionsResponse>;
    /**
      * Before you call the [CreateDBInstance](~~26228~~) operation to create an RDS instance, you can call the DescribeRegions operation to query the available regions and zones.
      * >  If a zone supports the multi-zone deployment method, the value of the ZoneId parameter for the zone contains an MAZ part. Examples: cn-hangzhou-MAZ6(b,f) and cn-hangzhou-MAZ5(b,e,f).
      *
      * @param request DescribeRegionsRequest
      * @return DescribeRegionsResponse
     */
    describeRegions(request: DescribeRegionsRequest): Promise<DescribeRegionsResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeRenewalPriceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeRenewalPriceResponse
     */
    describeRenewalPriceWithOptions(request: DescribeRenewalPriceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRenewalPriceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeRenewalPriceRequest
      * @return DescribeRenewalPriceResponse
     */
    describeRenewalPrice(request: DescribeRenewalPriceRequest): Promise<DescribeRenewalPriceResponse>;
    describeResourceDetailsWithOptions(request: DescribeResourceDetailsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeResourceDetailsResponse>;
    describeResourceDetails(request: DescribeResourceDetailsRequest): Promise<DescribeResourceDetailsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeResourceUsageRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeResourceUsageResponse
     */
    describeResourceUsageWithOptions(request: DescribeResourceUsageRequest, runtime: $Util.RuntimeOptions): Promise<DescribeResourceUsageResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeResourceUsageRequest
      * @return DescribeResourceUsageResponse
     */
    describeResourceUsage(request: DescribeResourceUsageRequest): Promise<DescribeResourceUsageResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      *
      * @param request DescribeSQLCollectorPolicyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSQLCollectorPolicyResponse
     */
    describeSQLCollectorPolicyWithOptions(request: DescribeSQLCollectorPolicyRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSQLCollectorPolicyResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      *
      * @param request DescribeSQLCollectorPolicyRequest
      * @return DescribeSQLCollectorPolicyResponse
     */
    describeSQLCollectorPolicy(request: DescribeSQLCollectorPolicyRequest): Promise<DescribeSQLCollectorPolicyResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      *
      * @param request DescribeSQLCollectorRetentionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSQLCollectorRetentionResponse
     */
    describeSQLCollectorRetentionWithOptions(request: DescribeSQLCollectorRetentionRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSQLCollectorRetentionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      *
      * @param request DescribeSQLCollectorRetentionRequest
      * @return DescribeSQLCollectorRetentionResponse
     */
    describeSQLCollectorRetention(request: DescribeSQLCollectorRetentionRequest): Promise<DescribeSQLCollectorRetentionResponse>;
    /**
      * Before you call this operation, make sure that the instance runs one of the following database engines:
      * *   MySQL
      * *   SQL Server 2008 R2
      * *   PostgreSQL
      * >
      * *   The DescribeSQLLogFiles operation cannot be called to query the log files that are generated by SQL Explorer Trial Edition for an ApsaraDB RDS for MySQL instance.
      * *   The DescribeSQLLogFiles operation cannot be called to query the log files that are generated by the SQL Explorer feature and manually exported from the ApsaraDB RDS console. The DescribeSQLLogFiles operation can be called to query the SQL Explorer log files that are generated by calling the [DescribeSQLLogRecords](~~610533~~) operation with the request parameter **Form** set to **File**.
      *
      * @param request DescribeSQLLogFilesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSQLLogFilesResponse
     */
    describeSQLLogFilesWithOptions(request: DescribeSQLLogFilesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSQLLogFilesResponse>;
    /**
      * Before you call this operation, make sure that the instance runs one of the following database engines:
      * *   MySQL
      * *   SQL Server 2008 R2
      * *   PostgreSQL
      * >
      * *   The DescribeSQLLogFiles operation cannot be called to query the log files that are generated by SQL Explorer Trial Edition for an ApsaraDB RDS for MySQL instance.
      * *   The DescribeSQLLogFiles operation cannot be called to query the log files that are generated by the SQL Explorer feature and manually exported from the ApsaraDB RDS console. The DescribeSQLLogFiles operation can be called to query the SQL Explorer log files that are generated by calling the [DescribeSQLLogRecords](~~610533~~) operation with the request parameter **Form** set to **File**.
      *
      * @param request DescribeSQLLogFilesRequest
      * @return DescribeSQLLogFilesResponse
     */
    describeSQLLogFiles(request: DescribeSQLLogFilesRequest): Promise<DescribeSQLLogFilesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [Usage notes](#)
      * *   You can call this operation up to 1,000 times per minute per account. The calls initiated by using both your Alibaba Cloud account and RAM users within your Alibaba Cloud account are counted.
      * *   This operation cannot be used to query the logs that are generated by SQL Explorer Trial Edition for an ApsaraDB RDS for MySQL instance.
      * *   When you call this operation and set the **Form** parameter to **File** to generate an audit file, a maximum of 1 million log entries can be recorded in the audit file, and you cannot filter log entries by keyword.
      *
      * @param request DescribeSQLLogRecordsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSQLLogRecordsResponse
     */
    describeSQLLogRecordsWithOptions(request: DescribeSQLLogRecordsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSQLLogRecordsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [Usage notes](#)
      * *   You can call this operation up to 1,000 times per minute per account. The calls initiated by using both your Alibaba Cloud account and RAM users within your Alibaba Cloud account are counted.
      * *   This operation cannot be used to query the logs that are generated by SQL Explorer Trial Edition for an ApsaraDB RDS for MySQL instance.
      * *   When you call this operation and set the **Form** parameter to **File** to generate an audit file, a maximum of 1 million log entries can be recorded in the audit file, and you cannot filter log entries by keyword.
      *
      * @param request DescribeSQLLogRecordsRequest
      * @return DescribeSQLLogRecordsResponse
     */
    describeSQLLogRecords(request: DescribeSQLLogRecordsRequest): Promise<DescribeSQLLogRecordsResponse>;
    describeSQLLogReportListWithOptions(request: DescribeSQLLogReportListRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSQLLogReportListResponse>;
    describeSQLLogReportList(request: DescribeSQLLogReportListRequest): Promise<DescribeSQLLogReportListResponse>;
    /**
      * ### [](#)Supported database engine
      * *   MySQL
      *
      * @param request DescribeSecretsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSecretsResponse
     */
    describeSecretsWithOptions(request: DescribeSecretsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSecretsResponse>;
    /**
      * ### [](#)Supported database engine
      * *   MySQL
      *
      * @param request DescribeSecretsRequest
      * @return DescribeSecretsResponse
     */
    describeSecrets(request: DescribeSecretsRequest): Promise<DescribeSecretsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure a security group for an ApsaraDB RDS for MySQL instance](~~201042~~)
      * *   [Configure a security group for an ApsaraDB RDS for PostgreSQL instance](~~206310~~)
      * *   [Configure a security group for an ApsaraDB RDS for SQL Server instance](~~2392322~~)
      *
      * @param request DescribeSecurityGroupConfigurationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSecurityGroupConfigurationResponse
     */
    describeSecurityGroupConfigurationWithOptions(request: DescribeSecurityGroupConfigurationRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSecurityGroupConfigurationResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure a security group for an ApsaraDB RDS for MySQL instance](~~201042~~)
      * *   [Configure a security group for an ApsaraDB RDS for PostgreSQL instance](~~206310~~)
      * *   [Configure a security group for an ApsaraDB RDS for SQL Server instance](~~2392322~~)
      *
      * @param request DescribeSecurityGroupConfigurationRequest
      * @return DescribeSecurityGroupConfigurationResponse
     */
    describeSecurityGroupConfiguration(request: DescribeSecurityGroupConfigurationRequest): Promise<DescribeSecurityGroupConfigurationResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      *
      * @param request DescribeSlotsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSlotsResponse
     */
    describeSlotsWithOptions(request: DescribeSlotsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSlotsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      *
      * @param request DescribeSlotsRequest
      * @return DescribeSlotsResponse
     */
    describeSlots(request: DescribeSlotsRequest): Promise<DescribeSlotsResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### Precautions
      * The response parameters returned by this operation are updated every minute.
      *
      * @param request DescribeSlowLogRecordsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSlowLogRecordsResponse
     */
    describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSlowLogRecordsResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### Precautions
      * The response parameters returned by this operation are updated every minute.
      *
      * @param request DescribeSlowLogRecordsRequest
      * @return DescribeSlowLogRecordsResponse
     */
    describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): Promise<DescribeSlowLogRecordsResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      *     **
      *     **Note**MySQL 5.7 on RDS Basic Edition is not supported.
      * *   SQL Server
      *     **
      *     **Note**Only SQL Server 2008 R2 is supported.
      * *   MariaDB
      * ### Usage notes
      * Slow query logs are not collected in real time and may show a latency of 6 hours to 8 hours.
      *
      * @param request DescribeSlowLogsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSlowLogsResponse
     */
    describeSlowLogsWithOptions(request: DescribeSlowLogsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSlowLogsResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      *     **
      *     **Note**MySQL 5.7 on RDS Basic Edition is not supported.
      * *   SQL Server
      *     **
      *     **Note**Only SQL Server 2008 R2 is supported.
      * *   MariaDB
      * ### Usage notes
      * Slow query logs are not collected in real time and may show a latency of 6 hours to 8 hours.
      *
      * @param request DescribeSlowLogsRequest
      * @return DescribeSlowLogsResponse
     */
    describeSlowLogs(request: DescribeSlowLogsRequest): Promise<DescribeSlowLogsResponse>;
    /**
      * ### Supported database engine
      * SQL Server
      *
      * @param request DescribeSupportOnlineResizeDiskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeSupportOnlineResizeDiskResponse
     */
    describeSupportOnlineResizeDiskWithOptions(request: DescribeSupportOnlineResizeDiskRequest, runtime: $Util.RuntimeOptions): Promise<DescribeSupportOnlineResizeDiskResponse>;
    /**
      * ### Supported database engine
      * SQL Server
      *
      * @param request DescribeSupportOnlineResizeDiskRequest
      * @return DescribeSupportOnlineResizeDiskResponse
     */
    describeSupportOnlineResizeDisk(request: DescribeSupportOnlineResizeDiskRequest): Promise<DescribeSupportOnlineResizeDiskResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [Usage notes](#)
      * *   If an instance ID is specified, all tags that are added to this instance are queried, and other filter conditions are invalid.
      * *   If you specify only TagKey, the results that match the specified TagKey are returned. If you specify both TagKey and TagValue, the results that match both the specified TagKey and TagValue are returned.
      *
      * @param request DescribeTagsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeTagsResponse
     */
    describeTagsWithOptions(request: DescribeTagsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTagsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [Usage notes](#)
      * *   If an instance ID is specified, all tags that are added to this instance are queried, and other filter conditions are invalid.
      * *   If you specify only TagKey, the results that match the specified TagKey are returned. If you specify both TagKey and TagValue, the results that match both the specified TagKey and TagValue are returned.
      *
      * @param request DescribeTagsRequest
      * @return DescribeTagsResponse
     */
    describeTags(request: DescribeTagsRequest): Promise<DescribeTagsResponse>;
    /**
      * This operation is phased out.
      *
      * @param request DescribeTasksRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeTasksResponse
     */
    describeTasksWithOptions(request: DescribeTasksRequest, runtime: $Util.RuntimeOptions): Promise<DescribeTasksResponse>;
    /**
      * This operation is phased out.
      *
      * @param request DescribeTasksRequest
      * @return DescribeTasksResponse
     */
    describeTasks(request: DescribeTasksRequest): Promise<DescribeTasksResponse>;
    /**
      * Before you upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance, you must perform an upgrade check and make sure that the check result is **Success**. You can call this operation to query the upgrade check report.
      * If the check result is **Fail**, you must handle the errors that occurred. For more information about how to handle common errors, see [Introduction to the check report for a major engine version upgrade to an ApsaraDB RDS for PostgreSQL instance](https://www.alibabacloud.com/help/en/apsaradb-for-rds/latest/introduction-to-the-check-report-of-a-major-engine-version-upgrade-for-an-apsaradb-rds-for-postgresql-instance).
      *
      * @param request DescribeUpgradeMajorVersionPrecheckTaskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeUpgradeMajorVersionPrecheckTaskResponse
     */
    describeUpgradeMajorVersionPrecheckTaskWithOptions(request: DescribeUpgradeMajorVersionPrecheckTaskRequest, runtime: $Util.RuntimeOptions): Promise<DescribeUpgradeMajorVersionPrecheckTaskResponse>;
    /**
      * Before you upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance, you must perform an upgrade check and make sure that the check result is **Success**. You can call this operation to query the upgrade check report.
      * If the check result is **Fail**, you must handle the errors that occurred. For more information about how to handle common errors, see [Introduction to the check report for a major engine version upgrade to an ApsaraDB RDS for PostgreSQL instance](https://www.alibabacloud.com/help/en/apsaradb-for-rds/latest/introduction-to-the-check-report-of-a-major-engine-version-upgrade-for-an-apsaradb-rds-for-postgresql-instance).
      *
      * @param request DescribeUpgradeMajorVersionPrecheckTaskRequest
      * @return DescribeUpgradeMajorVersionPrecheckTaskResponse
     */
    describeUpgradeMajorVersionPrecheckTask(request: DescribeUpgradeMajorVersionPrecheckTaskRequest): Promise<DescribeUpgradeMajorVersionPrecheckTaskResponse>;
    /**
      * ### [](#)Supported database engines
      * PostgreSQL
      *
      * @param request DescribeUpgradeMajorVersionTasksRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeUpgradeMajorVersionTasksResponse
     */
    describeUpgradeMajorVersionTasksWithOptions(request: DescribeUpgradeMajorVersionTasksRequest, runtime: $Util.RuntimeOptions): Promise<DescribeUpgradeMajorVersionTasksResponse>;
    /**
      * ### [](#)Supported database engines
      * PostgreSQL
      *
      * @param request DescribeUpgradeMajorVersionTasksRequest
      * @return DescribeUpgradeMajorVersionTasksResponse
     */
    describeUpgradeMajorVersionTasks(request: DescribeUpgradeMajorVersionTasksRequest): Promise<DescribeUpgradeMajorVersionTasksResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeVSwitchesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeVSwitchesResponse
     */
    describeVSwitchesWithOptions(request: DescribeVSwitchesRequest, runtime: $Util.RuntimeOptions): Promise<DescribeVSwitchesResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request DescribeVSwitchesRequest
      * @return DescribeVSwitchesResponse
     */
    describeVSwitches(request: DescribeVSwitchesRequest): Promise<DescribeVSwitchesResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DescribeWhitelistTemplateRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeWhitelistTemplateResponse
     */
    describeWhitelistTemplateWithOptions(request: DescribeWhitelistTemplateRequest, runtime: $Util.RuntimeOptions): Promise<DescribeWhitelistTemplateResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DescribeWhitelistTemplateRequest
      * @return DescribeWhitelistTemplateResponse
     */
    describeWhitelistTemplate(request: DescribeWhitelistTemplateRequest): Promise<DescribeWhitelistTemplateResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DescribeWhitelistTemplateLinkedInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DescribeWhitelistTemplateLinkedInstanceResponse
     */
    describeWhitelistTemplateLinkedInstanceWithOptions(request: DescribeWhitelistTemplateLinkedInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DescribeWhitelistTemplateLinkedInstanceResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DescribeWhitelistTemplateLinkedInstanceRequest
      * @return DescribeWhitelistTemplateLinkedInstanceResponse
     */
    describeWhitelistTemplateLinkedInstance(request: DescribeWhitelistTemplateLinkedInstanceRequest): Promise<DescribeWhitelistTemplateLinkedInstanceResponse>;
    /**
      * The DestroyDBInstance operation is phased out.
      *
      * @param request DestroyDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DestroyDBInstanceResponse
     */
    destroyDBInstanceWithOptions(request: DestroyDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DestroyDBInstanceResponse>;
    /**
      * The DestroyDBInstance operation is phased out.
      *
      * @param request DestroyDBInstanceRequest
      * @return DestroyDBInstanceResponse
     */
    destroyDBInstance(request: DestroyDBInstanceRequest): Promise<DestroyDBInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [Usage notes](#)
      * This operation can be used to remove only unit nodes.
      *
      * @param request DetachGadInstanceMemberRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DetachGadInstanceMemberResponse
     */
    detachGadInstanceMemberWithOptions(request: DetachGadInstanceMemberRequest, runtime: $Util.RuntimeOptions): Promise<DetachGadInstanceMemberResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [Usage notes](#)
      * This operation can be used to remove only unit nodes.
      *
      * @param request DetachGadInstanceMemberRequest
      * @return DetachGadInstanceMemberResponse
     */
    detachGadInstanceMember(request: DetachGadInstanceMemberRequest): Promise<DetachGadInstanceMemberResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DetachWhitelistTemplateToInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DetachWhitelistTemplateToInstanceResponse
     */
    detachWhitelistTemplateToInstanceWithOptions(request: DetachWhitelistTemplateToInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DetachWhitelistTemplateToInstanceResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request DetachWhitelistTemplateToInstanceRequest
      * @return DetachWhitelistTemplateToInstanceResponse
     */
    detachWhitelistTemplateToInstance(request: DetachWhitelistTemplateToInstanceRequest): Promise<DetachWhitelistTemplateToInstanceResponse>;
    evaluateLocalExtendDiskWithOptions(request: EvaluateLocalExtendDiskRequest, runtime: $Util.RuntimeOptions): Promise<EvaluateLocalExtendDiskResponse>;
    evaluateLocalExtendDisk(request: EvaluateLocalExtendDiskRequest): Promise<EvaluateLocalExtendDiskResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request GetDBInstanceTopologyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetDBInstanceTopologyResponse
     */
    getDBInstanceTopologyWithOptions(request: GetDBInstanceTopologyRequest, runtime: $Util.RuntimeOptions): Promise<GetDBInstanceTopologyResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request GetDBInstanceTopologyRequest
      * @return GetDBInstanceTopologyResponse
     */
    getDBInstanceTopology(request: GetDBInstanceTopologyRequest): Promise<GetDBInstanceTopologyResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS MySQL
      *
      * @param request GetDbProxyInstanceSslRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetDbProxyInstanceSslResponse
     */
    getDbProxyInstanceSslWithOptions(request: GetDbProxyInstanceSslRequest, runtime: $Util.RuntimeOptions): Promise<GetDbProxyInstanceSslResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS MySQL
      *
      * @param request GetDbProxyInstanceSslRequest
      * @return GetDbProxyInstanceSslResponse
     */
    getDbProxyInstanceSsl(request: GetDbProxyInstanceSslRequest): Promise<GetDbProxyInstanceSslResponse>;
    /**
      * Each account can be granted permissions on one or more databases. Before you call this operation, make sure that the instance is in the Running state.
      * > This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition or run PostgreSQL with local disks.
      *
      * @param request GrantAccountPrivilegeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GrantAccountPrivilegeResponse
     */
    grantAccountPrivilegeWithOptions(request: GrantAccountPrivilegeRequest, runtime: $Util.RuntimeOptions): Promise<GrantAccountPrivilegeResponse>;
    /**
      * Each account can be granted permissions on one or more databases. Before you call this operation, make sure that the instance is in the Running state.
      * > This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition or run PostgreSQL with local disks.
      *
      * @param request GrantAccountPrivilegeRequest
      * @return GrantAccountPrivilegeResponse
     */
    grantAccountPrivilege(request: GrantAccountPrivilegeRequest): Promise<GrantAccountPrivilegeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Grant permissions to the service account of an ApsaraDB RDS for MySQL instance](~~96102~~)
      * *   [Grant permissions to the service account of an ApsaraDB RDS for SQL Server instance](~~95693~~)
      *
      * @param request GrantOperatorPermissionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GrantOperatorPermissionResponse
     */
    grantOperatorPermissionWithOptions(request: GrantOperatorPermissionRequest, runtime: $Util.RuntimeOptions): Promise<GrantOperatorPermissionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Grant permissions to the service account of an ApsaraDB RDS for MySQL instance](~~96102~~)
      * *   [Grant permissions to the service account of an ApsaraDB RDS for SQL Server instance](~~95693~~)
      *
      * @param request GrantOperatorPermissionRequest
      * @return GrantOperatorPermissionResponse
     */
    grantOperatorPermission(request: GrantOperatorPermissionRequest): Promise<GrantOperatorPermissionResponse>;
    /**
      * ### [](#)Supported database engine
      * *   SQL Server
      * ### [](#)Description
      * We recommend that you use Data Transmission Service (DTS). DTS provides data migration, subscription, and synchronization features that allow you to establish stable, secure transmission links. For more information, see [DTS API overview](~~49456~~).
      * ### [](#)Precautions
      * *   During the migration, the source instance is in the **Migrating** state, and the destination instance is in the **Importing** state.
      * *   Before you call this operation, make sure that the following requirements are met:
      *     *   The source and destination instances must run SQL Server and belong to the dedicated or dedicated host instance family. For more information about the supported instance types, see [Primary instance types](~~26312~~).
      *     *   The source and destination instances must be created by using the same user credentials.
      *     *   The instance is in the Running state.
      *     *   The source and destination databases must be in the Running state.
      *     *   The remaining storage of the destination instance must be greater than the storage capacity of the source instance.
      * >
      * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
      * *   You can migrate the data of multiple databases at a time.
      *
      * @param request ImportDatabaseBetweenInstancesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ImportDatabaseBetweenInstancesResponse
     */
    importDatabaseBetweenInstancesWithOptions(request: ImportDatabaseBetweenInstancesRequest, runtime: $Util.RuntimeOptions): Promise<ImportDatabaseBetweenInstancesResponse>;
    /**
      * ### [](#)Supported database engine
      * *   SQL Server
      * ### [](#)Description
      * We recommend that you use Data Transmission Service (DTS). DTS provides data migration, subscription, and synchronization features that allow you to establish stable, secure transmission links. For more information, see [DTS API overview](~~49456~~).
      * ### [](#)Precautions
      * *   During the migration, the source instance is in the **Migrating** state, and the destination instance is in the **Importing** state.
      * *   Before you call this operation, make sure that the following requirements are met:
      *     *   The source and destination instances must run SQL Server and belong to the dedicated or dedicated host instance family. For more information about the supported instance types, see [Primary instance types](~~26312~~).
      *     *   The source and destination instances must be created by using the same user credentials.
      *     *   The instance is in the Running state.
      *     *   The source and destination databases must be in the Running state.
      *     *   The remaining storage of the destination instance must be greater than the storage capacity of the source instance.
      * >
      * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition.
      * *   You can migrate the data of multiple databases at a time.
      *
      * @param request ImportDatabaseBetweenInstancesRequest
      * @return ImportDatabaseBetweenInstancesResponse
     */
    importDatabaseBetweenInstances(request: ImportDatabaseBetweenInstancesRequest): Promise<ImportDatabaseBetweenInstancesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [](#)Description
      * A full backup file contains the data of a self-managed MySQL instance. You can restore the data of a self-managed MySQL instance from a full backup file to an ApsaraDB RDS for MySQL instance.
      * ### [](#)Usage notes
      * Before you call this operation, make sure that the following requirements are met:
      * *   The self-managed MySQL instance runs MySQL 5.7 and is backed up by using XtraBackup. The name of the backup file ends with `_qp.xb`. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
      * *   The full backup file of the self-managed MySQL instance is uploaded to an Object Storage Service (OSS) bucket in the region of the ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
      * >  This operation is supported only for MySQL 5.7.
      *
      * @param request ImportUserBackupFileRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ImportUserBackupFileResponse
     */
    importUserBackupFileWithOptions(request: ImportUserBackupFileRequest, runtime: $Util.RuntimeOptions): Promise<ImportUserBackupFileResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [](#)Description
      * A full backup file contains the data of a self-managed MySQL instance. You can restore the data of a self-managed MySQL instance from a full backup file to an ApsaraDB RDS for MySQL instance.
      * ### [](#)Usage notes
      * Before you call this operation, make sure that the following requirements are met:
      * *   The self-managed MySQL instance runs MySQL 5.7 and is backed up by using XtraBackup. The name of the backup file ends with `_qp.xb`. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
      * *   The full backup file of the self-managed MySQL instance is uploaded to an Object Storage Service (OSS) bucket in the region of the ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
      * >  This operation is supported only for MySQL 5.7.
      *
      * @param request ImportUserBackupFileRequest
      * @return ImportUserBackupFileResponse
     */
    importUserBackupFile(request: ImportUserBackupFileRequest): Promise<ImportUserBackupFileResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request ListClassesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListClassesResponse
     */
    listClassesWithOptions(request: ListClassesRequest, runtime: $Util.RuntimeOptions): Promise<ListClassesResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request ListClassesRequest
      * @return ListClassesResponse
     */
    listClasses(request: ListClassesRequest): Promise<ListClassesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request ListTagResourcesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListTagResourcesResponse
     */
    listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<ListTagResourcesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      *
      * @param request ListTagResourcesRequest
      * @return ListTagResourcesResponse
     */
    listTagResources(request: ListTagResourcesRequest): Promise<ListTagResourcesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [](#)Feature description
      * *   A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
      * *   Before you call the [CreateDBInstance](~~26228~~) operation to create an ApsaraDB RDS for MySQL instance into which you want to import full backup files, you can call this operation to query the IDs of full backup files.
      * *   You can call the [ImportUserBackupFile](~~260266~~) operation to import a full backup file into an ApsaraDB RDS for MySQL instance.
      *
      * @param request ListUserBackupFilesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListUserBackupFilesResponse
     */
    listUserBackupFilesWithOptions(request: ListUserBackupFilesRequest, runtime: $Util.RuntimeOptions): Promise<ListUserBackupFilesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [](#)Feature description
      * *   A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 instance to the cloud](~~251779~~).
      * *   Before you call the [CreateDBInstance](~~26228~~) operation to create an ApsaraDB RDS for MySQL instance into which you want to import full backup files, you can call this operation to query the IDs of full backup files.
      * *   You can call the [ImportUserBackupFile](~~260266~~) operation to import a full backup file into an ApsaraDB RDS for MySQL instance.
      *
      * @param request ListUserBackupFilesRequest
      * @return ListUserBackupFilesResponse
     */
    listUserBackupFiles(request: ListUserBackupFilesRequest): Promise<ListUserBackupFilesResponse>;
    /**
      * ### [](#)Supported database engines
      * PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Lock an account of an ApsaraDB RDS for PostgreSQL instance](~~147649~~)
      *
      * @param request LockAccountRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return LockAccountResponse
     */
    lockAccountWithOptions(request: LockAccountRequest, runtime: $Util.RuntimeOptions): Promise<LockAccountResponse>;
    /**
      * ### [](#)Supported database engines
      * PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Lock an account of an ApsaraDB RDS for PostgreSQL instance](~~147649~~)
      *
      * @param request LockAccountRequest
      * @return LockAccountResponse
     */
    lockAccount(request: LockAccountRequest): Promise<LockAccountResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Migrate an ApsaraDB RDS for MySQL instance across zones in the same region](~~96746~~)
      * *   [Migrate an ApsaraDB RDS for PostgreSQL instance across zones in the same region](~~96746~~)
      * *   [Migrate an ApsaraDB RDS for SQL Server instance across zones in the same region](~~95658~~)
      *
      * @param request MigrateConnectionToOtherZoneRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return MigrateConnectionToOtherZoneResponse
     */
    migrateConnectionToOtherZoneWithOptions(request: MigrateConnectionToOtherZoneRequest, runtime: $Util.RuntimeOptions): Promise<MigrateConnectionToOtherZoneResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Migrate an ApsaraDB RDS for MySQL instance across zones in the same region](~~96746~~)
      * *   [Migrate an ApsaraDB RDS for PostgreSQL instance across zones in the same region](~~96746~~)
      * *   [Migrate an ApsaraDB RDS for SQL Server instance across zones in the same region](~~95658~~)
      *
      * @param request MigrateConnectionToOtherZoneRequest
      * @return MigrateConnectionToOtherZoneResponse
     */
    migrateConnectionToOtherZone(request: MigrateConnectionToOtherZoneRequest): Promise<MigrateConnectionToOtherZoneResponse>;
    /**
      * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
      *
      * @param request MigrateDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return MigrateDBInstanceResponse
     */
    migrateDBInstanceWithOptions(request: MigrateDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<MigrateDBInstanceResponse>;
    /**
      * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
      *
      * @param request MigrateDBInstanceRequest
      * @return MigrateDBInstanceResponse
     */
    migrateDBInstance(request: MigrateDBInstanceRequest): Promise<MigrateDBInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Change the whitelist mode of an ApsaraDB RDS for MySQL instance to the enhanced whitelist mode](~~96117~~)
      * *   [Change the whitelist mode of an ApsaraDB RDS for PostgreSQL instance to the enhanced whitelist mode](~~96767~~)
      *
      * @param request MigrateSecurityIPModeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return MigrateSecurityIPModeResponse
     */
    migrateSecurityIPModeWithOptions(request: MigrateSecurityIPModeRequest, runtime: $Util.RuntimeOptions): Promise<MigrateSecurityIPModeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Change the whitelist mode of an ApsaraDB RDS for MySQL instance to the enhanced whitelist mode](~~96117~~)
      * *   [Change the whitelist mode of an ApsaraDB RDS for PostgreSQL instance to the enhanced whitelist mode](~~96767~~)
      *
      * @param request MigrateSecurityIPModeRequest
      * @return MigrateSecurityIPModeResponse
     */
    migrateSecurityIPMode(request: MigrateSecurityIPModeRequest): Promise<MigrateSecurityIPModeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Migrate an ApsaraDB RDS for MySQL instance across zones in the same region](~~96053~~)
      * *   [Migrate an ApsaraDB RDS for PostgreSQL instance across zones in the same region](~~96746~~)
      * *   [Migrate an ApsaraDB RDS for SQL Server instance across zones in the same region](~~95658~~)
      *
      * @param request MigrateToOtherZoneRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return MigrateToOtherZoneResponse
     */
    migrateToOtherZoneWithOptions(request: MigrateToOtherZoneRequest, runtime: $Util.RuntimeOptions): Promise<MigrateToOtherZoneResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Migrate an ApsaraDB RDS for MySQL instance across zones in the same region](~~96053~~)
      * *   [Migrate an ApsaraDB RDS for PostgreSQL instance across zones in the same region](~~96746~~)
      * *   [Migrate an ApsaraDB RDS for SQL Server instance across zones in the same region](~~95658~~)
      *
      * @param request MigrateToOtherZoneRequest
      * @return MigrateToOtherZoneResponse
     */
    migrateToOtherZone(request: MigrateToOtherZoneRequest): Promise<MigrateToOtherZoneResponse>;
    /**
      * ### [](#)Supported database engine
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Connect an RDS instance to a self-managed domain](~~170734~~)
      *
      * @param request ModifyADInfoRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyADInfoResponse
     */
    modifyADInfoWithOptions(request: ModifyADInfoRequest, runtime: $Util.RuntimeOptions): Promise<ModifyADInfoResponse>;
    /**
      * ### [](#)Supported database engine
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Connect an RDS instance to a self-managed domain](~~170734~~)
      *
      * @param request ModifyADInfoRequest
      * @return ModifyADInfoResponse
     */
    modifyADInfo(request: ModifyADInfoRequest): Promise<ModifyADInfoResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request ModifyAccountDescriptionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyAccountDescriptionResponse
     */
    modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: $Util.RuntimeOptions): Promise<ModifyAccountDescriptionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request ModifyAccountDescriptionRequest
      * @return ModifyAccountDescriptionResponse
     */
    modifyAccountDescription(request: ModifyAccountDescriptionRequest): Promise<ModifyAccountDescriptionResponse>;
    /**
      * The event history feature enables you to view historical events that occurred in a region over a specific time range. These events include instance creation and parameter reconfiguration. For more information, see [Event history](~~129759~~).
      *
      * @param request ModifyActionEventPolicyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyActionEventPolicyResponse
     */
    modifyActionEventPolicyWithOptions(request: ModifyActionEventPolicyRequest, runtime: $Util.RuntimeOptions): Promise<ModifyActionEventPolicyResponse>;
    /**
      * The event history feature enables you to view historical events that occurred in a region over a specific time range. These events include instance creation and parameter reconfiguration. For more information, see [Event history](~~129759~~).
      *
      * @param request ModifyActionEventPolicyRequest
      * @return ModifyActionEventPolicyResponse
     */
    modifyActionEventPolicy(request: ModifyActionEventPolicyRequest): Promise<ModifyActionEventPolicyResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Scheduled events for ApsaraDB RDS for MySQL instances](~~104183~~)
      * *   [Scheduled events for ApsaraDB RDS for PostgreSQL instances](~~104452~~)
      * *   [Scheduled events for ApsaraDB RDS for SQL Server instances](~~104451~~)
      * *   [Scheduled events for ApsaraDB RDS for MariaDB instances](~~104454~~)
      *
      * @param request ModifyActiveOperationTasksRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyActiveOperationTasksResponse
     */
    modifyActiveOperationTasksWithOptions(request: ModifyActiveOperationTasksRequest, runtime: $Util.RuntimeOptions): Promise<ModifyActiveOperationTasksResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Scheduled events for ApsaraDB RDS for MySQL instances](~~104183~~)
      * *   [Scheduled events for ApsaraDB RDS for PostgreSQL instances](~~104452~~)
      * *   [Scheduled events for ApsaraDB RDS for SQL Server instances](~~104451~~)
      * *   [Scheduled events for ApsaraDB RDS for MariaDB instances](~~104454~~)
      *
      * @param request ModifyActiveOperationTasksRequest
      * @return ModifyActiveOperationTasksResponse
     */
    modifyActiveOperationTasks(request: ModifyActiveOperationTasksRequest): Promise<ModifyActiveOperationTasksResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Configure an automatic backup policy for an ApsaraDB RDS for MySQL instance](~~98818~~)
      * *   [Configure an automatic backup policy for an ApsaraDB RDS for PostgreSQL instance](~~96772~~)
      * *   [Configure an automatic backup policy for an ApsaraDB RDS for SQL Server instance](~~95717~~)
      * *   [Configure an automatic backup policy for an ApsaraDB RDS for MariaDB instance](~~97147~~)
      *
      * @param request ModifyBackupPolicyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyBackupPolicyResponse
     */
    modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: $Util.RuntimeOptions): Promise<ModifyBackupPolicyResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Configure an automatic backup policy for an ApsaraDB RDS for MySQL instance](~~98818~~)
      * *   [Configure an automatic backup policy for an ApsaraDB RDS for PostgreSQL instance](~~96772~~)
      * *   [Configure an automatic backup policy for an ApsaraDB RDS for SQL Server instance](~~95717~~)
      * *   [Configure an automatic backup policy for an ApsaraDB RDS for MariaDB instance](~~97147~~)
      *
      * @param request ModifyBackupPolicyRequest
      * @return ModifyBackupPolicyResponse
     */
    modifyBackupPolicy(request: ModifyBackupPolicyRequest): Promise<ModifyBackupPolicyResponse>;
    /**
      * > This operation is phased out.
      *
      * @param request ModifyCollationTimeZoneRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyCollationTimeZoneResponse
     */
    modifyCollationTimeZoneWithOptions(request: ModifyCollationTimeZoneRequest, runtime: $Util.RuntimeOptions): Promise<ModifyCollationTimeZoneResponse>;
    /**
      * > This operation is phased out.
      *
      * @param request ModifyCollationTimeZoneRequest
      * @return ModifyCollationTimeZoneResponse
     */
    modifyCollationTimeZone(request: ModifyCollationTimeZoneRequest): Promise<ModifyCollationTimeZoneResponse>;
    modifyCustinsResourceWithOptions(request: ModifyCustinsResourceRequest, runtime: $Util.RuntimeOptions): Promise<ModifyCustinsResourceResponse>;
    modifyCustinsResource(request: ModifyCustinsResourceRequest): Promise<ModifyCustinsResourceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request ModifyDBDescriptionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBDescriptionResponse
     */
    modifyDBDescriptionWithOptions(request: ModifyDBDescriptionRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBDescriptionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      *
      * @param request ModifyDBDescriptionRequest
      * @return ModifyDBDescriptionResponse
     */
    modifyDBDescription(request: ModifyDBDescriptionRequest): Promise<ModifyDBDescriptionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Modify automatic update settings for an ApsaraDB RDS for MySQL instance](~~96059~~)
      * *   [Modify automatic update settings for an ApsaraDB RDS for PostgreSQL instance](~~146895~~)
      *
      * @param request ModifyDBInstanceAutoUpgradeMinorVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceAutoUpgradeMinorVersionResponse
     */
    modifyDBInstanceAutoUpgradeMinorVersionWithOptions(request: ModifyDBInstanceAutoUpgradeMinorVersionRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceAutoUpgradeMinorVersionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Modify automatic update settings for an ApsaraDB RDS for MySQL instance](~~96059~~)
      * *   [Modify automatic update settings for an ApsaraDB RDS for PostgreSQL instance](~~146895~~)
      *
      * @param request ModifyDBInstanceAutoUpgradeMinorVersionRequest
      * @return ModifyDBInstanceAutoUpgradeMinorVersionResponse
     */
    modifyDBInstanceAutoUpgradeMinorVersion(request: ModifyDBInstanceAutoUpgradeMinorVersionRequest): Promise<ModifyDBInstanceAutoUpgradeMinorVersionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * >  The configuration item that is supported is [PgBouncer](~~2398301~~) of ApsaraDB RDS for PostgreSQL instances.
      *
      * @param request ModifyDBInstanceConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceConfigResponse
     */
    modifyDBInstanceConfigWithOptions(request: ModifyDBInstanceConfigRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * >  The configuration item that is supported is [PgBouncer](~~2398301~~) of ApsaraDB RDS for PostgreSQL instances.
      *
      * @param request ModifyDBInstanceConfigRequest
      * @return ModifyDBInstanceConfigResponse
     */
    modifyDBInstanceConfig(request: ModifyDBInstanceConfigRequest): Promise<ModifyDBInstanceConfigResponse>;
    /**
      * > The API has been taken offline
      *
      * @param request ModifyDBInstanceConnectionModeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceConnectionModeResponse
     */
    modifyDBInstanceConnectionModeWithOptions(request: ModifyDBInstanceConnectionModeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceConnectionModeResponse>;
    /**
      * > The API has been taken offline
      *
      * @param request ModifyDBInstanceConnectionModeRequest
      * @return ModifyDBInstanceConnectionModeResponse
     */
    modifyDBInstanceConnectionMode(request: ModifyDBInstanceConnectionModeRequest): Promise<ModifyDBInstanceConnectionModeResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
      * *   [Change the endpoint and port number of an ApsaraDB RDS for MySQL instance](~~96163~~)
      * *   [Change the endpoint and port number of an ApsaraDB RDS for PostgreSQL instance](~~96788~~)
      * *   [Change the endpoint and port number of an ApsaraDB RDS for SQL Server instance](~~95740~~)
      * *   [Change the endpoint and port number of an ApsaraDB RDS for MariaDB instance](~~97157~~)
      *
      * @param request ModifyDBInstanceConnectionStringRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceConnectionStringResponse
     */
    modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceConnectionStringResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
      * *   [Change the endpoint and port number of an ApsaraDB RDS for MySQL instance](~~96163~~)
      * *   [Change the endpoint and port number of an ApsaraDB RDS for PostgreSQL instance](~~96788~~)
      * *   [Change the endpoint and port number of an ApsaraDB RDS for SQL Server instance](~~95740~~)
      * *   [Change the endpoint and port number of an ApsaraDB RDS for MariaDB instance](~~97157~~)
      *
      * @param request ModifyDBInstanceConnectionStringRequest
      * @return ModifyDBInstanceConnectionStringResponse
     */
    modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): Promise<ModifyDBInstanceConnectionStringResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure a data replication latency for a read-only ApsaraDB RDS for MySQL instance](~~96056~~)
      *
      * @param request ModifyDBInstanceDelayedReplicationTimeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceDelayedReplicationTimeResponse
     */
    modifyDBInstanceDelayedReplicationTimeWithOptions(request: ModifyDBInstanceDelayedReplicationTimeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceDelayedReplicationTimeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure a data replication latency for a read-only ApsaraDB RDS for MySQL instance](~~96056~~)
      *
      * @param request ModifyDBInstanceDelayedReplicationTimeRequest
      * @return ModifyDBInstanceDelayedReplicationTimeResponse
     */
    modifyDBInstanceDelayedReplicationTime(request: ModifyDBInstanceDelayedReplicationTimeRequest): Promise<ModifyDBInstanceDelayedReplicationTimeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Enable and disable instance release protection for an ApsaraDB RDS for MySQL instance](~~414512~~)
      * *   [Enable and disable instance release protection for an ApsaraDB RDS for PostgreSQL instance](~~471512~~)
      * *   [Enable and disable instance release protection for an ApsaraDB RDS for SQL Server instance](~~416209~~)
      * *   [Enable and disable release protection for an ApsaraDB RDS for MariaDB instance](~~414512~~)
      *
      * @param request ModifyDBInstanceDeletionProtectionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceDeletionProtectionResponse
     */
    modifyDBInstanceDeletionProtectionWithOptions(request: ModifyDBInstanceDeletionProtectionRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceDeletionProtectionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Enable and disable instance release protection for an ApsaraDB RDS for MySQL instance](~~414512~~)
      * *   [Enable and disable instance release protection for an ApsaraDB RDS for PostgreSQL instance](~~471512~~)
      * *   [Enable and disable instance release protection for an ApsaraDB RDS for SQL Server instance](~~416209~~)
      * *   [Enable and disable release protection for an ApsaraDB RDS for MariaDB instance](~~414512~~)
      *
      * @param request ModifyDBInstanceDeletionProtectionRequest
      * @return ModifyDBInstanceDeletionProtectionResponse
     */
    modifyDBInstanceDeletionProtection(request: ModifyDBInstanceDeletionProtectionRequest): Promise<ModifyDBInstanceDeletionProtectionResponse>;
    modifyDBInstanceDescriptionWithOptions(request: ModifyDBInstanceDescriptionRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceDescriptionResponse>;
    modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): Promise<ModifyDBInstanceDescriptionResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS MySQL
      *
      * @param tmpReq ModifyDBInstanceEndpointRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceEndpointResponse
     */
    modifyDBInstanceEndpointWithOptions(tmpReq: ModifyDBInstanceEndpointRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceEndpointResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS MySQL
      *
      * @param request ModifyDBInstanceEndpointRequest
      * @return ModifyDBInstanceEndpointResponse
     */
    modifyDBInstanceEndpoint(request: ModifyDBInstanceEndpointRequest): Promise<ModifyDBInstanceEndpointResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS MySQL
      * ### [](#)Precautions
      * *   You can modify the following information about the endpoint of an instance: the public and internal endpoints, the public and internal ports, and the virtual private cloud (VPC), vSwitch, and IP address of the internal endpoint.
      * *   The VPC and vSwitch must be modified at the same time. If you specify the VPC, vSwitch, and IP address of the internal endpoint, you do not need to specify the endpoint and port. If you specify the endpoint and port, you do not need to specify the VPC, vSwitch, and IP address of the internal endpoint.
      *
      * @param request ModifyDBInstanceEndpointAddressRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceEndpointAddressResponse
     */
    modifyDBInstanceEndpointAddressWithOptions(request: ModifyDBInstanceEndpointAddressRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceEndpointAddressResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS MySQL
      * ### [](#)Precautions
      * *   You can modify the following information about the endpoint of an instance: the public and internal endpoints, the public and internal ports, and the virtual private cloud (VPC), vSwitch, and IP address of the internal endpoint.
      * *   The VPC and vSwitch must be modified at the same time. If you specify the VPC, vSwitch, and IP address of the internal endpoint, you do not need to specify the endpoint and port. If you specify the endpoint and port, you do not need to specify the VPC, vSwitch, and IP address of the internal endpoint.
      *
      * @param request ModifyDBInstanceEndpointAddressRequest
      * @return ModifyDBInstanceEndpointAddressResponse
     */
    modifyDBInstanceEndpointAddress(request: ModifyDBInstanceEndpointAddressRequest): Promise<ModifyDBInstanceEndpointAddressResponse>;
    modifyDBInstanceHAConfigWithOptions(request: ModifyDBInstanceHAConfigRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceHAConfigResponse>;
    modifyDBInstanceHAConfig(request: ModifyDBInstanceHAConfigRequest): Promise<ModifyDBInstanceHAConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Set a maintenance window for an ApsaraDB RDS for MySQL instance](~~96052~~)
      * *   [Set a maintenance window for an ApsaraDB RDS for PostgreSQL instance](~~96799~~)
      * *   [Set a maintenance window for an ApsaraDB RDS for SQL Sever instance](~~95657~~)
      * *   [Set a maintenance window for an ApsaraDB RDS for MariaDB instance](~~97473~~)
      *
      * @param request ModifyDBInstanceMaintainTimeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceMaintainTimeResponse
     */
    modifyDBInstanceMaintainTimeWithOptions(request: ModifyDBInstanceMaintainTimeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceMaintainTimeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Set a maintenance window for an ApsaraDB RDS for MySQL instance](~~96052~~)
      * *   [Set a maintenance window for an ApsaraDB RDS for PostgreSQL instance](~~96799~~)
      * *   [Set a maintenance window for an ApsaraDB RDS for SQL Sever instance](~~95657~~)
      * *   [Set a maintenance window for an ApsaraDB RDS for MariaDB instance](~~97473~~)
      *
      * @param request ModifyDBInstanceMaintainTimeRequest
      * @return ModifyDBInstanceMaintainTimeResponse
     */
    modifyDBInstanceMaintainTime(request: ModifyDBInstanceMaintainTimeRequest): Promise<ModifyDBInstanceMaintainTimeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [View the Enhanced Monitoring metrics](~~299200~~)
      *
      * @param request ModifyDBInstanceMetricsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceMetricsResponse
     */
    modifyDBInstanceMetricsWithOptions(request: ModifyDBInstanceMetricsRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceMetricsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [View the Enhanced Monitoring metrics](~~299200~~)
      *
      * @param request ModifyDBInstanceMetricsRequest
      * @return ModifyDBInstanceMetricsResponse
     */
    modifyDBInstanceMetrics(request: ModifyDBInstanceMetricsRequest): Promise<ModifyDBInstanceMetricsResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### [](#)Usage notes
      * If you use the Every 5 Seconds monitoring frequency, you are charged additional fees. Before you call this operation, make sure that you understand the [billing methods and pricing](~~45020~~) of ApsaraDB RDS.
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure the monitoring frequency for an ApsaraDB RDS for MySQL instance](~~96112~~)
      * *   [Configure the monitoring frequency for an ApsaraDB RDS for SQL Server instance](~~95710~~)
      *
      * @param request ModifyDBInstanceMonitorRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceMonitorResponse
     */
    modifyDBInstanceMonitorWithOptions(request: ModifyDBInstanceMonitorRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceMonitorResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### [](#)Usage notes
      * If you use the Every 5 Seconds monitoring frequency, you are charged additional fees. Before you call this operation, make sure that you understand the [billing methods and pricing](~~45020~~) of ApsaraDB RDS.
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure the monitoring frequency for an ApsaraDB RDS for MySQL instance](~~96112~~)
      * *   [Configure the monitoring frequency for an ApsaraDB RDS for SQL Server instance](~~95710~~)
      *
      * @param request ModifyDBInstanceMonitorRequest
      * @return ModifyDBInstanceMonitorResponse
     */
    modifyDBInstanceMonitor(request: ModifyDBInstanceMonitorRequest): Promise<ModifyDBInstanceMonitorResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### [](#)References
      * *   [Configure the hybrid access solution for an ApsaraDB RDS for MySQL instance](~~96110~~)
      * *   [Configure the hybrid access solution for an ApsaraDB RDS for SQL Server instance](~~95708~~)
      *
      * @param request ModifyDBInstanceNetworkExpireTimeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceNetworkExpireTimeResponse
     */
    modifyDBInstanceNetworkExpireTimeWithOptions(request: ModifyDBInstanceNetworkExpireTimeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceNetworkExpireTimeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### [](#)References
      * *   [Configure the hybrid access solution for an ApsaraDB RDS for MySQL instance](~~96110~~)
      * *   [Configure the hybrid access solution for an ApsaraDB RDS for SQL Server instance](~~95708~~)
      *
      * @param request ModifyDBInstanceNetworkExpireTimeRequest
      * @return ModifyDBInstanceNetworkExpireTimeResponse
     */
    modifyDBInstanceNetworkExpireTime(request: ModifyDBInstanceNetworkExpireTimeRequest): Promise<ModifyDBInstanceNetworkExpireTimeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Change the network type of an ApsaraDB RDS for MySQL instance](~~96109~~)
      * *   [Change the network type of an ApsaraDB RDS for PostgreSQL instance](~~96761~~)
      * *   [Change the network type of an ApsaraDB RDS for SQL Server instance](~~95707~~)
      *
      * @param request ModifyDBInstanceNetworkTypeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceNetworkTypeResponse
     */
    modifyDBInstanceNetworkTypeWithOptions(request: ModifyDBInstanceNetworkTypeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceNetworkTypeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Change the network type of an ApsaraDB RDS for MySQL instance](~~96109~~)
      * *   [Change the network type of an ApsaraDB RDS for PostgreSQL instance](~~96761~~)
      * *   [Change the network type of an ApsaraDB RDS for SQL Server instance](~~95707~~)
      *
      * @param request ModifyDBInstanceNetworkTypeRequest
      * @return ModifyDBInstanceNetworkTypeResponse
     */
    modifyDBInstanceNetworkType(request: ModifyDBInstanceNetworkTypeRequest): Promise<ModifyDBInstanceNetworkTypeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the following topics:
      * *   [Change the billing method of an ApsaraDB RDS for MySQL instance from pay-as-you-go to subscription](~~96048~~)
      * *   [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from pay-as-you-go to subscription](~~96743~~)
      * *   [Change the billing method of an ApsaraDB RDS for SQL Server instance from pay-as-you-go to subscription](~~95631~~)
      * *   [Change the billing method of an ApsaraDB RDS for MariaDB instance from pay-as-you-go to subscription](~~97120~~)
      *
      * @param request ModifyDBInstancePayTypeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstancePayTypeResponse
     */
    modifyDBInstancePayTypeWithOptions(request: ModifyDBInstancePayTypeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstancePayTypeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the following topics:
      * *   [Change the billing method of an ApsaraDB RDS for MySQL instance from pay-as-you-go to subscription](~~96048~~)
      * *   [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from pay-as-you-go to subscription](~~96743~~)
      * *   [Change the billing method of an ApsaraDB RDS for SQL Server instance from pay-as-you-go to subscription](~~95631~~)
      * *   [Change the billing method of an ApsaraDB RDS for MariaDB instance from pay-as-you-go to subscription](~~97120~~)
      *
      * @param request ModifyDBInstancePayTypeRequest
      * @return ModifyDBInstancePayTypeResponse
     */
    modifyDBInstancePayType(request: ModifyDBInstancePayTypeRequest): Promise<ModifyDBInstancePayTypeResponse>;
    /**
      * > This operation is phased out.
      *
      * @param request ModifyDBInstanceProxyConfigurationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceProxyConfigurationResponse
     */
    modifyDBInstanceProxyConfigurationWithOptions(request: ModifyDBInstanceProxyConfigurationRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceProxyConfigurationResponse>;
    /**
      * > This operation is phased out.
      *
      * @param request ModifyDBInstanceProxyConfigurationRequest
      * @return ModifyDBInstanceProxyConfigurationResponse
     */
    modifyDBInstanceProxyConfiguration(request: ModifyDBInstanceProxyConfigurationRequest): Promise<ModifyDBInstanceProxyConfigurationResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Use the SSL encryption feature for an ApsaraDB RDS for MySQL instance](~~96120~~)
      * *   [Use the SSL encryption feature for an ApsaraDB RDS for PostgreSQL instance](~~229517~~)
      * *   [Use the SSL encryption feature for an ApsaraDB RDS for SQL Server instance](~~95715~~)
      *
      * @param request ModifyDBInstanceSSLRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceSSLResponse
     */
    modifyDBInstanceSSLWithOptions(request: ModifyDBInstanceSSLRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceSSLResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Use the SSL encryption feature for an ApsaraDB RDS for MySQL instance](~~96120~~)
      * *   [Use the SSL encryption feature for an ApsaraDB RDS for PostgreSQL instance](~~229517~~)
      * *   [Use the SSL encryption feature for an ApsaraDB RDS for SQL Server instance](~~95715~~)
      *
      * @param request ModifyDBInstanceSSLRequest
      * @return ModifyDBInstanceSSLResponse
     */
    modifyDBInstanceSSL(request: ModifyDBInstanceSSLRequest): Promise<ModifyDBInstanceSSLResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Fees are generated if the call is successful. Before you call this operation, carefully read the following documentation:
      * *   [Change the specifications of an ApsaraDB RDS for MySQL instance](~~96061~~)
      * *   [Change the specifications of an ApsaraDB RDS for PostgreSQL instance](~~96750~~)
      * *   [Change the specifications of an ApsaraDB RDS for SQL Server instance](~~95665~~)
      * *   [Change the specifications of an ApsaraDB RDS for MariaDB instance](~~97129~~)
      *
      * @param tmpReq ModifyDBInstanceSpecRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceSpecResponse
     */
    modifyDBInstanceSpecWithOptions(tmpReq: ModifyDBInstanceSpecRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceSpecResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Fees are generated if the call is successful. Before you call this operation, carefully read the following documentation:
      * *   [Change the specifications of an ApsaraDB RDS for MySQL instance](~~96061~~)
      * *   [Change the specifications of an ApsaraDB RDS for PostgreSQL instance](~~96750~~)
      * *   [Change the specifications of an ApsaraDB RDS for SQL Server instance](~~95665~~)
      * *   [Change the specifications of an ApsaraDB RDS for MariaDB instance](~~97129~~)
      *
      * @param request ModifyDBInstanceSpecRequest
      * @return ModifyDBInstanceSpecResponse
     */
    modifyDBInstanceSpec(request: ModifyDBInstanceSpecRequest): Promise<ModifyDBInstanceSpecResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Configure TDE for an ApsaraDB RDS for MySQL instance](~~96121~~)
      * *   [Configure TDE for an ApsaraDB RDS for PostgreSQL instance](~~465652~~)
      * *   [Configure TDE for an ApsaraDB RDS for SQL Server instance](~~95716~~)
      *
      * @param request ModifyDBInstanceTDERequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBInstanceTDEResponse
     */
    modifyDBInstanceTDEWithOptions(request: ModifyDBInstanceTDERequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBInstanceTDEResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Configure TDE for an ApsaraDB RDS for MySQL instance](~~96121~~)
      * *   [Configure TDE for an ApsaraDB RDS for PostgreSQL instance](~~465652~~)
      * *   [Configure TDE for an ApsaraDB RDS for SQL Server instance](~~95716~~)
      *
      * @param request ModifyDBInstanceTDERequest
      * @return ModifyDBInstanceTDEResponse
     */
    modifyDBInstanceTDE(request: ModifyDBInstanceTDERequest): Promise<ModifyDBInstanceTDEResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [](#)References
      * > Fees are generated if the call is successful. Before you call this operation, carefully read the following topics:
      * *   [Change the specifications of an ApsaraDB RDS for MySQL instance](~~96061~~)
      *
      * @param tmpReq ModifyDBNodeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBNodeResponse
     */
    modifyDBNodeWithOptions(tmpReq: ModifyDBNodeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBNodeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * ### [](#)References
      * > Fees are generated if the call is successful. Before you call this operation, carefully read the following topics:
      * *   [Change the specifications of an ApsaraDB RDS for MySQL instance](~~96061~~)
      *
      * @param request ModifyDBNodeRequest
      * @return ModifyDBNodeResponse
     */
    modifyDBNode(request: ModifyDBNodeRequest): Promise<ModifyDBNodeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * >  Starting October 17, 2023, ApsaraDB RDS provides a dedicated proxy free of charge for each ApsaraDB RDS for MySQL instance on RDS Cluster Edition. For more information, see [\\[Special offers/Price changes\\] One proxy is provided free of charge for ApsaraDB RDS for MySQL instances on RDS Cluster Edition](~~2555466~~).
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Enable and configure the dedicated proxy feature for an ApsaraDB RDS for MySQL instance](~~197456~~)
      * *   [Enable and configure the dedicated proxy feature for an ApsaraDB RDS for PostgreSQL instance](~~418272~~)
      *
      * @param request ModifyDBProxyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBProxyResponse
     */
    modifyDBProxyWithOptions(request: ModifyDBProxyRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBProxyResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * >  Starting October 17, 2023, ApsaraDB RDS provides a dedicated proxy free of charge for each ApsaraDB RDS for MySQL instance on RDS Cluster Edition. For more information, see [\\[Special offers/Price changes\\] One proxy is provided free of charge for ApsaraDB RDS for MySQL instances on RDS Cluster Edition](~~2555466~~).
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Enable and configure the dedicated proxy feature for an ApsaraDB RDS for MySQL instance](~~197456~~)
      * *   [Enable and configure the dedicated proxy feature for an ApsaraDB RDS for PostgreSQL instance](~~418272~~)
      *
      * @param request ModifyDBProxyRequest
      * @return ModifyDBProxyResponse
     */
    modifyDBProxy(request: ModifyDBProxyRequest): Promise<ModifyDBProxyResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Enable and configure the dedicated proxy feature](~~197456~~)
      * *   [Create a database proxy terminal for an ApsaraDB RDS for PostgreSQL instance](~~418273~~)
      *
      * @param request ModifyDBProxyEndpointRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBProxyEndpointResponse
     */
    modifyDBProxyEndpointWithOptions(request: ModifyDBProxyEndpointRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBProxyEndpointResponse>;
    /**
      * ### [](#)Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Enable and configure the dedicated proxy feature](~~197456~~)
      * *   [Create a database proxy terminal for an ApsaraDB RDS for PostgreSQL instance](~~418273~~)
      *
      * @param request ModifyDBProxyEndpointRequest
      * @return ModifyDBProxyEndpointResponse
     */
    modifyDBProxyEndpoint(request: ModifyDBProxyEndpointRequest): Promise<ModifyDBProxyEndpointResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance](~~184921~~)
      * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for PostgreSQL instance](~~418274~~)
      *
      * @param request ModifyDBProxyEndpointAddressRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBProxyEndpointAddressResponse
     */
    modifyDBProxyEndpointAddressWithOptions(request: ModifyDBProxyEndpointAddressRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBProxyEndpointAddressResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for MySQL instance](~~184921~~)
      * *   [Configure the dedicated proxy endpoint of an ApsaraDB RDS for PostgreSQL instance](~~418274~~)
      *
      * @param request ModifyDBProxyEndpointAddressRequest
      * @return ModifyDBProxyEndpointAddressResponse
     */
    modifyDBProxyEndpointAddress(request: ModifyDBProxyEndpointAddressRequest): Promise<ModifyDBProxyEndpointAddressResponse>;
    /**
      * Before you call the ModifyDBProxyInstance operation, make sure that the [ModifyDBProxy](~~141054~~) operation is called to enable the database proxy feature for the instance.
      * *   The dedicated proxy feature of ApsaraDB RDS for MySQL provides capabilities such as read/write splitting and short-lived connection optimization. For more information, see [What are database proxies?](~~138705~~)
      * *   The database proxy feature of ApsaraDB RDS for PostgreSQL supports read/write splitting. For more information, see [What are database proxies?](~~412194~~)
      *
      * @param request ModifyDBProxyInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDBProxyInstanceResponse
     */
    modifyDBProxyInstanceWithOptions(request: ModifyDBProxyInstanceRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDBProxyInstanceResponse>;
    /**
      * Before you call the ModifyDBProxyInstance operation, make sure that the [ModifyDBProxy](~~141054~~) operation is called to enable the database proxy feature for the instance.
      * *   The dedicated proxy feature of ApsaraDB RDS for MySQL provides capabilities such as read/write splitting and short-lived connection optimization. For more information, see [What are database proxies?](~~138705~~)
      * *   The database proxy feature of ApsaraDB RDS for PostgreSQL supports read/write splitting. For more information, see [What are database proxies?](~~412194~~)
      *
      * @param request ModifyDBProxyInstanceRequest
      * @return ModifyDBProxyInstanceResponse
     */
    modifyDBProxyInstance(request: ModifyDBProxyInstanceRequest): Promise<ModifyDBProxyInstanceResponse>;
    /**
      * Distributed transaction whitelists allow for distributed transactions between an Elastic Compute Service (ECS) instance and an RDS instance. For more information, see [Configure a distributed transaction whitelist](~~124321~~).
      * This operation is applicable to instances that run one of the following SQL Server versions in the RDS High-Availability Edition: 2012 SE, 2012 EE, 2014 SE, 2016 SE, 2016 EE, and 2017 SE.
      *
      * @param request ModifyDTCSecurityIpHostsForSQLServerRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDTCSecurityIpHostsForSQLServerResponse
     */
    modifyDTCSecurityIpHostsForSQLServerWithOptions(request: ModifyDTCSecurityIpHostsForSQLServerRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDTCSecurityIpHostsForSQLServerResponse>;
    /**
      * Distributed transaction whitelists allow for distributed transactions between an Elastic Compute Service (ECS) instance and an RDS instance. For more information, see [Configure a distributed transaction whitelist](~~124321~~).
      * This operation is applicable to instances that run one of the following SQL Server versions in the RDS High-Availability Edition: 2012 SE, 2012 EE, 2014 SE, 2016 SE, 2016 EE, and 2017 SE.
      *
      * @param request ModifyDTCSecurityIpHostsForSQLServerRequest
      * @return ModifyDTCSecurityIpHostsForSQLServerResponse
     */
    modifyDTCSecurityIpHostsForSQLServer(request: ModifyDTCSecurityIpHostsForSQLServerRequest): Promise<ModifyDTCSecurityIpHostsForSQLServerResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure automatic storage expansion for ApsaraDB RDS for MySQL](~~173826~~)
      * *   [Configure automatic storage expansion for ApsaraDB RDS for PostgreSQL](~~432496~~)
      *
      * @param request ModifyDasInstanceConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDasInstanceConfigResponse
     */
    modifyDasInstanceConfigWithOptions(request: ModifyDasInstanceConfigRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDasInstanceConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure automatic storage expansion for ApsaraDB RDS for MySQL](~~173826~~)
      * *   [Configure automatic storage expansion for ApsaraDB RDS for PostgreSQL](~~432496~~)
      *
      * @param request ModifyDasInstanceConfigRequest
      * @return ModifyDasInstanceConfigResponse
     */
    modifyDasInstanceConfig(request: ModifyDasInstanceConfigRequest): Promise<ModifyDasInstanceConfigResponse>;
    /**
      * ### [](#)Supported database engine
      * *   SQL Server
      *
      * @param request ModifyDatabaseConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDatabaseConfigResponse
     */
    modifyDatabaseConfigWithOptions(request: ModifyDatabaseConfigRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDatabaseConfigResponse>;
    /**
      * ### [](#)Supported database engine
      * *   SQL Server
      *
      * @param request ModifyDatabaseConfigRequest
      * @return ModifyDatabaseConfigResponse
     */
    modifyDatabaseConfig(request: ModifyDatabaseConfigRequest): Promise<ModifyDatabaseConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS MySQL
      * ### [](#)References
      * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
      * [Configure SSL encryption for a proxy endpoint](~~188164~~)
      *
      * @param request ModifyDbProxyInstanceSslRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyDbProxyInstanceSslResponse
     */
    modifyDbProxyInstanceSslWithOptions(request: ModifyDbProxyInstanceSslRequest, runtime: $Util.RuntimeOptions): Promise<ModifyDbProxyInstanceSslResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS MySQL
      * ### [](#)References
      * > : Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
      * [Configure SSL encryption for a proxy endpoint](~~188164~~)
      *
      * @param request ModifyDbProxyInstanceSslRequest
      * @return ModifyDbProxyInstanceSslResponse
     */
    modifyDbProxyInstanceSsl(request: ModifyDbProxyInstanceSslRequest): Promise<ModifyDbProxyInstanceSslResponse>;
    modifyEventInfoWithOptions(request: ModifyEventInfoRequest, runtime: $Util.RuntimeOptions): Promise<ModifyEventInfoResponse>;
    modifyEventInfo(request: ModifyEventInfoRequest): Promise<ModifyEventInfoResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [What is availability check?](~~207467~~)
      *
      * @param request ModifyHADiagnoseConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyHADiagnoseConfigResponse
     */
    modifyHADiagnoseConfigWithOptions(request: ModifyHADiagnoseConfigRequest, runtime: $Util.RuntimeOptions): Promise<ModifyHADiagnoseConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [What is availability check?](~~207467~~)
      *
      * @param request ModifyHADiagnoseConfigRequest
      * @return ModifyHADiagnoseConfigResponse
     */
    modifyHADiagnoseConfig(request: ModifyHADiagnoseConfigRequest): Promise<ModifyHADiagnoseConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for MySQL instance](~~96054~~)
      * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for PostgreSQL instance](~~96747~~)
      * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for SQL Server instance](~~95659~~)
      * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for MariaDB instance](~~97127~~)
      *
      * @param request ModifyHASwitchConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyHASwitchConfigResponse
     */
    modifyHASwitchConfigWithOptions(request: ModifyHASwitchConfigRequest, runtime: $Util.RuntimeOptions): Promise<ModifyHASwitchConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for MySQL instance](~~96054~~)
      * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for PostgreSQL instance](~~96747~~)
      * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for SQL Server instance](~~95659~~)
      * *   [Use the automatic primary/secondary switchover feature for an ApsaraDB RDS for MariaDB instance](~~97127~~)
      *
      * @param request ModifyHASwitchConfigRequest
      * @return ModifyHASwitchConfigResponse
     */
    modifyHASwitchConfig(request: ModifyHASwitchConfigRequest): Promise<ModifyHASwitchConfigResponse>;
    /**
      * If you enable auto-renewal for your instance, you do not need to manually renew your subscription or be concerned about business interruptions caused by subscription expiration. For more information, see [Configure auto-renewal](~~96049~~).
      *
      * @param request ModifyInstanceAutoRenewalAttributeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceAutoRenewalAttributeResponse
     */
    modifyInstanceAutoRenewalAttributeWithOptions(request: ModifyInstanceAutoRenewalAttributeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceAutoRenewalAttributeResponse>;
    /**
      * If you enable auto-renewal for your instance, you do not need to manually renew your subscription or be concerned about business interruptions caused by subscription expiration. For more information, see [Configure auto-renewal](~~96049~~).
      *
      * @param request ModifyInstanceAutoRenewalAttributeRequest
      * @return ModifyInstanceAutoRenewalAttributeResponse
     */
    modifyInstanceAutoRenewalAttribute(request: ModifyInstanceAutoRenewalAttributeRequest): Promise<ModifyInstanceAutoRenewalAttributeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      *
      * @param request ModifyInstanceCrossBackupPolicyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyInstanceCrossBackupPolicyResponse
     */
    modifyInstanceCrossBackupPolicyWithOptions(request: ModifyInstanceCrossBackupPolicyRequest, runtime: $Util.RuntimeOptions): Promise<ModifyInstanceCrossBackupPolicyResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Use the cross-region backup feature of an ApsaraDB RDS for MySQL instance](~~120824~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for PostgreSQL instance](~~206671~~)
      * *   [Use the cross-region backup feature for an ApsaraDB RDS for SQL Server instance](~~187923~~)
      *
      * @param request ModifyInstanceCrossBackupPolicyRequest
      * @return ModifyInstanceCrossBackupPolicyResponse
     */
    modifyInstanceCrossBackupPolicy(request: ModifyInstanceCrossBackupPolicyRequest): Promise<ModifyInstanceCrossBackupPolicyResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Connect an ApsaraDB RDS for PostgreSQL instance to a self-managed AD domain](~~349288~~)
      * *   [The pg_hba.conf File](https://www.postgresql.org/docs/11/auth-pg-hba-conf.html)
      *
      * @param request ModifyPGHbaConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyPGHbaConfigResponse
     */
    modifyPGHbaConfigWithOptions(request: ModifyPGHbaConfigRequest, runtime: $Util.RuntimeOptions): Promise<ModifyPGHbaConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * RDS PostgreSQL
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Connect an ApsaraDB RDS for PostgreSQL instance to a self-managed AD domain](~~349288~~)
      * *   [The pg_hba.conf File](https://www.postgresql.org/docs/11/auth-pg-hba-conf.html)
      *
      * @param request ModifyPGHbaConfigRequest
      * @return ModifyPGHbaConfigResponse
     */
    modifyPGHbaConfig(request: ModifyPGHbaConfigRequest): Promise<ModifyPGHbaConfigResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Modify the parameters of an ApsaraDB RDS for MySQL instance](~~96063~~)
      * *   [Modify the parameters of an ApsaraDB RDS for PostgreSQL instance](~~96751~~)
      * *   [Modify the parameters of an ApsaraDB RDS for SQL Server instance](~~95667~~)
      * *   [Modify the parameters of an ApsaraDB RDS for MariaDB instance](~~97130~~)
      *
      * @param request ModifyParameterRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyParameterResponse
     */
    modifyParameterWithOptions(request: ModifyParameterRequest, runtime: $Util.RuntimeOptions): Promise<ModifyParameterResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Modify the parameters of an ApsaraDB RDS for MySQL instance](~~96063~~)
      * *   [Modify the parameters of an ApsaraDB RDS for PostgreSQL instance](~~96751~~)
      * *   [Modify the parameters of an ApsaraDB RDS for SQL Server instance](~~95667~~)
      * *   [Modify the parameters of an ApsaraDB RDS for MariaDB instance](~~97130~~)
      *
      * @param request ModifyParameterRequest
      * @return ModifyParameterResponse
     */
    modifyParameter(request: ModifyParameterRequest): Promise<ModifyParameterResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~)
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~)
      *
      * @param request ModifyParameterGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyParameterGroupResponse
     */
    modifyParameterGroupWithOptions(request: ModifyParameterGroupRequest, runtime: $Util.RuntimeOptions): Promise<ModifyParameterGroupResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for MySQL instances](~~130565~~)
      * *   [Use a parameter template to configure the parameters of ApsaraDB RDS for PostgreSQL instances](~~457176~~)
      *
      * @param request ModifyParameterGroupRequest
      * @return ModifyParameterGroupResponse
     */
    modifyParameterGroup(request: ModifyParameterGroupRequest): Promise<ModifyParameterGroupResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### [](#)Prerequisites
      * Before you call this operation, make sure that the following requirements are met:
      * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
      * *   The read/write splitting feature is enabled for your ApsaraDB RDS for MySQL instance.
      * *   The instance must run one of the following database engine versions and RDS editions:
      *     *   MySQL 5.7 on RDS High-availability Edition with local disks
      *     *   MySQL 5.6
      *     *   SQL Server on RDS Cluster Edition
      *
      * @param request ModifyReadWriteSplittingConnectionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyReadWriteSplittingConnectionResponse
     */
    modifyReadWriteSplittingConnectionWithOptions(request: ModifyReadWriteSplittingConnectionRequest, runtime: $Util.RuntimeOptions): Promise<ModifyReadWriteSplittingConnectionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### [](#)Prerequisites
      * Before you call this operation, make sure that the following requirements are met:
      * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
      * *   The read/write splitting feature is enabled for your ApsaraDB RDS for MySQL instance.
      * *   The instance must run one of the following database engine versions and RDS editions:
      *     *   MySQL 5.7 on RDS High-availability Edition with local disks
      *     *   MySQL 5.6
      *     *   SQL Server on RDS Cluster Edition
      *
      * @param request ModifyReadWriteSplittingConnectionRequest
      * @return ModifyReadWriteSplittingConnectionResponse
     */
    modifyReadWriteSplittingConnection(request: ModifyReadWriteSplittingConnectionRequest): Promise<ModifyReadWriteSplittingConnectionResponse>;
    /**
      * ### Supported database engines
      * RDS MySQL
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Set the data replication latency of a read-only ApsaraDB RDS for MySQL instance](~~96056~~)
      *
      * @param request ModifyReadonlyInstanceDelayReplicationTimeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyReadonlyInstanceDelayReplicationTimeResponse
     */
    modifyReadonlyInstanceDelayReplicationTimeWithOptions(request: ModifyReadonlyInstanceDelayReplicationTimeRequest, runtime: $Util.RuntimeOptions): Promise<ModifyReadonlyInstanceDelayReplicationTimeResponse>;
    /**
      * ### Supported database engines
      * RDS MySQL
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Set the data replication latency of a read-only ApsaraDB RDS for MySQL instance](~~96056~~)
      *
      * @param request ModifyReadonlyInstanceDelayReplicationTimeRequest
      * @return ModifyReadonlyInstanceDelayReplicationTimeResponse
     */
    modifyReadonlyInstanceDelayReplicationTime(request: ModifyReadonlyInstanceDelayReplicationTimeRequest): Promise<ModifyReadonlyInstanceDelayReplicationTimeResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Transfer resources across resource groups](~~94487~~)
      *
      * @param request ModifyResourceGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyResourceGroupResponse
     */
    modifyResourceGroupWithOptions(request: ModifyResourceGroupRequest, runtime: $Util.RuntimeOptions): Promise<ModifyResourceGroupResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Transfer resources across resource groups](~~94487~~)
      *
      * @param request ModifyResourceGroupRequest
      * @return ModifyResourceGroupResponse
     */
    modifyResourceGroup(request: ModifyResourceGroupRequest): Promise<ModifyResourceGroupResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Use the SQL Explorer and Audit feature for an ApsaraDB RDS for MySQL instance](~~476574~~)
      * *   [Use the SQL Audit feature for an ApsaraDB RDS for PostgreSQL instance](~~96766~~)
      * *   [Use the SQL Audit feature for an ApsaraDB RDS for SQL Server instance](~~95712~~)
      *
      * @param request ModifySQLCollectorPolicyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifySQLCollectorPolicyResponse
     */
    modifySQLCollectorPolicyWithOptions(request: ModifySQLCollectorPolicyRequest, runtime: $Util.RuntimeOptions): Promise<ModifySQLCollectorPolicyResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Use the SQL Explorer and Audit feature for an ApsaraDB RDS for MySQL instance](~~476574~~)
      * *   [Use the SQL Audit feature for an ApsaraDB RDS for PostgreSQL instance](~~96766~~)
      * *   [Use the SQL Audit feature for an ApsaraDB RDS for SQL Server instance](~~95712~~)
      *
      * @param request ModifySQLCollectorPolicyRequest
      * @return ModifySQLCollectorPolicyResponse
     */
    modifySQLCollectorPolicy(request: ModifySQLCollectorPolicyRequest): Promise<ModifySQLCollectorPolicyResponse>;
    /**
      * ### Supported database engines
      * RDS MySQL
      * ### Precautions
      * After you shorten the log backup retention period, log backup files that are stored longer than the specified log backup retention period are immediately deleted.
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Use the SQL Explorer and Audit feature](~~476574~~)
      *
      * @param request ModifySQLCollectorRetentionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifySQLCollectorRetentionResponse
     */
    modifySQLCollectorRetentionWithOptions(request: ModifySQLCollectorRetentionRequest, runtime: $Util.RuntimeOptions): Promise<ModifySQLCollectorRetentionResponse>;
    /**
      * ### Supported database engines
      * RDS MySQL
      * ### Precautions
      * After you shorten the log backup retention period, log backup files that are stored longer than the specified log backup retention period are immediately deleted.
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Use the SQL Explorer and Audit feature](~~476574~~)
      *
      * @param request ModifySQLCollectorRetentionRequest
      * @return ModifySQLCollectorRetentionResponse
     */
    modifySQLCollectorRetention(request: ModifySQLCollectorRetentionRequest): Promise<ModifySQLCollectorRetentionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure a security group for an ApsaraDB RDS for MySQL instance](~~201042~~)
      * *   [Configure a security group for an ApsaraDB RDS for PostgreSQL instance](~~206310~~)
      * *   [Configure a security group for an ApsaraDB RDS for SQL Server instance](~~2392322~~)
      *
      * @param request ModifySecurityGroupConfigurationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifySecurityGroupConfigurationResponse
     */
    modifySecurityGroupConfigurationWithOptions(request: ModifySecurityGroupConfigurationRequest, runtime: $Util.RuntimeOptions): Promise<ModifySecurityGroupConfigurationResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Configure a security group for an ApsaraDB RDS for MySQL instance](~~201042~~)
      * *   [Configure a security group for an ApsaraDB RDS for PostgreSQL instance](~~206310~~)
      * *   [Configure a security group for an ApsaraDB RDS for SQL Server instance](~~2392322~~)
      *
      * @param request ModifySecurityGroupConfigurationRequest
      * @return ModifySecurityGroupConfigurationResponse
     */
    modifySecurityGroupConfiguration(request: ModifySecurityGroupConfigurationRequest): Promise<ModifySecurityGroupConfigurationResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Configure an IP address whitelist for an ApsaraDB RDS for MySQL instance](~~96118~~)
      * *   [Configure an IP address whitelist for an ApsaraDB RDS for PostgreSQL instance](~~43187~~)
      * *   [Configure an IP address whitelist for an ApsaraDB RDS for SQL Server instance](~~43186~~)
      * *   [Configure an IP address whitelist for an ApsaraDB RDS for MariaDB instance](~~90336~~)
      *
      * @param request ModifySecurityIpsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifySecurityIpsResponse
     */
    modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: $Util.RuntimeOptions): Promise<ModifySecurityIpsResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Configure an IP address whitelist for an ApsaraDB RDS for MySQL instance](~~96118~~)
      * *   [Configure an IP address whitelist for an ApsaraDB RDS for PostgreSQL instance](~~43187~~)
      * *   [Configure an IP address whitelist for an ApsaraDB RDS for SQL Server instance](~~43186~~)
      * *   [Configure an IP address whitelist for an ApsaraDB RDS for MariaDB instance](~~90336~~)
      *
      * @param request ModifySecurityIpsRequest
      * @return ModifySecurityIpsResponse
     */
    modifySecurityIps(request: ModifySecurityIpsRequest): Promise<ModifySecurityIpsResponse>;
    modifyTaskInfoWithOptions(request: ModifyTaskInfoRequest, runtime: $Util.RuntimeOptions): Promise<ModifyTaskInfoResponse>;
    modifyTaskInfo(request: ModifyTaskInfoRequest): Promise<ModifyTaskInfoResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request ModifyWhitelistTemplateRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ModifyWhitelistTemplateResponse
     */
    modifyWhitelistTemplateWithOptions(request: ModifyWhitelistTemplateRequest, runtime: $Util.RuntimeOptions): Promise<ModifyWhitelistTemplateResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      *
      * @param request ModifyWhitelistTemplateRequest
      * @return ModifyWhitelistTemplateResponse
     */
    modifyWhitelistTemplate(request: ModifyWhitelistTemplateRequest): Promise<ModifyWhitelistTemplateResponse>;
    preCheckCreateOrderForCreateDBNodesWithOptions(tmpReq: PreCheckCreateOrderForCreateDBNodesRequest, runtime: $Util.RuntimeOptions): Promise<PreCheckCreateOrderForCreateDBNodesResponse>;
    preCheckCreateOrderForCreateDBNodes(request: PreCheckCreateOrderForCreateDBNodesRequest): Promise<PreCheckCreateOrderForCreateDBNodesResponse>;
    preCheckCreateOrderForDeleteDBNodesWithOptions(tmpReq: PreCheckCreateOrderForDeleteDBNodesRequest, runtime: $Util.RuntimeOptions): Promise<PreCheckCreateOrderForDeleteDBNodesResponse>;
    preCheckCreateOrderForDeleteDBNodes(request: PreCheckCreateOrderForDeleteDBNodesRequest): Promise<PreCheckCreateOrderForDeleteDBNodesResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### Description
      * The system automatically uploads log backup files to Object Storage Service (OSS) buckets. If the remaining storage of an instance is insufficient, you can call this operation to upload the log backup files of the instance to OSS buckets. After the upload is complete, the system deletes these files from the instance to release storage. This operation is called to upload log backup files from an instance to OSS buckets and then delete these files from the instance. If the instance runs SQL Server, transaction log backup files are compressed before they are uploaded.
      * ### Precautions
      * *   When you upload log backup files, the data restoration feature is not affected.
      * *   This operation is called to release storage. The backup storage usage is not reduced.
      * *   The OSS buckets to which log backup files are uploaded are provided by the system. You do not need to purchase these OSS buckets. In addition, you cannot access these OSS buckets.
      *
      * @param request PurgeDBInstanceLogRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return PurgeDBInstanceLogResponse
     */
    purgeDBInstanceLogWithOptions(request: PurgeDBInstanceLogRequest, runtime: $Util.RuntimeOptions): Promise<PurgeDBInstanceLogResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### Description
      * The system automatically uploads log backup files to Object Storage Service (OSS) buckets. If the remaining storage of an instance is insufficient, you can call this operation to upload the log backup files of the instance to OSS buckets. After the upload is complete, the system deletes these files from the instance to release storage. This operation is called to upload log backup files from an instance to OSS buckets and then delete these files from the instance. If the instance runs SQL Server, transaction log backup files are compressed before they are uploaded.
      * ### Precautions
      * *   When you upload log backup files, the data restoration feature is not affected.
      * *   This operation is called to release storage. The backup storage usage is not reduced.
      * *   The OSS buckets to which log backup files are uploaded are provided by the system. You do not need to purchase these OSS buckets. In addition, you cannot access these OSS buckets.
      *
      * @param request PurgeDBInstanceLogRequest
      * @return PurgeDBInstanceLogResponse
     */
    purgeDBInstanceLog(request: PurgeDBInstanceLogRequest): Promise<PurgeDBInstanceLogResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### Feature description
      * The notifications are highlighted at the top of the ApsaraDB RDS console. The notifications include renewal reminders and reminders of instance creation failures.
      * After you call this operation to query notifications, you can call the [ConfirmNotify](~~610444~~) operation to mark the notifications as confirmed, which means that you understand the content of the notifications.
      *
      * @param request QueryNotifyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryNotifyResponse
     */
    queryNotifyWithOptions(request: QueryNotifyRequest, runtime: $Util.RuntimeOptions): Promise<QueryNotifyResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### Feature description
      * The notifications are highlighted at the top of the ApsaraDB RDS console. The notifications include renewal reminders and reminders of instance creation failures.
      * After you call this operation to query notifications, you can call the [ConfirmNotify](~~610444~~) operation to mark the notifications as confirmed, which means that you understand the content of the notifications.
      *
      * @param request QueryNotifyRequest
      * @return QueryNotifyResponse
     */
    queryNotify(request: QueryNotifyRequest): Promise<QueryNotifyResponse>;
    queryRecommendByCodeWithOptions(request: QueryRecommendByCodeRequest, runtime: $Util.RuntimeOptions): Promise<QueryRecommendByCodeResponse>;
    queryRecommendByCode(request: QueryRecommendByCodeRequest): Promise<QueryRecommendByCodeResponse>;
    /**
      * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
      *
      * @param request RebuildDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RebuildDBInstanceResponse
     */
    rebuildDBInstanceWithOptions(request: RebuildDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<RebuildDBInstanceResponse>;
    /**
      * Dedicated clusters allow you to manage a number of instances at a time. You can create multiple dedicated clusters in a single region. Each dedicated cluster consists of multiple hosts. You can create multiple instances on each host. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
      *
      * @param request RebuildDBInstanceRequest
      * @return RebuildDBInstanceResponse
     */
    rebuildDBInstance(request: RebuildDBInstanceRequest): Promise<RebuildDBInstanceResponse>;
    /**
      * The operation is phased out.
      *
      * @param request ReceiveDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ReceiveDBInstanceResponse
     */
    receiveDBInstanceWithOptions(request: ReceiveDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<ReceiveDBInstanceResponse>;
    /**
      * The operation is phased out.
      *
      * @param request ReceiveDBInstanceRequest
      * @return ReceiveDBInstanceResponse
     */
    receiveDBInstance(request: ReceiveDBInstanceRequest): Promise<ReceiveDBInstanceResponse>;
    /**
      * You can call this operation to restore databases to a new instance or an existing instance. If you want to restore databases to an existing instance, we recommend that you call the [Copy databases](~~88810~~) operation.
      * If you want to restore databases to a new instance, you must create an instance and then restore specific or all databases to the new instance.
      * *   If you specify the name of a database, only the specified database is restored to the new instance.
      * *   If you do not specify the name of a database, all databases are restored to the new instance.
      * > This operation is supported only for instances that run SQL Server 2012 or later.
      *
      * @param request RecoveryDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RecoveryDBInstanceResponse
     */
    recoveryDBInstanceWithOptions(request: RecoveryDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<RecoveryDBInstanceResponse>;
    /**
      * You can call this operation to restore databases to a new instance or an existing instance. If you want to restore databases to an existing instance, we recommend that you call the [Copy databases](~~88810~~) operation.
      * If you want to restore databases to a new instance, you must create an instance and then restore specific or all databases to the new instance.
      * *   If you specify the name of a database, only the specified database is restored to the new instance.
      * *   If you do not specify the name of a database, all databases are restored to the new instance.
      * > This operation is supported only for instances that run SQL Server 2012 or later.
      *
      * @param request RecoveryDBInstanceRequest
      * @return RecoveryDBInstanceResponse
     */
    recoveryDBInstance(request: RecoveryDBInstanceRequest): Promise<RecoveryDBInstanceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * *   [Release the public endpoint of an ApsaraDB RDS for MySQL instance](~~26128~~)
      * *   [Release the public endpoint of an ApsaraDB RDS for PostgreSQL instance](~~97738~~)
      * *   [Release the public endpoint of an ApsaraDB RDS for SQL Server instance](~~97736~~)
      * *   [Release the public endpoint of an ApsaraDB RDS for MariaDB instance](~~97740~~)
      *
      * @param request ReleaseInstanceConnectionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ReleaseInstanceConnectionResponse
     */
    releaseInstanceConnectionWithOptions(request: ReleaseInstanceConnectionRequest, runtime: $Util.RuntimeOptions): Promise<ReleaseInstanceConnectionResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * *   [Release the public endpoint of an ApsaraDB RDS for MySQL instance](~~26128~~)
      * *   [Release the public endpoint of an ApsaraDB RDS for PostgreSQL instance](~~97738~~)
      * *   [Release the public endpoint of an ApsaraDB RDS for SQL Server instance](~~97736~~)
      * *   [Release the public endpoint of an ApsaraDB RDS for MariaDB instance](~~97740~~)
      *
      * @param request ReleaseInstanceConnectionRequest
      * @return ReleaseInstanceConnectionResponse
     */
    releaseInstanceConnection(request: ReleaseInstanceConnectionRequest): Promise<ReleaseInstanceConnectionResponse>;
    /**
      * To ensure data security, you can release the public endpoint when you do not need to access the database from the Internet.
      *
      * @param request ReleaseInstancePublicConnectionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ReleaseInstancePublicConnectionResponse
     */
    releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: $Util.RuntimeOptions): Promise<ReleaseInstancePublicConnectionResponse>;
    /**
      * To ensure data security, you can release the public endpoint when you do not need to access the database from the Internet.
      *
      * @param request ReleaseInstancePublicConnectionRequest
      * @return ReleaseInstancePublicConnectionResponse
     */
    releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): Promise<ReleaseInstancePublicConnectionResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### Prerequisites
      * Before you call this operation, make sure that the following requirements are met:
      * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
      * *   The read/write splitting feature is enabled for the instance.
      * *   The instance must run one of the following database engine versions and RDS editions:
      *     *   MySQL 5.7 on RDS High-availability Edition (with local disks)
      *     *   MySQL 5.6
      *     *   SQL Server on RDS Cluster Edition
      *
      * @param request ReleaseReadWriteSplittingConnectionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ReleaseReadWriteSplittingConnectionResponse
     */
    releaseReadWriteSplittingConnectionWithOptions(request: ReleaseReadWriteSplittingConnectionRequest, runtime: $Util.RuntimeOptions): Promise<ReleaseReadWriteSplittingConnectionResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### Prerequisites
      * Before you call this operation, make sure that the following requirements are met:
      * *   The shared proxy feature is enabled for your ApsaraDB RDS for MySQL instance.
      * *   The read/write splitting feature is enabled for the instance.
      * *   The instance must run one of the following database engine versions and RDS editions:
      *     *   MySQL 5.7 on RDS High-availability Edition (with local disks)
      *     *   MySQL 5.6
      *     *   SQL Server on RDS Cluster Edition
      *
      * @param request ReleaseReadWriteSplittingConnectionRequest
      * @return ReleaseReadWriteSplittingConnectionResponse
     */
    releaseReadWriteSplittingConnection(request: ReleaseReadWriteSplittingConnectionRequest): Promise<ReleaseReadWriteSplittingConnectionResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)Usage notes
      * *   A maximum of 10 tags can be removed in a single request.
      * *   If a tag is removed from all instances to which the tag is added, the tag is automatically deleted.
      * *   If you specify only TagKey, all tags that match the TagKey condition are removed.
      * *   You must specify at least TagKey or a pair of TagKey and TagValue.
      *
      * @param request RemoveTagsFromResourceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RemoveTagsFromResourceResponse
     */
    removeTagsFromResourceWithOptions(request: RemoveTagsFromResourceRequest, runtime: $Util.RuntimeOptions): Promise<RemoveTagsFromResourceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)Usage notes
      * *   A maximum of 10 tags can be removed in a single request.
      * *   If a tag is removed from all instances to which the tag is added, the tag is automatically deleted.
      * *   If you specify only TagKey, all tags that match the TagKey condition are removed.
      * *   You must specify at least TagKey or a pair of TagKey and TagValue.
      *
      * @param request RemoveTagsFromResourceRequest
      * @return RemoveTagsFromResourceResponse
     */
    removeTagsFromResource(request: RemoveTagsFromResourceRequest): Promise<RemoveTagsFromResourceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the following topics:
      * *   [Manually renew an ApsaraDB RDS for MySQL instance](~~96050~~)
      * *   [Manually renew an ApsaraDB RDS for PostgreSQL instance](~~96741~~)
      * *   [Manually renew an ApsaraDB RDS for SQL Server instance](~~95637~~)
      * *   [Manually renew an ApsaraDB RDS for MariaDB instance](~~97122~~)
      *
      * @param request RenewInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RenewInstanceResponse
     */
    renewInstanceWithOptions(request: RenewInstanceRequest, runtime: $Util.RuntimeOptions): Promise<RenewInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * >  Fees of an instance are changed if the call is successful. Before you call this operation, carefully read the following topics:
      * *   [Manually renew an ApsaraDB RDS for MySQL instance](~~96050~~)
      * *   [Manually renew an ApsaraDB RDS for PostgreSQL instance](~~96741~~)
      * *   [Manually renew an ApsaraDB RDS for SQL Server instance](~~95637~~)
      * *   [Manually renew an ApsaraDB RDS for MariaDB instance](~~97122~~)
      *
      * @param request RenewInstanceRequest
      * @return RenewInstanceResponse
     */
    renewInstance(request: RenewInstanceRequest): Promise<RenewInstanceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Reset of the permissions of privileged accounts](~~140724~~)
      *
      * @param request ResetAccountRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ResetAccountResponse
     */
    resetAccountWithOptions(request: ResetAccountRequest, runtime: $Util.RuntimeOptions): Promise<ResetAccountResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Reset of the permissions of privileged accounts](~~140724~~)
      *
      * @param request ResetAccountRequest
      * @return ResetAccountResponse
     */
    resetAccount(request: ResetAccountRequest): Promise<ResetAccountResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Reset the password of an ApsaraDB RDS for MySQL instance](~~96100~~)
      * *   [Reset the password of an ApsaraDB RDS for PostgreSQL instance](~~96814~~)
      * *   [Reset the password of an ApsaraDB RDS for SQL Server instance](~~95691~~)
      * *   [Reset the password of an ApsaraDB RDS for MariaDB instance](~~97133~~)
      *
      * @param request ResetAccountPasswordRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ResetAccountPasswordResponse
     */
    resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: $Util.RuntimeOptions): Promise<ResetAccountPasswordResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Reset the password of an ApsaraDB RDS for MySQL instance](~~96100~~)
      * *   [Reset the password of an ApsaraDB RDS for PostgreSQL instance](~~96814~~)
      * *   [Reset the password of an ApsaraDB RDS for SQL Server instance](~~95691~~)
      * *   [Reset the password of an ApsaraDB RDS for MariaDB instance](~~97133~~)
      *
      * @param request ResetAccountPasswordRequest
      * @return ResetAccountPasswordResponse
     */
    resetAccountPassword(request: ResetAccountPasswordRequest): Promise<ResetAccountPasswordResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Restart an ApsaraDB RDS for MySQL instance](~~96051~~)
      * *   [Restart an ApsaraDB RDS for PostgreSQL instance](~~96798~~)
      * *   [Restart an ApsaraDB RDS for SQL Server instance](~~95656~~)
      * *   [Restart an ApsaraDB RDS for MariaDB instance](~~97472~~)
      *
      * @param request RestartDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RestartDBInstanceResponse
     */
    restartDBInstanceWithOptions(request: RestartDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<RestartDBInstanceResponse>;
    /**
      * ### Supported database engines
      * *   RDS MySQL
      * *   RDS PostgreSQL
      * *   RDS SQL Server
      * *   RDS MariaDB
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Restart an ApsaraDB RDS for MySQL instance](~~96051~~)
      * *   [Restart an ApsaraDB RDS for PostgreSQL instance](~~96798~~)
      * *   [Restart an ApsaraDB RDS for SQL Server instance](~~95656~~)
      * *   [Restart an ApsaraDB RDS for MariaDB instance](~~97472~~)
      *
      * @param request RestartDBInstanceRequest
      * @return RestartDBInstanceResponse
     */
    restartDBInstance(request: RestartDBInstanceRequest): Promise<RestartDBInstanceResponse>;
    /**
      * >  Before restoration, you can call the [CheckCreateDdrDBInstance](~~121721~~) operation to check whether a cross-region backup set can be used for cross-region restoration.
      * ### [](#)Supported database engine
      * MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~)
      * *   [Restore the data of an ApsaraDB RDS for MySQL instance across regions](~~120875~~)
      *
      * @param request RestoreDdrTableRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RestoreDdrTableResponse
     */
    restoreDdrTableWithOptions(request: RestoreDdrTableRequest, runtime: $Util.RuntimeOptions): Promise<RestoreDdrTableResponse>;
    /**
      * >  Before restoration, you can call the [CheckCreateDdrDBInstance](~~121721~~) operation to check whether a cross-region backup set can be used for cross-region restoration.
      * ### [](#)Supported database engine
      * MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Back up an ApsaraDB RDS for MySQL instance across regions](~~120824~~)
      * *   [Restore the data of an ApsaraDB RDS for MySQL instance across regions](~~120875~~)
      *
      * @param request RestoreDdrTableRequest
      * @return RestoreDdrTableResponse
     */
    restoreDdrTable(request: RestoreDdrTableRequest): Promise<RestoreDdrTableResponse>;
    /**
      * ### [](#)Supported database engines
      * MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Restore individual databases and tables](~~103175~~)
      *
      * @param request RestoreTableRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RestoreTableResponse
     */
    restoreTableWithOptions(request: RestoreTableRequest, runtime: $Util.RuntimeOptions): Promise<RestoreTableResponse>;
    /**
      * ### [](#)Supported database engines
      * MySQL
      * ### [](#)References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Restore individual databases and tables](~~103175~~)
      *
      * @param request RestoreTableRequest
      * @return RestoreTableResponse
     */
    restoreTable(request: RestoreTableRequest): Promise<RestoreTableResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)Prerequisites
      * *   The instance is in the Running state.
      * *   The database is in the Running state.
      * ### [](#)Precautions
      * *   The permissions that can be revoked include SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, and TRIGGER.
      * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition and run PostgreSQL.
      *
      * @param request RevokeAccountPrivilegeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RevokeAccountPrivilegeResponse
     */
    revokeAccountPrivilegeWithOptions(request: RevokeAccountPrivilegeRequest, runtime: $Util.RuntimeOptions): Promise<RevokeAccountPrivilegeResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)Prerequisites
      * *   The instance is in the Running state.
      * *   The database is in the Running state.
      * ### [](#)Precautions
      * *   The permissions that can be revoked include SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, and TRIGGER.
      * *   This operation is not supported for instances that run SQL Server 2017 on RDS Cluster Edition and run PostgreSQL.
      *
      * @param request RevokeAccountPrivilegeRequest
      * @return RevokeAccountPrivilegeResponse
     */
    revokeAccountPrivilege(request: RevokeAccountPrivilegeRequest): Promise<RevokeAccountPrivilegeResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Grant permissions to the service account of an ApsaraDB RDS for MySQL instance](~~96102~~)
      * *   [Grant permissions to the service account of an ApsaraDB RDS for PostgreSQL instance](~~146887~~)
      * *   [Grant permissions to the service account of an ApsaraDB RDS for SQL Server instance](~~95693~~)
      *
      * @param request RevokeOperatorPermissionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RevokeOperatorPermissionResponse
     */
    revokeOperatorPermissionWithOptions(request: RevokeOperatorPermissionRequest, runtime: $Util.RuntimeOptions): Promise<RevokeOperatorPermissionResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Grant permissions to the service account of an ApsaraDB RDS for MySQL instance](~~96102~~)
      * *   [Grant permissions to the service account of an ApsaraDB RDS for PostgreSQL instance](~~146887~~)
      * *   [Grant permissions to the service account of an ApsaraDB RDS for SQL Server instance](~~95693~~)
      *
      * @param request RevokeOperatorPermissionRequest
      * @return RevokeOperatorPermissionResponse
     */
    revokeOperatorPermission(request: RevokeOperatorPermissionRequest): Promise<RevokeOperatorPermissionResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
      * *   [Resume an ApsaraDB RDS for MySQL instance](~~427093~~)
      * *   [Resume an ApsaraDB RDS for PostgreSQL instance](~~452314~~)
      * *   [Resume an ApsaraDB RDS for SQL Server instance](~~462504~~)
      *
      * @param request StartDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return StartDBInstanceResponse
     */
    startDBInstanceWithOptions(request: StartDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<StartDBInstanceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation:
      * *   [Resume an ApsaraDB RDS for MySQL instance](~~427093~~)
      * *   [Resume an ApsaraDB RDS for PostgreSQL instance](~~452314~~)
      * *   [Resume an ApsaraDB RDS for SQL Server instance](~~462504~~)
      *
      * @param request StartDBInstanceRequest
      * @return StartDBInstanceResponse
     */
    startDBInstance(request: StartDBInstanceRequest): Promise<StartDBInstanceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Suspend an ApsaraDB RDS for MySQL instance](~~427093~~)
      * *   [Suspend an ApsaraDB RDS for PostgreSQL instance](~~452314~~)
      * *   [Suspend an ApsaraDB RDS for SQL Server instance](~~462504~~)
      *
      * @param request StopDBInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return StopDBInstanceResponse
     */
    stopDBInstanceWithOptions(request: StopDBInstanceRequest, runtime: $Util.RuntimeOptions): Promise<StopDBInstanceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Suspend an ApsaraDB RDS for MySQL instance](~~427093~~)
      * *   [Suspend an ApsaraDB RDS for PostgreSQL instance](~~452314~~)
      * *   [Suspend an ApsaraDB RDS for SQL Server instance](~~462504~~)
      *
      * @param request StopDBInstanceRequest
      * @return StopDBInstanceResponse
     */
    stopDBInstance(request: StopDBInstanceRequest): Promise<StopDBInstanceResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Switch workloads between primary and secondary ApsaraDB RDS for MySQL instances](~~96054~~)
      * *   [Switch workloads between primary and secondary ApsaraDB RDS for PostgreSQL instances](~~96747~~)
      * *   [Switch workloads between primary and secondary ApsaraDB RDS for SQL Server instances](~~95659~~)
      * *   [Switch workloads between primary and secondary ApsaraDB RDS for MariaDB instances](~~97127~~)
      *
      * @param request SwitchDBInstanceHARequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SwitchDBInstanceHAResponse
     */
    switchDBInstanceHAWithOptions(request: SwitchDBInstanceHARequest, runtime: $Util.RuntimeOptions): Promise<SwitchDBInstanceHAResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Switch workloads between primary and secondary ApsaraDB RDS for MySQL instances](~~96054~~)
      * *   [Switch workloads between primary and secondary ApsaraDB RDS for PostgreSQL instances](~~96747~~)
      * *   [Switch workloads between primary and secondary ApsaraDB RDS for SQL Server instances](~~95659~~)
      * *   [Switch workloads between primary and secondary ApsaraDB RDS for MariaDB instances](~~97127~~)
      *
      * @param request SwitchDBInstanceHARequest
      * @return SwitchDBInstanceHAResponse
     */
    switchDBInstanceHA(request: SwitchDBInstanceHARequest): Promise<SwitchDBInstanceHAResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### Prerequisites
      * *   The instance is connected by using its internal or public endpoint.
      * *   The instance is in the Running state.
      * *   The number of times that you have switched the instance between its internal and public endpoints within the last 24 hours does not reach 20.
      * *   The instance resides in the classic network.
      * ### Usage notes
      * After the endpoint that is used to connect to the instance is changed, you must update the endpoint information in the code of your application and restart the application.
      *
      * @param request SwitchDBInstanceNetTypeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SwitchDBInstanceNetTypeResponse
     */
    switchDBInstanceNetTypeWithOptions(request: SwitchDBInstanceNetTypeRequest, runtime: $Util.RuntimeOptions): Promise<SwitchDBInstanceNetTypeResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   SQL Server
      * ### Prerequisites
      * *   The instance is connected by using its internal or public endpoint.
      * *   The instance is in the Running state.
      * *   The number of times that you have switched the instance between its internal and public endpoints within the last 24 hours does not reach 20.
      * *   The instance resides in the classic network.
      * ### Usage notes
      * After the endpoint that is used to connect to the instance is changed, you must update the endpoint information in the code of your application and restart the application.
      *
      * @param request SwitchDBInstanceNetTypeRequest
      * @return SwitchDBInstanceNetTypeResponse
     */
    switchDBInstanceNetType(request: SwitchDBInstanceNetTypeRequest): Promise<SwitchDBInstanceNetTypeResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Change the VPC and vSwitch for an ApsaraDB RDS for MySQL instance](~~137567~~)
      * *   [Change the vSwitch for an ApsaraDB RDS for PostgreSQL instance](~~146885~~)
      * *   [Change the VPC and vSwitch for an ApsaraDB RDS for SQL Server instance](~~347675~~)
      *
      * @param request SwitchDBInstanceVpcRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SwitchDBInstanceVpcResponse
     */
    switchDBInstanceVpcWithOptions(request: SwitchDBInstanceVpcRequest, runtime: $Util.RuntimeOptions): Promise<SwitchDBInstanceVpcResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Change the VPC and vSwitch for an ApsaraDB RDS for MySQL instance](~~137567~~)
      * *   [Change the vSwitch for an ApsaraDB RDS for PostgreSQL instance](~~146885~~)
      * *   [Change the VPC and vSwitch for an ApsaraDB RDS for SQL Server instance](~~347675~~)
      *
      * @param request SwitchDBInstanceVpcRequest
      * @return SwitchDBInstanceVpcResponse
     */
    switchDBInstanceVpc(request: SwitchDBInstanceVpcRequest): Promise<SwitchDBInstanceVpcResponse>;
    /**
      * This operation is phased out.
      *
      * @param request SwitchGuardToMasterInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SwitchGuardToMasterInstanceResponse
     */
    switchGuardToMasterInstanceWithOptions(request: SwitchGuardToMasterInstanceRequest, runtime: $Util.RuntimeOptions): Promise<SwitchGuardToMasterInstanceResponse>;
    /**
      * This operation is phased out.
      *
      * @param request SwitchGuardToMasterInstanceRequest
      * @return SwitchGuardToMasterInstanceResponse
     */
    switchGuardToMasterInstance(request: SwitchGuardToMasterInstanceRequest): Promise<SwitchGuardToMasterInstanceResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Create tags for an ApsaraDB RDS for MySQL instance](~~96149~~)
      * *   [Create tags for an ApsaraDB RDS for PostgreSQL instance](~~96777~~)
      * *   [Create tags for an ApsaraDB RDS for SQL Server instance](~~95726~~)
      * *   [Create tags for an ApsaraDB RDS for MariaDB instance](~~97152~~)
      *
      * @param request TagResourcesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return TagResourcesResponse
     */
    tagResourcesWithOptions(request: TagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<TagResourcesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * *   [Create tags for an ApsaraDB RDS for MySQL instance](~~96149~~)
      * *   [Create tags for an ApsaraDB RDS for PostgreSQL instance](~~96777~~)
      * *   [Create tags for an ApsaraDB RDS for SQL Server instance](~~95726~~)
      * *   [Create tags for an ApsaraDB RDS for MariaDB instance](~~97152~~)
      *
      * @param request TagResourcesRequest
      * @return TagResourcesResponse
     */
    tagResources(request: TagResourcesRequest): Promise<TagResourcesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      *
      * @param request TerminateMigrateTaskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return TerminateMigrateTaskResponse
     */
    terminateMigrateTaskWithOptions(request: TerminateMigrateTaskRequest, runtime: $Util.RuntimeOptions): Promise<TerminateMigrateTaskResponse>;
    /**
      * ### [](#)Supported database engines
      * *   SQL Server
      *
      * @param request TerminateMigrateTaskRequest
      * @return TerminateMigrateTaskResponse
     */
    terminateMigrateTask(request: TerminateMigrateTaskRequest): Promise<TerminateMigrateTaskResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Fees are generated if the call is successful. Before you call this operation, you must read the following documentation.
      * *   [Change the billing method of an ApsaraDB RDS for MySQL instance from pay-as-you-go to subscription](~~96048~~) or [Change the billing method of an ApsaraDB RDS for MySQL instance from subscription to pay-as-you-go](~~161875~~)
      * *   [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from pay-as-you-go to subscription](~~96743~~) or [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from subscription to pay-as-you-go](~~162756~~)
      * *   [Change the billing method of an ApsaraDB RDS for SQL Server instance from pay-as-you-go to subscription](~~95631~~) or [Change the billing method of an ApsaraDB RDS for SQL Server instance from subscription to pay-as-you-go](~~162755~~)
      * *   [Change the billing method of an ApsaraDB RDS for MariaDB instance from pay-as-you-go to subscription](~~97120~~) or [Change the billing method of an ApsaraDB RDS for MariaDB instance from subscription to pay-as-you-go](~~169252~~)
      *
      * @param request TransformDBInstancePayTypeRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return TransformDBInstancePayTypeResponse
     */
    transformDBInstancePayTypeWithOptions(request: TransformDBInstancePayTypeRequest, runtime: $Util.RuntimeOptions): Promise<TransformDBInstancePayTypeResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### References
      * > Fees are generated if the call is successful. Before you call this operation, you must read the following documentation.
      * *   [Change the billing method of an ApsaraDB RDS for MySQL instance from pay-as-you-go to subscription](~~96048~~) or [Change the billing method of an ApsaraDB RDS for MySQL instance from subscription to pay-as-you-go](~~161875~~)
      * *   [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from pay-as-you-go to subscription](~~96743~~) or [Change the billing method of an ApsaraDB RDS for PostgreSQL instance from subscription to pay-as-you-go](~~162756~~)
      * *   [Change the billing method of an ApsaraDB RDS for SQL Server instance from pay-as-you-go to subscription](~~95631~~) or [Change the billing method of an ApsaraDB RDS for SQL Server instance from subscription to pay-as-you-go](~~162755~~)
      * *   [Change the billing method of an ApsaraDB RDS for MariaDB instance from pay-as-you-go to subscription](~~97120~~) or [Change the billing method of an ApsaraDB RDS for MariaDB instance from subscription to pay-as-you-go](~~169252~~)
      *
      * @param request TransformDBInstancePayTypeRequest
      * @return TransformDBInstancePayTypeResponse
     */
    transformDBInstancePayType(request: TransformDBInstancePayTypeRequest): Promise<TransformDBInstancePayTypeResponse>;
    /**
      * ### Supported database engine
      * PostgreSQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Lock an account of an ApsaraDB RDS for PostgreSQL instance](~~147649~~)
      *
      * @param request UnlockAccountRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UnlockAccountResponse
     */
    unlockAccountWithOptions(request: UnlockAccountRequest, runtime: $Util.RuntimeOptions): Promise<UnlockAccountResponse>;
    /**
      * ### Supported database engine
      * PostgreSQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Lock an account of an ApsaraDB RDS for PostgreSQL instance](~~147649~~)
      *
      * @param request UnlockAccountRequest
      * @return UnlockAccountResponse
     */
    unlockAccount(request: UnlockAccountRequest): Promise<UnlockAccountResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)Usage notes
      * *   You can remove up to 20 tags at a time.
      * *   If a tag is removed from an instance and is not added to other instances, the tag is automatically deleted.
      *
      * @param request UntagResourcesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UntagResourcesResponse
     */
    untagResourcesWithOptions(request: UntagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<UntagResourcesResponse>;
    /**
      * ### [](#)Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * *   MariaDB
      * ### [](#)Usage notes
      * *   You can remove up to 20 tags at a time.
      * *   If a tag is removed from an instance and is not added to other instances, the tag is automatically deleted.
      *
      * @param request UntagResourcesRequest
      * @return UntagResourcesResponse
     */
    untagResources(request: UntagResourcesRequest): Promise<UntagResourcesResponse>;
    /**
      * ### Supported database engines
      * RDS PostgreSQL
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Manage extensions](~~2402409~~)
      *
      * @param request UpdatePostgresExtensionsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdatePostgresExtensionsResponse
     */
    updatePostgresExtensionsWithOptions(request: UpdatePostgresExtensionsRequest, runtime: $Util.RuntimeOptions): Promise<UpdatePostgresExtensionsResponse>;
    /**
      * ### Supported database engines
      * RDS PostgreSQL
      * ### References
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Manage extensions](~~2402409~~)
      *
      * @param request UpdatePostgresExtensionsRequest
      * @return UpdatePostgresExtensionsResponse
     */
    updatePostgresExtensions(request: UpdatePostgresExtensionsRequest): Promise<UpdatePostgresExtensionsResponse>;
    /**
      * ### Supported database engines
      * RDS MySQL
      * ### References
      * A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 or MySQL 8.0 instance to an ApsaraDB RDS for MySQL instance](~~251779~~).
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      *
      * @param request UpdateUserBackupFileRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateUserBackupFileResponse
     */
    updateUserBackupFileWithOptions(request: UpdateUserBackupFileRequest, runtime: $Util.RuntimeOptions): Promise<UpdateUserBackupFileResponse>;
    /**
      * ### Supported database engines
      * RDS MySQL
      * ### References
      * A full backup file contains the data of a self-managed MySQL database. You can restore the data of a self-managed MySQL database from a full backup file to an ApsaraDB RDS for MySQL instance. For more information, see [Migrate the data of a self-managed MySQL 5.7 or MySQL 8.0 instance to an ApsaraDB RDS for MySQL instance](~~251779~~).
      * > : Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      *
      * @param request UpdateUserBackupFileRequest
      * @return UpdateUserBackupFileResponse
     */
    updateUserBackupFile(request: UpdateUserBackupFileRequest): Promise<UpdateUserBackupFileResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Upgrade the major engine version of an ApsaraDB RDS for MySQL instance](~~96058~~)
      *
      * @param request UpgradeDBInstanceEngineVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpgradeDBInstanceEngineVersionResponse
     */
    upgradeDBInstanceEngineVersionWithOptions(request: UpgradeDBInstanceEngineVersionRequest, runtime: $Util.RuntimeOptions): Promise<UpgradeDBInstanceEngineVersionResponse>;
    /**
      * ### Supported database engine
      * MySQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * [Upgrade the major engine version of an ApsaraDB RDS for MySQL instance](~~96058~~)
      *
      * @param request UpgradeDBInstanceEngineVersionRequest
      * @return UpgradeDBInstanceEngineVersionResponse
     */
    upgradeDBInstanceEngineVersion(request: UpgradeDBInstanceEngineVersionRequest): Promise<UpgradeDBInstanceEngineVersionResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Update the minor engine version of an ApsaraDB RDS for MySQL instance](~~96059~~)
      * *   [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](~~146895~~)
      * *   [Update the minor engine version of an ApsaraDB RDS for SQL Server instance](~~213582~~)
      *
      * @param request UpgradeDBInstanceKernelVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpgradeDBInstanceKernelVersionResponse
     */
    upgradeDBInstanceKernelVersionWithOptions(request: UpgradeDBInstanceKernelVersionRequest, runtime: $Util.RuntimeOptions): Promise<UpgradeDBInstanceKernelVersionResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * *   SQL Server
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Update the minor engine version of an ApsaraDB RDS for MySQL instance](~~96059~~)
      * *   [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](~~146895~~)
      * *   [Update the minor engine version of an ApsaraDB RDS for SQL Server instance](~~213582~~)
      *
      * @param request UpgradeDBInstanceKernelVersionRequest
      * @return UpgradeDBInstanceKernelVersionResponse
     */
    upgradeDBInstanceKernelVersion(request: UpgradeDBInstanceKernelVersionRequest): Promise<UpgradeDBInstanceKernelVersionResponse>;
    /**
      * ### Supported database engine
      * PostgreSQL
      * ### References
      * Fees are generated if the call is successful. Before you call this operation, read the following documentation and make sure that you fully understand the billing rules, prerequisites, and impacts of this operation.
      * [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](~~203309~~)
      *
      * @param request UpgradeDBInstanceMajorVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpgradeDBInstanceMajorVersionResponse
     */
    upgradeDBInstanceMajorVersionWithOptions(request: UpgradeDBInstanceMajorVersionRequest, runtime: $Util.RuntimeOptions): Promise<UpgradeDBInstanceMajorVersionResponse>;
    /**
      * ### Supported database engine
      * PostgreSQL
      * ### References
      * Fees are generated if the call is successful. Before you call this operation, read the following documentation and make sure that you fully understand the billing rules, prerequisites, and impacts of this operation.
      * [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](~~203309~~)
      *
      * @param request UpgradeDBInstanceMajorVersionRequest
      * @return UpgradeDBInstanceMajorVersionResponse
     */
    upgradeDBInstanceMajorVersion(request: UpgradeDBInstanceMajorVersionRequest): Promise<UpgradeDBInstanceMajorVersionResponse>;
    /**
      * ### Supported database engine
      * PostgreSQL
      * ### References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](~~203309~~)
      *
      * @param request UpgradeDBInstanceMajorVersionPrecheckRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpgradeDBInstanceMajorVersionPrecheckResponse
     */
    upgradeDBInstanceMajorVersionPrecheckWithOptions(request: UpgradeDBInstanceMajorVersionPrecheckRequest, runtime: $Util.RuntimeOptions): Promise<UpgradeDBInstanceMajorVersionPrecheckResponse>;
    /**
      * ### Supported database engine
      * PostgreSQL
      * ### References
      * > Before you call this operation, carefully read the following documentation. Make sure that you fully understand the prerequisites and impacts for calling this operation.
      * [Upgrade the major engine version of an ApsaraDB RDS for PostgreSQL instance](~~203309~~)
      *
      * @param request UpgradeDBInstanceMajorVersionPrecheckRequest
      * @return UpgradeDBInstanceMajorVersionPrecheckResponse
     */
    upgradeDBInstanceMajorVersionPrecheck(request: UpgradeDBInstanceMajorVersionPrecheckRequest): Promise<UpgradeDBInstanceMajorVersionPrecheckResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Upgrade the dedicated proxy version of an ApsaraDB RDS for MySQL instance](~~197465~~)
      * *   [Upgrade the dedicated proxy version of an ApsaraDB RDS for PostgreSQL instance](~~418469~~)
      *
      * @param request UpgradeDBProxyInstanceKernelVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpgradeDBProxyInstanceKernelVersionResponse
     */
    upgradeDBProxyInstanceKernelVersionWithOptions(request: UpgradeDBProxyInstanceKernelVersionRequest, runtime: $Util.RuntimeOptions): Promise<UpgradeDBProxyInstanceKernelVersionResponse>;
    /**
      * ### Supported database engines
      * *   MySQL
      * *   PostgreSQL
      * ### References
      * > Before you call this operation, read the following documentation and make sure that you fully understand the prerequisites and impacts of this operation.
      * *   [Upgrade the dedicated proxy version of an ApsaraDB RDS for MySQL instance](~~197465~~)
      * *   [Upgrade the dedicated proxy version of an ApsaraDB RDS for PostgreSQL instance](~~418469~~)
      *
      * @param request UpgradeDBProxyInstanceKernelVersionRequest
      * @return UpgradeDBProxyInstanceKernelVersionResponse
     */
    upgradeDBProxyInstanceKernelVersion(request: UpgradeDBProxyInstanceKernelVersionRequest): Promise<UpgradeDBProxyInstanceKernelVersionResponse>;
}
